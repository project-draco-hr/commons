@classmethod
def append_entry(cls, config_reader, filepath, oldbinsha, newbinsha, message):
    'Append a new log entry to the revlog at filepath.\n\t\t\n\t\t:param config_reader: configuration reader of the repository - used to obtain\n\t\t\tuser information. May be None\n\t\t:param filepath: full path to the log file\n\t\t:param oldbinsha: binary sha of the previous commit\n\t\t:param newbinsha: binary sha of the current commit\n\t\t:param message: message describing the change to the reference\n\t\t:param write: If True, the changes will be written right away. Otherwise\n\t\t\tthe change will not be written\n\t\t:return: RefLogEntry objects which was appended to the log\n\t\t:note: As we are append-only, concurrent access is not a problem as we \n\t\t\tdo not interfere with readers.'
    if ((len(oldbinsha) != 20) or (len(newbinsha) != 20)):
        raise ValueError('Shas need to be given in binary format')
    assure_directory_exists(filepath, is_file=True)
    entry = RefLogEntry((bin_to_hex(oldbinsha), bin_to_hex(newbinsha), Actor.committer(config_reader), (int(time.time()), time.altzone), message))
    lf = LockFile(filepath)
    lf._obtain_lock_or_raise()
    fd = open(filepath, 'a')
    try:
        fd.write(repr(entry))
    finally:
        fd.close()
        lf._release_lock()
    return entry
