def __init__(self, label, dependencies=None, dependents=None, description=None):
    '\n      @label = the label that identifies this module for dependency management\n      @dependencies = a string or list of strings of modules this module depends upon (optional)\n      @dependents = a string or list of strings of modules that depend upon this module (optional)\n      @description = a one-liner describing this application module, e.g. "Logging module"\n    '
    self._label = label
    self._description = description
    self._dependencies = maybe_list((dependencies or []))
    self._dependents = maybe_list((dependents or []))
    self._MODULE_REGISTRY[label] = self
    self._MODULE_DEPENDENCIES[label].update(self._dependencies)
    for dependent in self._dependents:
        self._MODULE_DEPENDENCIES[dependent].add(label)
    try:
        list(topological_sort(self._MODULE_DEPENDENCIES))
    except DependencyCycle:
        raise AppModule.DependencyCycle('Found a cycle in app module dependencies!')
