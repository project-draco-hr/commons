def __init__(self, label, dependencies=None, description=None):
    '\n      @label = the label that identifies this module for dependency management\n      @dependencies = a string or list of strings of modules this module depends upon (optional)\n      @description = a one-liner describing this application module, e.g. "Logging module"\n    '
    self._label = label
    self._description = description
    if isinstance(dependencies, list):
        self._dependencies = set(dependencies)
    elif isinstance(dependencies, Compatibility.string):
        self._dependencies = set([dependencies])
    elif (dependencies is None):
        self._dependencies = set()
    else:
        raise TypeError(('Dependencies should be None, string or list of strings, got: %s' % type(dependencies)))
    AppModule._MODULE_REGISTRY[label] = self
    AppModule._MODULE_DEPENDENCIES[label] = self._dependencies
    try:
        list(topological_sort(AppModule._MODULE_DEPENDENCIES))
    except DependencyCycle:
        raise AppModule.DependencyCycle('Found a cycle in app module dependencies!')
