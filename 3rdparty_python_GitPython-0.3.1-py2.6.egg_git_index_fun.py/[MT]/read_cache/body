def read_cache(stream):
    "Read a cache file from the given stream\n\t:return: tuple(version, entries_dict, extension_data, content_sha)\n\t\t* version is the integer version number\n\t\t* entries dict is a dictionary which maps IndexEntry instances to a path\n\t\t\tat a stage\n\t\t* extension_data is '' or 4 bytes of type + 4 bytes of size + size bytes\n\t\t* content_sha is a 20 byte sha on all cache file contents"
    (version, num_entries) = read_header(stream)
    count = 0
    entries = dict()
    read = stream.read
    tell = stream.tell
    while (count < num_entries):
        beginoffset = tell()
        ctime = unpack('>8s', read(8))[0]
        mtime = unpack('>8s', read(8))[0]
        (dev, ino, mode, uid, gid, size, sha, flags) = unpack('>LLLLLL20sH', read(((20 + (4 * 6)) + 2)))
        path_size = (flags & CE_NAMEMASK)
        path = read(path_size)
        real_size = (((tell() - beginoffset) + 8) & (~ 7))
        data = read(((beginoffset + real_size) - tell()))
        entry = IndexEntry((mode, sha, flags, path, ctime, mtime, dev, ino, uid, gid, size))
        entries[(path, entry.stage)] = entry
        count += 1
    extension_data = stream.read((~ 0))
    assert (len(extension_data) > 19), ('Index Footer was not at least a sha on content as it was only %i bytes in size' % len(extension_data))
    content_sha = extension_data[(-20):]
    extension_data = extension_data[:(-20)]
    return (version, entries, extension_data, content_sha)
