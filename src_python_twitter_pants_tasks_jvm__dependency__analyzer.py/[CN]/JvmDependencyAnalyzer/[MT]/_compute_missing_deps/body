def _compute_missing_deps(self, srcs, actual_deps):
    'Computes deps that are used but not specified in a BUILD file.\n\n    - actual_deps: a map src -> list of actual deps (source, class or jar file) as noted by the compiler.\n\n    Returns a map src -> list of actual deps that are not specified in the relevant BUILD file.\n\n    All paths in the input and output are absolute.\n    '

    def must_be_explicit_dep(dep):
        return (not dep.startswith(self._context.java_home))
    target_by_file = self.get_target_by_file()
    transitive_deps_by_target = self.get_transitive_deps_by_target()
    missing_file_deps = []
    missing_tgt_deps_map = defaultdict(list)
    missing_direct_tgt_deps_map = defaultdict(list)
    buildroot = get_buildroot()
    abs_srcs = [os.path.join(buildroot, src) for src in srcs]
    for src in abs_srcs:
        src_tgt = target_by_file.get(src)
        if (src_tgt is not None):
            for actual_dep in filter(must_be_explicit_dep, actual_deps.get(src, [])):
                actual_dep_tgt = target_by_file.get(actual_dep)
                if (actual_dep_tgt is None):
                    missing_file_deps.append((src, actual_dep))
                elif (actual_dep_tgt != src_tgt):
                    if (actual_dep_tgt not in transitive_deps_by_target.get(src_tgt, [])):
                        missing_tgt_deps_map[(src_tgt, actual_dep_tgt)].append((src, actual_dep))
                    elif (actual_dep_tgt not in src_tgt.dependencies):
                        missing_direct_tgt_deps_map[(src_tgt, actual_dep_tgt)].append((src, actual_dep))
        else:
            raise TaskError(('Requested dep info for unknown source file: %s' % src))
    return (missing_file_deps, missing_tgt_deps_map.items(), missing_direct_tgt_deps_map.items())
