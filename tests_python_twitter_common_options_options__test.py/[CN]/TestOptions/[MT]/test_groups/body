def test_groups(self):
    option_a = options.Option('-a', dest='a')
    option_b = options.Option('-b', dest='b')
    option_group_a = options.group('a')
    option_group_b = options.group('b')
    option_group_a.add_option(options.Option('--a1', dest='a1'), options.Option('--a2', dest='a2'))
    option_group_b.add_option(options.Option('--b1', dest='b1'), options.Option('--b2', dest='b2'))
    partial_parser = options.parser().interspersed_arguments(True).groups([option_group_a, option_group_b])
    full_parser = partial_parser.options([option_a, option_b])
    parameters = ['--a1', 'value_a1', '--a2', 'value_a2', '--b1', 'value_b1', '--b2', 'value_b2']
    full_parameters = (parameters + ['-a', 'value_a', '-b', 'value_b'])
    (values, leftovers) = partial_parser.parse(parameters)
    assert (values.a1 == 'value_a1')
    assert (values.a2 == 'value_a2')
    assert (values.b1 == 'value_b1')
    assert (values.b2 == 'value_b2')
    assert (leftovers == [])
    (values, leftovers) = full_parser.parse(full_parameters)
    assert (values.a1 == 'value_a1')
    assert (values.a2 == 'value_a2')
    assert (values.b1 == 'value_b1')
    assert (values.b2 == 'value_b2')
    assert (values.a == 'value_a')
    assert (values.b == 'value_b')
    assert (leftovers == [])
