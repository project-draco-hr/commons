def entry(nom, classdoc=None, msg_rst=None, argspec=None, funcdoc=None, methods=None):
    'Create a struct that our template expects to see.\n\n  :param nom: Symbol name, e.g. python_binary\n  :param classdoc: plain text appears above argspec\n  :param msg_rst: reST. useful in hand-crafted entries\n  :param argspec: arg string like (x, y="deflt")\n  :param funcdoc: function\'s __doc__, plain text\n  :param methods: list of entries for class\' methods\n  '

    def indent_docstring_by_1(s):
        'Given a non-empty docstring, return a version indented by a space.\n    Given an empty thing, return the thing itself\n    '
        if (not s):
            return s
        lines = s.expandtabs().splitlines()
        indent = 999
        for line in lines[1:]:
            stripped = line.lstrip()
            if stripped:
                indent = min(indent, (len(line) - len(stripped)))
        trimmed = [lines[0].strip()]
        if (indent < 999):
            for line in lines[1:]:
                trimmed.append(line[indent:].rstrip())
        while (trimmed and (not trimmed[(-1)])):
            trimmed.pop()
        while (trimmed and (not trimmed[0])):
            trimmed.pop(0)
        return '\n'.join([(' ' + t) for t in trimmed])
    return TemplateData(nom=nom.strip(), classdoc=indent_docstring_by_1(classdoc), msg_rst=indent_docstring_by_1(msg_rst), argspec=argspec, funcdoc=indent_docstring_by_1(funcdoc), methods=methods, showmethods=(methods and (len(methods) > 0)))
