{
  MetricRegistry registry=metrics.scope(name);
  registry.register(new AbstractGauge<Long>("count"){
    @Override public Long read(){
      return stats.populationSize();
    }
  }
);
  registry.register(new AbstractGauge<Long>("sum"){
    @Override public Long read(){
      return sum;
    }
  }
);
  registry.register(new AbstractGauge<Long>("avg"){
    @Override public Long read(){
      return (long)stats.mean();
    }
  }
);
  registry.register(new AbstractGauge<Long>("min"){
    @Override public Long read(){
      if (stats.populationSize() == 0) {
        return 0L;
      }
 else {
        return stats.min();
      }
    }
  }
);
  registry.register(new AbstractGauge<Long>("max"){
    @Override public Long read(){
      if (stats.populationSize() == 0) {
        return 0L;
      }
 else {
        return stats.max();
      }
    }
  }
);
  for (  final double p : quantiles) {
    registry.register(new AbstractGauge<Long>(gaugeName(p)){
      @Override public Long read(){
        double[] qs={p};
        return histogram.getQuantiles(qs)[0];
      }
    }
);
  }
}
