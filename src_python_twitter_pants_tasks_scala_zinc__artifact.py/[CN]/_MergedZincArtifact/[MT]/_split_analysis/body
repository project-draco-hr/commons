def _split_analysis(self, analysis_file_attr):
    "Split the merged analysis into one file per underlying artifact.\n\n    analysis_file_attr: one of 'analysis_file' or 'portable_analysis_file'.\n    "
    if (len(self.underlying_artifacts) <= 1):
        return
    SplitInfo = namedtuple('SplitInfo', ['sources', 'dst_classes_dir', 'dst_analysis_file'])

    def _analysis(artifact):
        return getattr(artifact, analysis_file_attr)
    if (len(self.underlying_artifacts) <= 1):
        return
    analysis_to_split = _analysis(self)
    if (not os.path.exists(analysis_to_split)):
        return
    splits = []
    for artifact in self.underlying_artifacts:
        splits.append(SplitInfo(artifact.sources, artifact.classes_dir, _analysis(artifact)))
    split_args = [(x.sources, x.dst_analysis_file) for x in splits]
    self.log.debug(('Splitting analysis file %s' % analysis_to_split))
    if self.factory.zinc_utils.run_zinc_split(analysis_to_split, split_args):
        raise TaskError(('zinc failed to split analysis files %s from %s' % (':'.join([x.dst_analysis_file for x in splits]), analysis_to_split)))
    with self.factory.context.new_workunit(name='rebase', labels=[WorkUnit.MULTITOOL]):
        for split in splits:
            if os.path.exists(split.dst_analysis_file):
                self.log.debug(('Rebasing analysis file %s after split' % split.dst_analysis_file))
                if self.factory.zinc_utils.run_zinc_rebase(split.dst_analysis_file, [(self.classes_dir, split.dst_classes_dir)]):
                    raise TaskError(('Zinc failed to rebase analysis file %s' % split.dst_analysis_file))
