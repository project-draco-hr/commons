def __init__(self, name, sources, resources=None, dependencies=None, timeout=Amount(2, Time.MINUTES), coverage=None, soft_dependencies=False, entry_point='pytest', exclusives=None):
    "\n    :param name: See PythonLibrary target\n    :param sources: A list of filenames representing the source code\n      this library is compiled from.\n    :type sources: list of strings\n    :param resources: See PythonLibrary target\n    :param dependencies: List of :class:`twitter.pants.base.target.Target` instances\n      this target depends on.\n    :type dependencies: list of targets\n    :param timeout: Amount of time before this test should be considered timed-out.\n    :param coverage: the module(s) whose coverage should be generated, e.g.\n      'twitter.common.log' or ['twitter.common.log', 'twitter.common.http']\n    :param soft_dependencies: Whether or not we should ignore dependency resolution\n      errors for this test.\n    :param entry_point: The entry point to use to run the tests.\n    :param dict exclusives: An optional dict of exclusives tags. See CheckExclusives for details.\n    "
    self._timeout = timeout
    self._soft_dependencies = bool(soft_dependencies)
    self._coverage = (maybe_list(coverage) if (coverage is not None) else [])
    self._entry_point = entry_point
    super(PythonTests, self).__init__(name, sources, resources, dependencies, exclusives=exclusives)
    self.add_labels('python', 'tests')
