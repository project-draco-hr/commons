@contextmanager
def new_workunit(self, name, labels=list(), cmd=''):
    "Creates a (hierarchical) subunit of work for the purpose of timing and reporting.\n\n    - name: A short name for this work. E.g., 'resolve', 'compile', 'scala', 'zinc'.\n    - labels: An optional iterable of labels. The reporters can use this to decide how to\n              display information about this work.\n    - cmd: An optional longer string representing this work.\n           E.g., the cmd line of a compiler invocation.\n\n    Use like this:\n\n    with run_tracker.new_workunit(name='compile', labels=[WorkUnit.GOAL]) as workunit:\n      <do scoped work here>\n      <set the outcome on workunit if necessary>\n\n    Note that the outcome will automatically be set to failure if an exception is raised\n    in a workunit, and to success otherwise, so usually you only need to set the\n    outcome explicitly if you want to set it to warning.\n    "
    parent = self._threadlocal.current_workunit
    with self.new_workunit_under_parent(name, parent=parent, labels=labels, cmd=cmd) as workunit:
        self._threadlocal.current_workunit = workunit
        try:
            yield workunit
        finally:
            self._threadlocal.current_workunit = parent
