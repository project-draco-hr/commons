def __init__(self, name, source=None, dependencies=None, entry_point=None, inherit_path=False, zip_safe=True, repositories=None, indices=None, ignore_errors=False, allow_pypi=False, platforms=(), interpreters=(Platform.python(),), provides=None, exclusives=None):
    "\n      name: target name\n\n      source: the python source file that becomes this binary's __main__ [optional]\n              if none specified, drops into an interpreter by default\n\n      dependencies: a list of other PythonLibrary or Pants targets this binary depends upon\n\n      entry_point: the default entry point for this binary (by default drops\n                   into the entry point defined by @source)\n\n      inherit_path: inherit the sys.path of the environment that this binary runs in\n\n      zip_safe: whether or not this binary is safe to run in compacted (zip-file) form\n\n      repositories: a list of repositories to query for dependencies\n\n      indices: a list of indices to use for packages\n\n      allow_pypi: whether or not this binary should be allowed to hit pypi for dependency\n                  management\n\n      platforms: extra platforms to target when building this binary.\n\n      interpreters: the interpreter versions to target when building this binary.  by default the\n                    current interpreter version (specify in the form: '2.6', '2.7', '3.2' etc.)\n    "
    if ((source is None) and (dependencies is None)):
        raise TargetDefinitionException(('ERROR: no source or dependencies declared for target %s' % name))
    if (source and entry_point):
        raise TargetDefinitionException('Can only declare an entry_point if no source binary is specified.')
    if ((not isinstance(platforms, (list, tuple))) and (not isinstance(platforms, Compatibility.string))):
        raise TargetDefinitionException('platforms must be a list, tuple or string.')
    if (not isinstance(interpreters, (list, tuple))):
        raise TargetDefinitionException('interpreters must be a list or tuple.')
    self._entry_point = entry_point
    self._inherit_path = bool(inherit_path)
    self._zip_safe = bool(zip_safe)
    self._interpreters = interpreters
    self._repositories = (repositories or [])
    self._indices = (indices or [])
    self._allow_pypi = bool(allow_pypi)
    self._ignore_errors = bool(ignore_errors)
    if isinstance(platforms, Compatibility.string):
        self._platforms = [platforms]
    else:
        self._platforms = platforms
    self._platforms = tuple(self._platforms)
    PythonTarget.__init__(self, name, ([] if (source is None) else [source]), dependencies=dependencies, provides=provides, exclusives=exclusives)
