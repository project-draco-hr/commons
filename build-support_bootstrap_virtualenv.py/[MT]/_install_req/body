def _install_req(py_executable, unzip=False, distribute=False, search_dirs=None, never_download=False):
    if (search_dirs is None):
        search_dirs = file_search_dirs()
    if (not distribute):
        setup_fn = ('setuptools-0.6c11-py%s.egg' % sys.version[:3])
        project_name = 'setuptools'
        bootstrap_script = EZ_SETUP_PY
        source = None
    else:
        setup_fn = None
        source = 'distribute-0.6.19.tar.gz'
        project_name = 'distribute'
        bootstrap_script = DISTRIBUTE_SETUP_PY
        _prev_sys_path = sys.path
        if os.environ.get('VIRTUALENV_INTERPRETER_RUNNING'):
            sys.path = sys.path[1:]
        try:
            try:
                import pkg_resources
                if (not hasattr(pkg_resources, '_distribute')):
                    location = os.path.dirname(pkg_resources.__file__)
                    logger.notify(('A globally installed setuptools was found (in %s)' % location))
                    logger.notify('Use the --no-site-packages option to use distribute in the virtualenv.')
            except ImportError:
                pass
        finally:
            sys.path = _prev_sys_path
    if (setup_fn is not None):
        setup_fn = _find_file(setup_fn, search_dirs)
    if (source is not None):
        source = _find_file(source, search_dirs)
    if (is_jython and (os._name == 'nt')):
        (fd, ez_setup) = tempfile.mkstemp('.py')
        os.write(fd, bootstrap_script)
        os.close(fd)
        cmd = [py_executable, ez_setup]
    else:
        cmd = [py_executable, '-c', bootstrap_script]
    if unzip:
        cmd.append('--always-unzip')
    env = {}
    remove_from_env = []
    if logger.stdout_level_matches(logger.DEBUG):
        cmd.append('-v')
    old_chdir = os.getcwd()
    if ((setup_fn is not None) and os.path.exists(setup_fn)):
        logger.info(('Using existing %s egg: %s' % (project_name, setup_fn)))
        cmd.append(setup_fn)
        if os.environ.get('PYTHONPATH'):
            env['PYTHONPATH'] = ((setup_fn + os.path.pathsep) + os.environ['PYTHONPATH'])
        else:
            env['PYTHONPATH'] = setup_fn
    else:
        if ((source is not None) and os.path.exists(source)):
            logger.info(('Using existing %s egg: %s' % (project_name, source)))
            os.chdir(os.path.dirname(source))
            remove_from_env.append('PYTHONPATH')
        else:
            if never_download:
                logger.fatal(("Can't find any local distributions of %s to install and --never-download is set.  Either re-run virtualenv without the --never-download option, or place a %s distribution (%s) in one of these locations: %r" % (project_name, project_name, (setup_fn or source), search_dirs)))
                sys.exit(1)
            logger.info(('No %s egg found; downloading' % project_name))
        cmd.extend(['--always-copy', '-U', project_name])
    logger.start_progress(('Installing %s...' % project_name))
    logger.indent += 2
    cwd = None
    if (project_name == 'distribute'):
        env['DONT_PATCH_SETUPTOOLS'] = 'true'

    def _filter_ez_setup(line):
        return filter_ez_setup(line, project_name)
    if (not os.access(os.getcwd(), os.W_OK)):
        cwd = tempfile.mkdtemp()
        if ((source is not None) and os.path.exists(source)):
            target = os.path.join(cwd, os.path.split(source)[(-1)])
            shutil.copy(source, target)
    try:
        call_subprocess(cmd, show_stdout=False, filter_stdout=_filter_ez_setup, extra_env=env, remove_from_env=remove_from_env, cwd=cwd)
    finally:
        logger.indent -= 2
        logger.end_progress()
        if (os.getcwd() != old_chdir):
            os.chdir(old_chdir)
        if (is_jython and (os._name == 'nt')):
            os.remove(ez_setup)
