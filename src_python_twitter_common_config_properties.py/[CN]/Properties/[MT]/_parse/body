@staticmethod
def _parse(lines):

    def coalesce_lines():
        line_iter = iter(lines)
        try:
            buffer = ''
            while True:
                line = next(line_iter)
                if line.strip().endswith('\\'):
                    buffer += line.strip()[:(-1)]
                else:
                    if buffer:
                        buffer += line.rstrip()
                    else:
                        buffer = line.strip()
                    try:
                        yield buffer
                    finally:
                        buffer = ''
        except StopIteration:
            pass

    def normalize(atom):
        return re.sub('\\\\([:=\\s])', '\\1', atom.strip())

    def parse_line(line):
        if (line and (not (line.startswith('#') or line.startswith('!')))):
            match = Properties._EXPLICIT_KV_SEP.search(line)
            if match:
                return (normalize(line[:match.start()]), normalize(line[match.end():]))
            else:
                space_sep = line.find(' ')
                if (space_sep == (-1)):
                    return (normalize(line), '')
                else:
                    return (normalize(line[:space_sep]), normalize(line[space_sep:]))
    props = OrderedDict()
    for line in coalesce_lines():
        kv_pair = parse_line(line)
        if kv_pair:
            (key, value) = kv_pair
            props[key] = value
    return props
