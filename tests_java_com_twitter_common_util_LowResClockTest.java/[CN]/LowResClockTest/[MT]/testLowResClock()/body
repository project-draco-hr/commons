{
  final SynchronousQueue<Token> queue=new SynchronousQueue<Token>();
  final WaitingFakeClock clock=new WaitingFakeClock(queue);
  ScheduledExecutorService mockExecutor=createMock(ScheduledExecutorService.class);
  final Capture<Runnable> runnable=new Capture<Runnable>();
  final Capture<Long> period=new Capture<Long>();
  mockExecutor.scheduleWithFixedDelay(capture(runnable),eq(0L),captureLong(period),eq(TimeUnit.MILLISECONDS));
  expectLastCall().andAnswer(new IAnswer(){
    public ScheduledFuture<?> answer(){
      final Thread t=new Thread(){
        @Override public void run(){
          long t=clock.nowMillis();
          try {
            while (true) {
              Token token=queue.take();
              if (clock.nowMillis() >= t + period.getValue()) {
                runnable.getValue().run();
                t=clock.nowMillis();
              }
              token.notifyCompletion();
            }
          }
 catch (          InterruptedException e) {
          }
        }
      }
;
      t.setDaemon(true);
      t.start();
      final ScheduledFuture<?> future=createMock(ScheduledFuture.class);
      final AtomicBoolean stopped=new AtomicBoolean(false);
      expect(future.isCancelled()).andAnswer(new IAnswer<Boolean>(){
        @Override public Boolean answer() throws Throwable {
          return stopped.get();
        }
      }
).anyTimes();
      expect(future.cancel(anyBoolean())).andAnswer(new IAnswer<Boolean>(){
        @Override public Boolean answer() throws Throwable {
          t.interrupt();
          stopped.set(true);
          return true;
        }
      }
);
      replay(future);
      return future;
    }
  }
);
  replay(mockExecutor);
  LowResClock lowRes=new LowResClock(Amount.of(1L,Time.SECONDS),mockExecutor,clock);
  long t=lowRes.nowMillis();
  clock.advance(Amount.of(100L,Time.MILLISECONDS));
  assertEquals(t,lowRes.nowMillis());
  clock.advance(Amount.of(900L,Time.MILLISECONDS));
  assertEquals(t + 1000,lowRes.nowMillis());
  clock.advance(Amount.of(100L,Time.MILLISECONDS));
  assertEquals(t + 1000,lowRes.nowMillis());
  lowRes.close();
  try {
    lowRes.nowMillis();
    fail("Closed clock should throw exception!");
  }
 catch (  IllegalStateException e) {
  }
}
