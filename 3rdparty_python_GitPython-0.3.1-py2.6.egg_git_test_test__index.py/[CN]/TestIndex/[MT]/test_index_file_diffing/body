@with_rw_repo('0.1.6')
def test_index_file_diffing(self, rw_repo):
    index = IndexFile(rw_repo)
    assert (index.path is not None)
    assert len(index.entries)
    index.write()
    cur_head_commit = rw_repo.head.reference.commit
    ref = rw_repo.head.reset('HEAD~6', index=True, working_tree=False)
    diff = index.diff()
    assert (len(diff) == 0)
    diff = index.diff('HEAD')
    assert (len(diff) == 0)
    diff = index.diff(cur_head_commit)
    assert len(diff)
    adiff = index.diff(str(cur_head_commit), R=True)
    odiff = index.diff(cur_head_commit, R=False)
    assert (adiff != odiff)
    assert (odiff == diff)
    wdiff = index.diff(None)
    assert (wdiff != adiff)
    assert (wdiff != odiff)
    self.failUnlessRaises(ValueError, index.diff, int)
    cur_branch = rw_repo.active_branch
    cur_commit = cur_branch.commit
    rev_head_parent = 'HEAD~1'
    assert (index.reset(rev_head_parent) is index)
    assert (cur_branch == rw_repo.active_branch)
    assert (cur_commit == rw_repo.head.commit)
    assert index.diff(None)
    new_data = 'will be reverted'
    file_path = os.path.join(rw_repo.working_tree_dir, 'CHANGES')
    fp = open(file_path, 'wb')
    fp.write(new_data)
    fp.close()
    index.reset(rev_head_parent, working_tree=True)
    assert (not index.diff(None))
    assert (cur_branch == rw_repo.active_branch)
    assert (cur_commit == rw_repo.head.commit)
    fp = open(file_path, 'rb')
    try:
        assert (fp.read() != new_data)
    finally:
        fp.close()
    test_file = os.path.join(rw_repo.working_tree_dir, 'CHANGES')
    open(test_file, 'ab').write('some data')
    rval = index.checkout(None, force=True, fprogress=self._fprogress)
    assert ('CHANGES' in list(rval))
    self._assert_fprogress([None])
    assert os.path.isfile(test_file)
    os.remove(test_file)
    rval = index.checkout(None, force=False, fprogress=self._fprogress)
    assert ('CHANGES' in list(rval))
    self._assert_fprogress([None])
    assert os.path.isfile(test_file)
    os.remove(test_file)
    rval = index.checkout(test_file, fprogress=self._fprogress)
    assert (list(rval)[0] == 'CHANGES')
    self._assert_fprogress([test_file])
    assert os.path.exists(test_file)
    self.failUnlessRaises(CheckoutError, index.checkout, 'doesnt_exist_ever.txt.that')
    self.failUnlessRaises(CheckoutError, index.checkout, paths=['doesnt/exist'])
    append_data = 'hello'
    fp = open(test_file, 'ab')
    fp.write(append_data)
    fp.close()
    try:
        index.checkout(test_file)
    except CheckoutError as e:
        assert ((len(e.failed_files) == 1) and (e.failed_files[0] == os.path.basename(test_file)))
        assert ((len(e.failed_files) == len(e.failed_reasons)) and isinstance(e.failed_reasons[0], basestring))
        assert (len(e.valid_files) == 0)
        assert open(test_file).read().endswith(append_data)
    else:
        raise AssertionError('Exception CheckoutError not thrown')
    index.checkout(test_file, force=True)
    assert (not open(test_file).read().endswith(append_data))
    shutil.rmtree(os.path.join(rw_repo.working_tree_dir, 'lib'))
    rval = index.checkout('lib')
    assert (len(list(rval)) > 1)
