def maybe_list(value, expected_type=Compatibility.string, raise_type=ValueError):
    "Given a value that could be a single value or iterable of a particular type, always return a\n  list of that type.\n\n  By default the expected type is a string, but can be specified with the 'expected_type' kwarg,\n  which can be a type or tuple of types.\n\n  By default raises ValueError on 'expected_type' mismatch, but can be specified with the\n  'raise_type' kwarg.\n\n  Raises ValueError if any type mismatches.\n  "
    from collections import Iterable
    if isinstance(value, expected_type):
        return [value]
    elif isinstance(value, Iterable):
        real_values = list(value)
        if (not all((isinstance(v, expected_type) for v in real_values))):
            raise raise_type(('Element of list is not of type ' + repr(expected_type)))
        return real_values
    else:
        raise raise_type(('Value must be a %r or iterable of %r' % (expected_type, expected_type)))
