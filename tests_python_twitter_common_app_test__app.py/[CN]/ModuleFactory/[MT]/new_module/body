def new_module(self, name, dependencies=None, with_setup=True, with_teardown=True):

    def setup_function(self):
        self._values['counter'] = (self._values['counter'] + 1)
        self._values[self.label()] = self._values['counter']

    def teardown_function(self):
        self._values['exit_counter'] = (self._values['exit_counter'] + 1)
        self._values[(self.label() + '_exit')] = self._values['exit_counter']

    def __init__(self, name, values):
        self._values = values
        Module.__init__(self, label=name, dependencies=dependencies)
    class_methods = {'__init__': __init__, }
    if with_setup:
        class_methods.update(setup_function=setup_function)
    if with_teardown:
        class_methods.update(teardown_function=teardown_function)
    AnonymousModule = type('AnonymousModule', (Module,), class_methods)
    return AnonymousModule(name, self._values)
