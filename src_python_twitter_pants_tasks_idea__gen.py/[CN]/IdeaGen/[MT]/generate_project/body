def generate_project(self, project):

    def create_content_root(source_set):
        root_relative_path = (os.path.join(source_set.source_base, source_set.path) if source_set.path else source_set.source_base)
        return TemplateData(path=root_relative_path, sources=[TemplateData(path=root_relative_path, package_prefix=(source_set.path.replace('/', '.') if source_set.path else None), is_test=source_set.is_test)], exclude_paths=[os.path.join(source_set.source_base, x) for x in source_set.excludes])
    content_roots = [create_content_root(source_set) for source_set in project.sources]
    if project.has_python:
        content_roots.extend((create_content_root(source_set) for source_set in project.py_sources))
    configured_module = TemplateData(root_dir=get_buildroot(), path=self.module_filename, content_roots=content_roots, has_bash=self.bash, has_python=project.has_python, has_scala=project.has_scala, has_tests=project.has_tests, internal_jars=[cp_entry.jar for cp_entry in project.internal_jars], internal_source_jars=[cp_entry.source_jar for cp_entry in project.internal_jars if cp_entry.source_jar], external_jars=[cp_entry.jar for cp_entry in project.external_jars], external_source_jars=[cp_entry.source_jar for cp_entry in project.external_jars if cp_entry.source_jar], extra_components=[])
    outdir = os.path.abspath(self.intellij_output_dir)
    if (not os.path.exists(outdir)):
        os.makedirs(outdir)
    configured_project = TemplateData(root_dir=get_buildroot(), outdir=outdir, modules=[configured_module], java_encoding=self.java_encoding, resource_extensions=self._get_resource_extensions(project), has_scala=project.has_scala, scala_compiler_classpath=project.scala_compiler_classpath, scala=(TemplateData(fsc=self.fsc) if project.has_scala else None), checkstyle_suppression_files=','.join(project.checkstyle_suppression_files), checkstyle_classpath=';'.join(project.checkstyle_classpath), debug_port=project.debug_port, extra_components=[])
    existing_project_components = None
    existing_module_components = None
    if (not self.nomerge):
        existing_project_components = self._parse_xml_component_elements(self.project_filename)
        existing_module_components = self._parse_xml_component_elements(self.module_filename)
    safe_mkdir(os.path.abspath(self.intellij_output_dir))
    ipr = self._generate_to_tempfile(Generator(pkgutil.get_data(__name__, self.project_template), project=configured_project))
    iml = self._generate_to_tempfile(Generator(pkgutil.get_data(__name__, self.module_template), module=configured_module))
    if (not self.nomerge):
        extra_project_components = self._get_components_to_merge(existing_project_components, ipr)
        extra_module_components = self._get_components_to_merge(existing_module_components, iml)
        os.remove(ipr)
        os.remove(iml)
        ipr = self._generate_to_tempfile(Generator(pkgutil.get_data(__name__, self.project_template), project=configured_project.extend(extra_components=extra_project_components)))
        iml = self._generate_to_tempfile(Generator(pkgutil.get_data(__name__, self.module_template), module=configured_module.extend(extra_components=extra_module_components)))
    shutil.move(ipr, self.project_filename)
    shutil.move(iml, self.module_filename)
    print ('\nGenerated project at %s%s' % (self.work_dir, os.sep))
    return (self.project_filename if self.open else None)
