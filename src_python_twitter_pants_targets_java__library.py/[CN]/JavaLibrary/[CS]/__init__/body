def __init__(self, name, sources, target_base=None, provides=None, dependencies=None, excludes=None, resources=None, binary_resources=None, deployjar=False, buildflags=None, is_meta=False):
    "name: The name of this module target, addressable via pants via the portion of the spec\n        following the colon\n    sources: A list of paths containing the java source files this modules jar is compiled from\n    provides: An optional Dependency object indicating the The ivy artifact to export\n    dependencies: An optional list of Dependency objects specifying the binary (jar) dependencies of\n        this module.\n    excludes: An optional list of dependency exclude patterns to filter all of this module's\n        transitive dependencies against.\n    resources: An optional list of paths containing (filterable) text file resources to place in\n        this module's jar\n    binary_resources: An optional list of paths containing binary resources to place in this\n        module's jar\n    deployjar: An optional boolean that turns on generation of a monolithic deploy jar\n    buildflags: A list of additional command line arguments to pass to the underlying build system\n        for this target"
    ExportableJvmLibrary.__init__(self, target_base, name, sources, provides, dependencies, excludes, buildflags, is_meta)
    self.sibling_resources_base = os.path.join(os.path.dirname(self.target_base), 'resources')
    self.resources = self._resolve_paths(self.sibling_resources_base, resources)
    self.binary_resources = self._resolve_paths(self.sibling_resources_base, binary_resources)
    self.deployjar = deployjar
