def __init__(self, name, sources, provides=None, dependencies=None, excludes=None, compiler=_COMPILER_DEFAULT, language=_LANGUAGE_DEFAULT, rpc_style=_RPC_STYLE_DEFAULT, namespace_map=None, exclusives=None):
    "\n    :param string name: The name of this target, which combined with this\n      build file defines the target :class:`twitter.pants.base.address.Address`.\n    :param sources: A list of filenames representing the source code\n      this library is compiled from.\n    :type sources: list of strings\n    :param Artifact provides:\n      The :class:`twitter.pants.targets.artifact.Artifact`\n      to publish that represents this target outside the repo.\n    :param dependencies: List of :class:`twitter.pants.base.target.Target` instances\n      this target depends on.\n    :type dependencies: list of targets\n    :param excludes: List of :class:`twitter.pants.targets.exclude.Exclude` instances\n      to filter this target's transitive dependencies against.\n    :param compiler: An optional compiler used to compile the thrift files.\n    :param language: The language used to generate the output files.\n      One of 'java' or 'scala' with a default of 'java'.\n    :param rpc_style: An optional rpc style to generate service stubs with.\n      One of 'sync', 'finagle' or 'ostrich' with a default of 'sync'.\n    :param namespace_map: A dictionary of namespaces to remap (old: new)\n    :param exclusives: An optional map of exclusives tags. See CheckExclusives for details.\n    "
    self._provides = provides
    super(JavaThriftLibrary, self).__init__(name, sources, dependencies, excludes, exclusives=exclusives)
    self.add_labels('codegen')
    self.add_labels('java')
    if dependencies:
        if (not isinstance(dependencies, Iterable)):
            raise TargetDefinitionException(self, ('dependencies must be Iterable but was: %s' % dependencies))
        maybe_list(dependencies, expected_type=(JarDependency, JavaThriftLibrary, Pants), raise_type=partial(TargetDefinitionException, self))

    def check_value_for_arg(arg, value, values):
        if (value not in values):
            raise TargetDefinitionException(self, ("%s may only be set to %s ('%s' not valid)" % (arg, ', or '.join(map(repr, values)), value)))
        return value
    compiler = (compiler or self._COMPILER_DEFAULT)
    self.compiler = check_value_for_arg('compiler', compiler, self._COMPILERS)
    language = (language or self._LANGUAGE_DEFAULT)
    self.language = check_value_for_arg('language', language, self._LANGUAGES)
    rpc_style = (rpc_style or self._RPC_STYLE_DEFAULT)
    self.rpc_style = check_value_for_arg('rpc_style', rpc_style, self._RPC_STYLES)
    self.namespace_map = namespace_map
