def __init__(self, name, sources, provides=None, dependencies=None, excludes=None, compiler=_COMPILER_DEFAULT, language=_LANGUAGE_DEFAULT, rpc_style=_RPC_STYLE_DEFAULT, namespace_map=None, buildflags=None, exclusives=None):
    "name: The name of this module target, addressable via pants via the portion of the spec\n        following the colon\n    sources: A list of paths containing the thrift source files this module's jar is compiled from\n    provides: An optional Dependency object indicating the The ivy artifact to export\n    dependencies: An optional list of Dependency objects specifying the binary (jar) dependencies of\n        this module.\n    excludes: An optional list of dependency exclude patterns to filter all of this module's\n        transitive dependencies against.\n    compiler: An optional compiler used to compile the thrift files {'thrift', 'scrooge',\n                                                                               'scrooge-legacy'}.\n        Defaults to 'thrift'.\n    language: An optional language used to generate the output files {'java', 'scala'}.\n        Defaults to 'java'.\n    rpc_style: An optional rpc style in code generation {'sync', 'finagle', 'ostrich'}.\n        Defaults to 'sync'.\n    namespace_map: A dictionary of namespaces to remap (old: new)\n    buildflags: DEPRECATED - A list of additional command line arguments to pass to the underlying\n        build system for this target - now ignored.\n    exclusives:   An optional map of exclusives tags. See CheckExclusives for details.\n\n    "
    ExportableJvmLibrary.__init__(self, name, sources, provides, dependencies, excludes, exclusives=exclusives)
    self.add_labels('codegen', 'java')

    def check_value_for_arg(arg, value, values):
        if (value not in values):
            raise TargetDefinitionException(self, ("%s may only be set to %s ('%s' not valid)" % (arg, ', or '.join(map(repr, values)), value)))
        return value
    compiler = (compiler or self._COMPILER_DEFAULT)
    self.compiler = check_value_for_arg('compiler', compiler, self._COMPILERS)
    language = (language or self._LANGUAGE_DEFAULT)
    self.language = check_value_for_arg('language', language, self._LANGUAGES)
    rpc_style = (rpc_style or self._RPC_STYLE_DEFAULT)
    self.rpc_style = check_value_for_arg('rpc_style', rpc_style, self._RPC_STYLES)
    self.namespace_map = namespace_map
