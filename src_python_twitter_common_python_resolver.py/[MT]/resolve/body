def resolve(requirements, cache=None, crawler=None, fetchers=None, obtainer=None, interpreter=None, platform=None):
    "Resolve a list of requirements into distributions.\n\n     :param requirements: A list of strings or :class:`pkg_resources.Requirement` objects to be\n                          resolved.\n     :param cache: The filesystem path to cache distributions or None for no caching.\n     :param crawler: The :class:`Crawler` object to use to crawl for artifacts.  If None specified\n                     a default crawler will be constructed.\n     :param fetchers: A list of :class:`Fetcher` objects for generating links.  If None specified,\n                      default to fetching from PyPI.\n     :param obtainer: An :class:`Obtainer` object for converting from links to\n                      :class:`pkg_resources.Distribution` objects.  If None specified, a default\n                      will be provided that accepts eggs or building from source.\n     :param interpreter: A :class:`PythonInterpreter` object to resolve against.  If None specified,\n                         use the current interpreter.\n     :param platform: The string representing the platform to be resolved, such as `'linux-x86_64'`\n                      or `'macosx-10.7-intel'`.  If None specified, the current platform is used.\n  "
    requirements = maybe_requirement_list(requirements)
    crawler = (crawler or Crawler())
    fetchers = (fetchers or [PyPIFetcher()])
    interpreter = (interpreter or PythonInterpreter.get())
    platform = (platform or Platform.current())
    shared_options = dict(install_cache=cache, platform=platform)
    egg_translator = EggTranslator(python=interpreter.python, **shared_options)
    cache_obtainer = (Obtainer(crawler, [Fetcher([cache])], egg_translator) if cache else None)
    source_translator = SourceTranslator(interpreter=interpreter, **shared_options)
    translator = ChainedTranslator(egg_translator, source_translator)
    obtainer = Obtainer(crawler, fetchers, translator)

    def installer(req):
        if (cache_obtainer and requirement_is_exact(req)):
            dist = cache_obtainer.obtain(req)
            if dist:
                return dist
        return obtainer.obtain(req)
    working_set = WorkingSet(entries=[])
    env = ResolverEnvironment(search_path=[], platform=platform, python=interpreter.python)
    return working_set.resolve(requirements, env=env, installer=installer)
