{
  final OperatingSystemMXBean osMbean=ManagementFactory.getOperatingSystemMXBean();
  if (osMbean instanceof com.sun.management.OperatingSystemMXBean) {
    final com.sun.management.OperatingSystemMXBean sunOsMbean=(com.sun.management.OperatingSystemMXBean)osMbean;
    Stats.exportAll(ImmutableList.<Stat<? extends Number>>builder().add(new StatImpl<Long>("system_free_physical_memory_mb"){
      @Override public Long read(){
        return sunOsMbean.getFreePhysicalMemorySize() / BYTES_PER_MB;
      }
    }
).add(new StatImpl<Long>("system_free_swap_mb"){
      @Override public Long read(){
        return sunOsMbean.getFreeSwapSpaceSize() / BYTES_PER_MB;
      }
    }
).add(Rate.of(new StatImpl<Long>("process_cpu_time_nanos"){
      @Override public Long read(){
        return sunOsMbean.getProcessCpuTime();
      }
    }
).withName("process_cpu_cores_utilized").withScaleFactor(SECS_PER_NANO).build()).build());
  }
  if (osMbean instanceof com.sun.management.UnixOperatingSystemMXBean) {
    final com.sun.management.UnixOperatingSystemMXBean unixOsMbean=(com.sun.management.UnixOperatingSystemMXBean)osMbean;
    Stats.exportAll(ImmutableList.<Stat<? extends Number>>builder().add(new StatImpl<Long>("process_max_fd_count"){
      @Override public Long read(){
        return unixOsMbean.getMaxFileDescriptorCount();
      }
    }
).add(new StatImpl<Long>("process_open_fd_count"){
      @Override public Long read(){
        return unixOsMbean.getOpenFileDescriptorCount();
      }
    }
).build());
  }
  final Runtime runtime=Runtime.getRuntime();
  final ClassLoadingMXBean classLoadingBean=ManagementFactory.getClassLoadingMXBean();
  MemoryMXBean memoryBean=ManagementFactory.getMemoryMXBean();
  final MemoryUsage heapUsage=memoryBean.getHeapMemoryUsage();
  final MemoryUsage nonHeapUsage=memoryBean.getNonHeapMemoryUsage();
  final ThreadMXBean threads=ManagementFactory.getThreadMXBean();
  final RuntimeMXBean runtimeMXBean=ManagementFactory.getRuntimeMXBean();
  Stats.exportAll(ImmutableList.<Stat<? extends Number>>builder().add(new StatImpl<Long>("jvm_time_ms"){
    @Override public Long read(){
      return System.currentTimeMillis();
    }
  }
).add(new StatImpl<Integer>("jvm_available_processors"){
    @Override public Integer read(){
      return runtime.availableProcessors();
    }
  }
).add(new StatImpl<Long>("jvm_memory_free_mb"){
    @Override public Long read(){
      return runtime.freeMemory() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_max_mb"){
    @Override public Long read(){
      return runtime.maxMemory() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_mb_total"){
    @Override public Long read(){
      return runtime.totalMemory() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Integer>("jvm_class_loaded_count"){
    @Override public Integer read(){
      return classLoadingBean.getLoadedClassCount();
    }
  }
).add(new StatImpl<Long>("jvm_class_total_loaded_count"){
    @Override public Long read(){
      return classLoadingBean.getTotalLoadedClassCount();
    }
  }
).add(new StatImpl<Long>("jvm_class_unloaded_count"){
    @Override public Long read(){
      return classLoadingBean.getUnloadedClassCount();
    }
  }
).add(new StatImpl<Long>("jvm_gc_collection_time_ms"){
    @Override public Long read(){
      long collectionTimeMs=0;
      for (      GarbageCollectorMXBean bean : ManagementFactory.getGarbageCollectorMXBeans()) {
        collectionTimeMs+=bean.getCollectionTime();
      }
      return collectionTimeMs;
    }
  }
).add(new StatImpl<Long>("jvm_gc_collection_count"){
    @Override public Long read(){
      long collections=0;
      for (      GarbageCollectorMXBean bean : ManagementFactory.getGarbageCollectorMXBeans()) {
        collections+=bean.getCollectionCount();
      }
      return collections;
    }
  }
).add(new StatImpl<Long>("jvm_memory_heap_mb_used"){
    @Override public Long read(){
      return heapUsage.getUsed() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_heap_mb_committed"){
    @Override public Long read(){
      return heapUsage.getCommitted() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_heap_mb_max"){
    @Override public Long read(){
      return heapUsage.getMax() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_non_heap_mb_used"){
    @Override public Long read(){
      return nonHeapUsage.getUsed() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_non_heap_mb_committed"){
    @Override public Long read(){
      return nonHeapUsage.getCommitted() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_memory_non_heap_mb_max"){
    @Override public Long read(){
      return nonHeapUsage.getMax() / BYTES_PER_MB;
    }
  }
).add(new StatImpl<Long>("jvm_uptime_secs"){
    @Override public Long read(){
      return runtimeMXBean.getUptime() / 1000;
    }
  }
).add(new StatImpl<Double>("system_load_avg"){
    @Override public Double read(){
      return osMbean.getSystemLoadAverage();
    }
  }
).add(new StatImpl<Integer>("jvm_threads_peak"){
    @Override public Integer read(){
      return threads.getPeakThreadCount();
    }
  }
).add(new StatImpl<Long>("jvm_threads_started"){
    @Override public Long read(){
      return threads.getTotalStartedThreadCount();
    }
  }
).add(new StatImpl<Integer>("jvm_threads_daemon"){
    @Override public Integer read(){
      return threads.getDaemonThreadCount();
    }
  }
).add(new StatImpl<Integer>("jvm_threads_active"){
    @Override public Integer read(){
      return threads.getThreadCount();
    }
  }
).build());
  Stats.exportAll(Iterables.transform(ManagementFactory.getGarbageCollectorMXBeans(),new Function<GarbageCollectorMXBean,Stat<? extends Number>>(){
    @Override public Stat<? extends Number> apply(    final GarbageCollectorMXBean gcMXBean){
      return new StatImpl<Long>("jvm_gc_" + Stats.normalizeName(gcMXBean.getName()) + "_collection_count"){
        @Override public Long read(){
          return gcMXBean.getCollectionCount();
        }
      }
;
    }
  }
));
  Stats.exportAll(Iterables.transform(ManagementFactory.getGarbageCollectorMXBeans(),new Function<GarbageCollectorMXBean,Stat<? extends Number>>(){
    @Override public Stat<? extends Number> apply(    final GarbageCollectorMXBean gcMXBean){
      return new StatImpl<Long>("jvm_gc_" + Stats.normalizeName(gcMXBean.getName()) + "_collection_time_ms"){
        @Override public Long read(){
          return gcMXBean.getCollectionTime();
        }
      }
;
    }
  }
));
  Stats.exportString(new StatImpl<String>("jvm_input_arguments"){
    @Override public String read(){
      return runtimeMXBean.getInputArguments().toString();
    }
  }
);
  for (  final String property : System.getProperties().stringPropertyNames()) {
    Stats.exportString(new StatImpl<String>("jvm_prop_" + Stats.normalizeName(property)){
      @Override public String read(){
        return System.getProperty(property);
      }
    }
);
  }
}
