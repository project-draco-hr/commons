def console_output(self, targets):
    DONE = '__done_reporting'
    pidfiles_and_ports = _get_pidfiles_and_ports()
    if (len(pidfiles_and_ports) > 0):
        (_, port) = pidfiles_and_ports[0]
        return [('Server already running at http://localhost:%d' % port)]

    def run_server(reporting_queue):

        def write_pidfile(actual_port):
            pidfile_dir = os.path.join(get_buildroot(), '.pids')
            safe_mkdir(pidfile_dir)
            pidfile = os.path.join(pidfile_dir, ('port_%d.pid' % actual_port))
            with open(pidfile, 'w') as outfile:
                outfile.write(str(os.getpid()))

        def report_launch(actual_port):
            reporting_queue.put(('Launching server with pid %d at http://localhost:%d' % (os.getpid(), actual_port)))

        def done_reporting():
            reporting_queue.put(DONE)
        try:
            if (not os.fork()):
                info_dir = self.context.config.getdefault('info_dir')
                template_dir = self.context.config.get('reporting', 'reports_template_dir')
                assets_dir = self.context.config.get('reporting', 'reports_assets_dir')
                settings = ReportingServer.Settings(info_dir=info_dir, template_dir=template_dir, assets_dir=assets_dir, root=get_buildroot(), allowed_clients=self.context.options.allowed_clients)
                server = ReportingServer(self.context.options.port, settings)
                actual_port = server.server_port()
                write_pidfile(actual_port)
                report_launch(actual_port)
                done_reporting()
                server.start()
        except socket.error:
            done_reporting()
            raise
    reporting_queue = multiprocessing.Queue()
    proc = multiprocessing.Process(target=run_server, args=[reporting_queue])
    proc.daemon = True
    proc.start()
    s = reporting_queue.get()
    ret = []
    while (s != DONE):
        ret.append(s)
        s = reporting_queue.get()
    return ret
