def parse_spec(self, error, spec):
    if spec.endswith('::'):
        self.add_target_recursive(spec[:(- len('::'))])
    elif spec.endswith(':'):
        self.add_target_directory(spec[:(- len(':'))])
    else:
        try:
            address = Address.parse(get_buildroot(), spec)
            ParseContext(address.buildfile).parse()
            target = Target.get(address)
            if target:
                self.targets.append(target)
            else:
                siblings = Target.get_all_addresses(address.buildfile)
                prompt = ('did you mean' if (len(siblings) == 1) else 'maybe you meant one of these')
                error(('%s => %s?:\n    %s' % (address, prompt, '\n    '.join((str(a) for a in siblings)))))
        except (TypeError, ImportError, TaskError, GoalError):
            error(spec, include_traceback=True)
        except (IOError, SyntaxError):
            error(spec)
