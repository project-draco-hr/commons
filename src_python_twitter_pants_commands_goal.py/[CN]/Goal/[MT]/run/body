def run(self, lock):

    def is_console_task():
        for phase in self.phases:
            for goal in phase.goals():
                if issubclass(goal.task_type, ConsoleTask):
                    return True
        return False
    update_reporting(self.options, is_console_task(), self.run_tracker)
    if self.options.dry_run:
        print '****** Dry Run ******'
    context = Context(self.config, self.options, self.run_tracker, self.targets, requested_goals=self.requested_goals, lock=lock)
    if self.options.recursive_directory:
        context.log.warn('--all-recursive is deprecated, use a target spec with the form [dir]:: instead')
        for dir in self.options.recursive_directory:
            self.add_target_recursive(dir)
    if self.options.target_directory:
        context.log.warn('--all is deprecated, use a target spec with the form [dir]: instead')
        for dir in self.options.target_directory:
            self.add_target_directory(dir)
    unknown = []
    for phase in self.phases:
        if (not phase.goals()):
            unknown.append(phase)
    if unknown:
        return _list_goals(context, ('Unknown goal(s): %s' % ' '.join((phase.name for phase in unknown))))
    ret = Phase.attempt(context, self.phases)
    if (self.options.cleanup_nailguns or self.config.get('nailgun', 'autokill', default=False)):
        if log:
            log.debug('auto-killing nailguns')
        if NailgunTask.killall:
            NailgunTask.killall(log)
    return ret
