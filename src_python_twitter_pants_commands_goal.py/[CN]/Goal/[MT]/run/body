def run(self, lock):
    log_level = Report.log_level_from_string((self.options.log_level or 'info'))
    color = (not self.options.no_color)
    timing = self.options.time
    cache_stats = self.options.time
    settings_updates_map = {'console': {'log_level': log_level, 'color': color, 'timing': timing, 'cache_stats': cache_stats, }, 'html': {'log_level': log_level, }, }
    self.run_tracker.update_report_settings(settings_updates_map)
    if self.options.dry_run:
        print '****** Dry Run ******'
    context = Context(self.config, self.options, self.run_tracker, self.targets, requested_goals=self.requested_goals, lock=lock)
    if self.options.recursive_directory:
        context.log.warn('--all-recursive is deprecated, use a target spec with the form [dir]:: instead')
        for dir in self.options.recursive_directory:
            self.add_target_recursive(dir)
    if self.options.target_directory:
        context.log.warn('--all is deprecated, use a target spec with the form [dir]: instead')
        for dir in self.options.target_directory:
            self.add_target_directory(dir)
    unknown = []
    for phase in self.phases:
        if (not phase.goals()):
            unknown.append(phase)
    if unknown:
        print ('Unknown goal(s): %s' % ' '.join((phase.name for phase in unknown)))
        print ''
        return Phase.execute(context, 'goals')
    ret = Phase.attempt(context, self.phases)
    if (self.options.cleanup_nailguns or self.config.get('nailgun', 'autokill', default=False)):
        if log:
            log.debug('auto-killing nailguns')
        if NailgunTask.killall:
            NailgunTask.killall(log)
    return ret
