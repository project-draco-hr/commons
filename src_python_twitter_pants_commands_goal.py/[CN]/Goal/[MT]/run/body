def run(self, lock):
    if self.options.log_level:
        LogOptions.set_stderr_log_level((self.options.log_level or 'info').upper())
        logdir = (self.options.logdir or self.config.get('goals', 'logdir', default=None))
        if logdir:
            safe_mkdir(logdir)
            LogOptions.set_log_dir(logdir)
            log.init('goals')
        else:
            log.init()

    def is_console_task():
        for phase in self.phases:
            for goal in phase.goals():
                if issubclass(goal.task_type, ConsoleTask):
                    return True
        return False
    is_explain = self.options.explain
    update_reporting(self.options, (is_console_task() or is_explain), self.run_tracker)
    if self.options.dry_run:
        print('****** Dry Run ******')
    context = Context(self.config, self.options, self.run_tracker, self.targets, requested_goals=self.requested_goals, lock=lock)
    if self.options.recursive_directory:
        context.log.warn('--all-recursive is deprecated, use a target spec with the form [dir]:: instead')
        for dir in self.options.recursive_directory:
            self.add_target_recursive(dir)
    if self.options.target_directory:
        context.log.warn('--all is deprecated, use a target spec with the form [dir]: instead')
        for dir in self.options.target_directory:
            self.add_target_directory(dir)
    unknown = []
    for phase in self.phases:
        if (not phase.goals()):
            unknown.append(phase)
    if unknown:
        return _list_goals(context, ('Unknown goal(s): %s' % ' '.join((phase.name for phase in unknown))))
    return Goal._execute(context, self.phases, print_timing=self.options.time, force_stats_upload=self.options.force_upload)
