def run(self, lock):
    timer = None
    if self.options.time:


        class Timer(object):

            def now(self):
                return time.time()

            def log(self, message):
                print message
        timer = Timer()
    logger = None
    if (self.options.log or self.options.log_level):
        from twitter.common.log import init
        from twitter.common.log.options import LogOptions
        LogOptions.set_stderr_log_level((self.options.log_level or 'info').upper())
        logdir = (self.options.logdir or self.config.get('goals', 'logdir', default=None))
        if logdir:
            safe_mkdir(logdir)
            LogOptions.set_log_dir(logdir)
            init('goals')
        else:
            init()
        logger = log
    if self.options.recursive_directory:
        log.warn('--all-recursive is deprecated, use a target spec with the form [dir]:: instead')
        for dir in self.options.recursive_directory:
            self.add_target_recursive(dir)
    if self.options.target_directory:
        log.warn('--all is deprecated, use a target spec with the form [dir]: instead')
        for dir in self.options.target_directory:
            self.add_target_directory(dir)
    context = Context(self.config, self.options, self.targets, lock=lock, log=logger)
    unknown = []
    for phase in self.phases:
        if (not phase.goals()):
            unknown.append(phase)
    if unknown:
        print ('Unknown goal(s): %s' % ' '.join((phase.name for phase in unknown)))
        print ''
        return Phase.execute(context, 'goals')
    if logger:
        logger.debug('Operating on targets: %s', self.targets)
    return Phase.attempt(context, self.phases, timer=timer)
