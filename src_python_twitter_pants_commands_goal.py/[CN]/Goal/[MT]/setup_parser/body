def setup_parser(self, parser, args):
    self.config = Config.load()
    Goal.add_global_options(parser)
    if (not args):
        args.append('goals')
    if ((len(args) == 1) and (args[0] in set(['-h', '--help', 'help']))):

        def format_usage(usages):
            left_colwidth = 0
            for (left, right) in usages:
                left_colwidth = max(left_colwidth, len(left))
            lines = []
            for (left, right) in usages:
                lines.append(('  %s%s%s' % (left, (' ' * ((left_colwidth - len(left)) + 1)), right)))
            return '\n'.join(lines)
        usages = [('%prog goal goals ([spec]...)', Phase('goals').description), ('%prog goal help [goal] ([spec]...)', Phase('help').description), ('%prog goal [goal] [spec]...', 'Attempt goal against one or more targets.'), ('%prog goal [goal] ([goal]...) -- [spec]...', 'Attempts all the specified goals.')]
        parser.set_usage(('\n%s' % format_usage(usages)))
        parser.epilog = 'Either lists all installed goals, provides extra help for a goal or else attempts to achieve the specified goal for the listed targets.\n                       Note that target specs accept two special forms:\n                         [dir]:  to include all targets in the specified directory\n                         [dir]:: to include all targets found in all BUILD files recursively under\n                                 the directory'
        parser.print_help()
        sys.exit(0)
    else:
        (goals, specs) = Goal.parse_args(args)
        ParseContext.enable_pantsnew()
        with self.check_errors('The following bootstrap_buildfiles cannot be loaded:') as error:
            for path in self.config.getlist('goals', 'bootstrap_buildfiles', default=[]):
                try:
                    buildfile = BuildFile(get_buildroot(), os.path.relpath(path, get_buildroot()))
                    ParseContext(buildfile).parse()
                except (TypeError, ImportError, TaskError, GoalError):
                    error(path, include_traceback=True)
                except (IOError, SyntaxError):
                    error(path)
        with self.check_errors('The following targets could not be loaded:') as error:
            for spec in specs:
                self.parse_spec(error, spec)
        self.phases = [Phase(goal) for goal in goals]
        rcfiles = self.config.getdefault('rcfiles', type=list, default=[])
        if rcfiles:
            rcfile = RcFile(rcfiles, default_prepend=False, process_default=True)
            all_goals = Phase.execution_order((Phase(goal) for goal in goals))
            sections = OrderedSet()
            for goal in all_goals:
                sections.add(goal.name)
                for clazz in goal.task_type.mro():
                    if (clazz == Task):
                        break
                    sections.add(('%s.%s' % (clazz.__module__, clazz.__name__)))
            augmented_args = rcfile.apply_defaults(sections, args)
            if (augmented_args != args):
                del args[:]
                args.extend(augmented_args)
                print ('(using pantsrc expansion: pants goal %s)' % ' '.join(augmented_args))
        Phase.setup_parser(parser, args, self.phases)
