from __future__ import print_function
import daemon
import inspect
import multiprocessing
import os
import re
import sys
import signal
import socket
import time
import traceback
from contextlib import contextmanager
from functools import wraps
from optparse import Option, OptionParser
from twitter.common import log
from twitter.common.log.options import LogOptions
from twitter.common.collections import OrderedSet
from twitter.common.dirutil import safe_mkdir, safe_rmtree
from twitter.common.lang import Compatibility
from twitter.pants.base.build_environment import get_buildroot
from twitter.pants.goal import Goal as goal, Group as group
from twitter.pants.base import Address, BuildFile, Config, ParseContext, Target, TargetDefinitionException
from twitter.pants.base.rcfile import RcFile
from twitter.pants.buildtimestats import BuildTimeStats
from twitter.pants.commands import Command
from twitter.pants.engine import Engine, GroupEngine
from twitter.pants.goal.initialize_reporting import update_reporting
from twitter.pants.base.workunit import WorkUnit
from twitter.pants.reporting.reporting_server import ReportingServer, ReportingServerManager
from twitter.pants.tasks import Task, TaskError
from twitter.pants.tasks.console_task import ConsoleTask
from twitter.pants.tasks.nailgun_task import NailgunTask
from twitter.pants.goal import Context, GoalError, Phase
from twitter.pants.tasks import Task, TaskError
from twitter.pants.tasks.targets_help import TargetsHelp
try:
    import colors
except ImportError:
    turn_off_colored_logging = True
else:
    turn_off_colored_logging = False
StringIO = Compatibility.StringIO
goal(name='goals', action=List).install().with_description('List all documented goals.')
goal(name='targets', action=TargetsHelp).install().with_description('List all target types.')
goal(name='help', action=Help).install().with_description('Provide help for the specified goal.')
from twitter.pants.targets import JavaTests as junit_tests
from twitter.pants.targets import Benchmark, JvmBinary
from twitter.pants.targets import Benchmark, JavaLibrary, JvmBinary, ScalacPlugin, ScalaLibrary, ScalaTests
from twitter.pants.tasks.antlr_gen import AntlrGen
from twitter.pants.tasks.benchmark_run import BenchmarkRun
from twitter.pants.tasks.binary_create import BinaryCreate
from twitter.pants.tasks.builddictionary import BuildBuildDictionary
from twitter.pants.tasks.bootstrap_jvm_tools import BootstrapJvmTools
from twitter.pants.tasks.build_lint import BuildLint
from twitter.pants.tasks.bundle_create import BundleCreate
from twitter.pants.tasks.checkstyle import Checkstyle
from twitter.pants.tasks.check_published_deps import CheckPublishedDeps
from twitter.pants.tasks.detect_duplicates import DuplicateDetector
from twitter.pants.tasks.extract import Extract
from twitter.pants.tasks.check_exclusives import CheckExclusives
from twitter.pants.tasks.filedeps import FileDeps
from twitter.pants.tasks.idl_extract import IdlExtract
from twitter.pants.tasks.idl_resolve import IdlResolve
from twitter.pants.tasks.ivy_resolve import IvyResolve
from twitter.pants.tasks.jar_create import JarCreate
from twitter.pants.tasks.jvm_compile.java.java_compile import JavaCompile
from twitter.pants.tasks.javadoc_gen import JavadocGen
from twitter.pants.tasks.scaladoc_gen import ScaladocGen
from twitter.pants.tasks.junit_run import JUnitRun
from twitter.pants.tasks.jvm_run import JvmRun
from twitter.pants.tasks.markdown_to_html import MarkdownToHtml
from twitter.pants.tasks.nailgun_task import NailgunTask
from twitter.pants.tasks.listtargets import ListTargets
from twitter.pants.tasks.pathdeps import PathDeps
from twitter.pants.tasks.prepare_resources import PrepareResources
from twitter.pants.tasks.protobuf_gen import ProtobufGen
from twitter.pants.tasks.jvm_compile.scala.scala_compile import ScalaCompile
from twitter.pants.tasks.scala_repl import ScalaRepl
from twitter.pants.tasks.specs_run import SpecsRun
from twitter.pants.tasks.thrift_gen import ThriftGen
from twitter.pants.tasks.scrooge_gen import ScroogeGen
try:
    import daemon

    def _async_cautious_rmtree(root):
        if os.path.exists(root):
            new_path = (root + ('.deletable.%f' % time.time()))
            os.rename(root, new_path)
            with daemon.DaemonContext():
                _cautious_rmtree(new_path)
except ImportError:
    pass
goal(name='invalidate', action=Invalidator, dependencies=['ng-killall']).install().with_description('Invalidate all targets')
goal(name='clean-all', action=Cleaner, dependencies=['invalidate']).install().with_description('Cleans all build output')
goal(name='clean-all-async', action=AsyncCleaner, dependencies=['invalidate']).install().with_description('Cleans all build output in a background process')
goal(name='ng-killall', action=NailgunKillall).install().with_description('Kill any running nailgun servers spawned by pants.')
goal(name='server', action=RunServer).install().with_description('Run the pants reporting server.')
goal(name='killserver', action=KillServer).install().with_description('Kill the pants reporting server.')
goal(name='bootstrap-jvm-tools', action=BootstrapJvmTools).install('bootstrap').with_description('Bootstrap tools needed for building')
goal(name='ivy', action=IvyResolve, dependencies=['gen', 'check-exclusives', 'bootstrap']).install('resolve').with_description('Resolves jar dependencies and produces dependency reports.')
goal(name='check-exclusives', dependencies=['gen'], action=CheckExclusives).install('check-exclusives').with_description('Check exclusives declarations to verify that dependencies are consistent.')
goal(name='extract', action=Extract).install('resolve-idl')
goal(name='idl-extract', action=IdlExtract).install('resolve-idl')
goal(name='thrift', action=ThriftGen, dependencies=['resolve-idl']).install('gen').with_description('Generate code.')
goal(name='scrooge', action=ScroogeGen, dependencies=['resolve-idl']).install('gen')
goal(name='protoc', action=ProtobufGen, dependencies=['resolve-idl']).install('gen')
goal(name='antlr', action=AntlrGen, dependencies=['resolve-idl']).install('gen')
goal(name='checkstyle', action=Checkstyle, dependencies=['gen', 'resolve']).install().with_description('Run checkstyle against java source code.')
goal(name='scala', action=ScalaCompile, group=group('jvm', _is_scala), dependencies=['gen', 'resolve', 'check-exclusives', 'bootstrap']).install('compile').with_description('Compile both generated and checked in code.')
goal(name='apt', action=AptCompile, group=group('jvm', (lambda t: t.is_apt)), dependencies=['gen', 'resolve', 'check-exclusives', 'bootstrap']).install('compile')
goal(name='java', action=JavaCompile, group=group('jvm', _is_java), dependencies=['gen', 'resolve', 'check-exclusives', 'bootstrap']).install('compile')
goal(name='prepare', action=PrepareResources).install('resources')
goal(name='javadoc', action=JavadocGen, dependencies=['compile', 'bootstrap']).install('doc').with_description('Create documentation.')
goal(name='scaladoc', action=ScaladocGen, dependencies=['compile', 'bootstrap']).install('doc')
if MarkdownToHtml.AVAILABLE:
    goal(name='markdown', action=MarkdownToHtml).install('markdown').with_description('Generate html from markdown docs.')
goal(name='javadoc_publish', action=JavadocJarShim).install('jar')
goal(name='scaladoc_publish', action=ScaladocJarShim).install('jar')
goal(name='jar', action=JarCreateGoal, dependencies=['compile', 'resources', 'bootstrap']).install('jar').with_description('Create one or more jars.')
goal(name='check_published_deps', action=CheckPublishedDeps).install('check_published_deps').with_description('Find references to outdated artifacts published from this BUILD tree.')
goal(name='junit', action=JUnitRun, dependencies=['compile', 'resources', 'bootstrap']).install('test').with_description('Test compiled code.')
goal(name='specs', action=SpecsRun, dependencies=['compile', 'resources', 'bootstrap']).install('test')
goal(name='bench', action=BenchmarkRun, dependencies=['compile', 'resources', 'bootstrap']).install('bench')
goal(name='binary', action=BinaryCreate, dependencies=['jar', 'bootstrap']).install().with_description('Create a jvm binary jar.')
goal(name='dup', action=DuplicateDetector).install('binary')
goal(name='bundle', action=BundleCreate, dependencies=['binary', 'bootstrap']).install().with_description('Create an application bundle from binary targets.')
goal(name='detect-duplicates', action=DuplicateDetector, dependencies=['jar']).install().with_description('Detect duplicate classes and resources on the classpath.')
goal(name='jvm-run', action=JvmRun, dependencies=['compile', 'resources', 'bootstrap'], serialize=False).install('run').with_description('Run a (currently JVM only) binary target.')
goal(name='jvm-run-dirty', action=JvmRun, serialize=False).install('run-dirty').with_description(('Run a (currently JVM only) binary target, using ' + 'only currently existing binaries, skipping compilation'))
goal(name='scala-repl', action=ScalaRepl, dependencies=['compile', 'resources', 'bootstrap'], serialize=False).install('repl').with_description('Run a (currently Scala only) REPL with the classpath set according to the targets.')
goal(name='scala-repl-dirty', action=ScalaRepl, serialize=False).install('repl-dirty').with_description(('Run a (currently Scala only) REPL with the classpath set according to the targets, ' + 'using the currently existing binaries, skipping compilation'))
goal(name='filedeps', action=FileDeps).install('filedeps').with_description('Print out a list of all files the target depends on')
goal(name='pathdeps', action=PathDeps).install('pathdeps').with_description('Print out a list of all paths containing build files the target depends on')
goal(name='list', action=ListTargets).install('list').with_description('List available BUILD targets.')
goal(name='buildlint', action=BuildLint, dependencies=['compile']).install()
from twitter.pants.tasks.idea_gen import IdeaGen
goal(name='idea', action=IdeaGen, dependencies=['jar', 'bootstrap']).install().with_description('Create an IntelliJ IDEA project from the given targets.')
from twitter.pants.tasks.eclipse_gen import EclipseGen
goal(name='eclipse', action=EclipseGen, dependencies=['jar', 'bootstrap']).install().with_description('Create an Eclipse project from the given targets.')
from twitter.pants.tasks.provides import Provides
goal(name='provides', action=Provides, dependencies=['jar', 'bootstrap']).install().with_description('Emit the list of symbols provided by the given targets.')
from twitter.pants.tasks.python.setup import SetupPythonEnvironment
goal(name='python-setup', action=SetupPythonEnvironment).install('setup').with_description("Setup the target's build environment.")
from twitter.pants.tasks.paths import Path, Paths
goal(name='path', action=Path).install().with_description('Find a dependency path from one target to another')
goal(name='paths', action=Paths).install().with_description('Find all dependency paths from one target to another')
from twitter.pants.tasks.dependees import ReverseDepmap
goal(name='dependees', action=ReverseDepmap).install().with_description('Print a reverse dependency mapping for the given targets')
from twitter.pants.tasks.depmap import Depmap
goal(name='depmap', action=Depmap).install().with_description('Generates either a textual dependency tree or a graphviz digraph dotfile for the dependency set of a target')
from twitter.pants.tasks.dependencies import Dependencies
goal(name='dependencies', action=Dependencies).install().with_description('Extract textual infomation about the dependencies of a target')
from twitter.pants.tasks.filemap import Filemap
goal(name='filemap', action=Filemap).install().with_description('Outputs a mapping from source file to the target that owns the source file')
from twitter.pants.tasks.minimal_cover import MinimalCover
goal(name='minimize', action=MinimalCover).install().with_description('Print the minimal cover of the given targets.')
from twitter.pants.tasks.filter import Filter
goal(name='filter', action=Filter).install().with_description('Filter the input targets based on various criteria.')
from twitter.pants.tasks.sorttargets import SortTargets
goal(name='sort', action=SortTargets).install().with_description('Topologically sort the input targets.')
from twitter.pants.tasks.roots import ListRoots
goal(name='roots', action=ListRoots).install('roots').with_description('Prints the source roots and associated target types defined in the repo.')
