def __init__(self, name, action, group=None, dependencies=None):
    self.name = name
    self.group = group
    self.dependencies = ([Phase(d) for d in dependencies] if dependencies else [])
    if ((type(action) == type) and issubclass(action, Task)):
        self._task = action
    else:
        (args, varargs, keywords, defaults) = inspect.getargspec(action)
        if (varargs or keywords or defaults):
            raise TaskError('Invalid action supplied, cannot accept varargs, keywords or defaults')
        if (len(args) > 2):
            raise TaskError('Invalid action supplied, must accept 0, 1, or 2 args')


        class FuncTask(Task):

            def __init__(self, context):
                Task.__init__(self, context)
                if (not args):
                    self.action = (lambda targets: action())
                elif (len(args) == 1):
                    self.action = (lambda targets: action(targets))
                elif (len(args) == 2):
                    self.action = (lambda targets: action(self.context, targets))
                else:
                    raise AssertionError('Unexpected fallthrough')

            def execute(self, targets):
                self.action(targets)
        self._task = FuncTask
