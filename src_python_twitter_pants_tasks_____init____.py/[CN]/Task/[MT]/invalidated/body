@contextmanager
def invalidated(self, targets, only_buildfiles=False, invalidate_dependents=False, partition_size_hint=sys.maxint):
    "Checks targets for invalidation. Subclasses call this to figure out what to work on.\n\n    targets: The targets to check for changes.\n\n    only_buildfiles: If True, then only the target's BUILD files are checked for changes, not its sources.\n\n    invalidate_dependents: If True then any targets depending on changed targets are invalidated.\n\n    partition_size_hint: Each VersionedTargetSet in the yielded list will represent targets containing roughly\n    this number of source files, if possible. Set to sys.maxint for a single VersionedTargetSet. Set to 0 for\n    one VersionedTargetSet per target. It is up to the caller to do the right thing with whatever partitioning\n    it asks for.\n\n    Yields an InvalidationCheck object reflecting the (partitioned) targets.\n\n    If no exceptions are thrown by work in the block, the build cache is updated for the targets.\n    "
    with self.invalidated_with_artifact_cache_check(targets, only_buildfiles, invalidate_dependents, partition_size_hint) as check:
        yield check[0]
