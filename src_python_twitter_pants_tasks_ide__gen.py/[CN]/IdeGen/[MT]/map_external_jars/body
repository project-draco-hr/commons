def map_external_jars(self):
    external_jar_dir = os.path.join(self.work_dir, 'external-libs')
    safe_mkdir(external_jar_dir, clean=True)
    external_source_jar_dir = os.path.join(self.work_dir, 'external-libsources')
    safe_mkdir(external_source_jar_dir, clean=True)
    external_javadoc_jar_dir = os.path.join(self.work_dir, 'external-libjavadoc')
    safe_mkdir(external_javadoc_jar_dir, clean=True)
    confs = ['default', 'sources', 'javadoc']
    for entry in self.list_jar_dependencies(self.binary, confs=confs):
        jar = entry.get('default')
        if jar:
            cp_jar = os.path.join(external_jar_dir, os.path.basename(jar))
            shutil.copy(jar, cp_jar)
            cp_source_jar = None
            source_jar = entry.get('sources')
            if source_jar:
                cp_source_jar = os.path.join(external_source_jar_dir, os.path.basename(source_jar))
                shutil.copy(source_jar, cp_source_jar)
            cp_javadoc_jar = None
            javadoc_jar = entry.get('javadoc')
            if javadoc_jar:
                cp_javadoc_jar = os.path.join(external_javadoc_jar_dir, os.path.basename(javadoc_jar))
                shutil.copy(javadoc_jar, cp_javadoc_jar)
            self._project.external_jars.add(ClasspathEntry(cp_jar, source_jar=cp_source_jar, javadoc_jar=cp_javadoc_jar))
