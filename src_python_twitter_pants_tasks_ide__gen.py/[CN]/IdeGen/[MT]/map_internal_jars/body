def map_internal_jars(self, targets):
    internal_jar_dir = os.path.join(self.work_dir, 'internal-libs')
    safe_mkdir(internal_jar_dir, clean=True)
    internal_source_jar_dir = os.path.join(self.work_dir, 'internal-libsources')
    safe_mkdir(internal_source_jar_dir, clean=True)
    internal_jars = self.context.products.get('jars')
    internal_source_jars = self.context.products.get('source_jars')
    for target in targets:
        mappings = internal_jars.get(target)
        if mappings:
            for (base, jars) in mappings.items():
                if (len(jars) != 1):
                    raise TaskError(('Unexpected mapping, multiple jars for %s: %s' % (target, jars)))
                jar = jars[0]
                cp_jar = os.path.join(internal_jar_dir, jar)
                shutil.copy(os.path.join(base, jar), cp_jar)
                cp_source_jar = None
                mappings = internal_source_jars.get(target)
                if mappings:
                    for (base, jars) in mappings.items():
                        if (len(jars) != 1):
                            raise TaskError(('Unexpected mapping, multiple source jars for %s: %s' % (target, jars)))
                        jar = jars[0]
                        cp_source_jar = os.path.join(internal_source_jar_dir, jar)
                        shutil.copy(os.path.join(base, jar), cp_source_jar)
                self._project.internal_jars.add(ClasspathEntry(cp_jar, source_jar=cp_source_jar))
