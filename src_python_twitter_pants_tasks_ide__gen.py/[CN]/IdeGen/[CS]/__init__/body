def __init__(self, context):
    JvmBinaryTask.__init__(self, context)
    self.project_name = context.options.ide_gen_project_name
    self.python = context.options.ide_gen_python
    self.skip_java = (not context.options.ide_gen_java)
    self.skip_scala = (not context.options.ide_gen_scala)
    self.java_language_level = context.options.ide_gen_java_language_level
    if context.options.ide_gen_java_jdk:
        self.java_jdk = context.options.ide_gen_java_jdk
    else:
        self.java_jdk = ('1.%d' % self.java_language_level)
    self.work_dir = os.path.abspath((context.options.ide_gen_project_dir or os.path.join(context.config.get('ide', 'workdir'), self.__class__.__name__, self.project_name)))
    self.cwd = (os.path.abspath(context.options.ide_gen_project_cwd) if context.options.ide_gen_project_cwd else self.work_dir)
    self.intransitive = context.options.ide_gen_intransitive
    checkstyle_suppression_files = context.config.getdefault('checkstyle_suppression_files', type=list, default=[])
    debug_port = context.config.getint('ide', 'debug_port')
    self.classes_conf = context.config.get('ide', 'classes_conf')
    self.sources_conf = context.config.get('ide', 'sources_conf')
    scala_compiler_profile = None
    if (not self.skip_scala):
        scala_compiler_profile = context.config.getdefault('scala_compile_profile')
    (targets, self._project) = self.configure_project(context.targets(), checkstyle_suppression_files, debug_port, scala_compiler_profile)
    self.configure_compile_context(targets)
    if self.python:
        self.context.products.require('python')
    if (not self.skip_java):
        self.context.products.require('java')
    if (not self.skip_scala):
        self.context.products.require('scala')
    self.context.products.require('jars')
    self.context.products.require('source_jars')
