def _mapped_dependencies(self, jardepmap, binary, confs):
    externaljars = OrderedDict()
    visited = set()
    for conf in confs:
        mapped = jardepmap.get((binary, conf))
        if mapped:
            for (basedir, jars) in mapped.items():
                for externaljar in jars:
                    if ((basedir, externaljar) not in visited):
                        visited.add((basedir, externaljar))
                        keys = jardepmap.keys_for(basedir, externaljar)
                        for key in keys:
                            if (isinstance(key, tuple) and (len(key) == 3)):
                                (org, name, configuration) = key
                                classpath_entry = externaljars.get((org, name))
                                if (not classpath_entry):
                                    classpath_entry = {}
                                    externaljars[(org, name)] = classpath_entry
                                classpath_entry[conf] = os.path.join(basedir, externaljar)
    return externaljars.values()
