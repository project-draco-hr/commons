def build_pex(args, options):
    pex_builder = PEXBuilder(path=safe_mkdtemp())
    pex_info = pex_builder.info
    pex_info.zip_safe = options.zip_safe
    pex_info.always_write_cache = options.always_write_cache
    pex_info.ignore_errors = options.ignore_errors
    pex_info.inherit_path = options.inherit_path
    fetchers = [Fetcher(options.repos)]
    if options.pypi:
        fetchers.append(PyPIFetcher())
    resolver = Resolver(cache=options.cache_dir, fetchers=fetchers, install_cache=options.cache_dir)
    resolveds = resolver.resolve(options.requirements)
    if resolveds:
        log('Resolved distributions:', v=options.verbosity)
    for pkg in resolveds:
        log(('  %s' % pkg), v=options.verbosity)
        pex_builder.add_distribution(pkg)
        pex_builder.add_requirement(pkg.as_requirement())
    for source_dir in options.source_dirs:
        dist = Installer(source_dir).distribution()
        if (not dist):
            die(('Failed to run installer for %s' % source_dir), CANNOT_DISTILL)
        egg_path = Distiller(dist).distill()
        if (not egg_path):
            die(('Failed to distill %s into egg' % dist), CANNOT_DISTILL)
        pex_builder.add_egg(egg_path)
    if (options.entry_point is not None):
        log(('Setting entry point to %s' % options.entry_point), v=options.verbosity)
        pex_builder.info.entry_point = options.entry_point
    else:
        log('Creating environment PEX.', v=options.verbosity)
    if (options.pex_name is not None):
        log(('Saving PEX file to %s' % options.pex_name), v=options.verbosity)
        tmp_name = (options.pex_name + '~')
        safe_delete(tmp_name)
        pex_builder.build(tmp_name)
        os.rename(tmp_name, options.pex_name)
    else:
        pex_builder.freeze()
        log(('Running PEX file at %s with args %s' % (pex_builder.path(), args)), v=options.verbosity)
        pex = PEX(pex_builder.path())
        return pex.run(args=list(args))
    return 0
