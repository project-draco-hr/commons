def build_pex(args, options):
    pex_builder = PEXBuilder(path=safe_mkdtemp())
    fetchers = [Fetcher(options.repos)]
    if options.pypi:
        fetchers.append(PyPIFetcher())
    resolver = Resolver(cache=options.cache_dir, fetchers=fetchers, install_cache=options.cache_dir)
    if options.requirements:
        print('Resolving requirements:')
        for req in options.requirements:
            print(('  - %s' % req))
    resolveds = resolver.resolve(options.requirements)
    for pkg in resolveds:
        print(('Resolved distribution: %s [%s]' % (pkg, pkg.location)))
        pex_builder.add_distribution(pkg)
        pex_builder.add_requirement(pkg.as_requirement())
    for source_dir in options.source_dirs:
        print(('Distilling %s into egg...' % source_dir), end='\r')
        dist = Installer(source_dir).distribution()
        if (not dist):
            die(('Failed to run installer for %s' % source_dir), CANNOT_DISTILL)
        egg_path = Distiller(dist).distill()
        if (not egg_path):
            die(('Failed to distill %s into egg' % dist), CANNOT_DISTILL)
        pex_builder.add_egg(egg_path)
        print(('Successfully distilled %s into %s' % (source_dir, egg_path)))
    if (options.entry_point is not None):
        print(('Setting entry point to %s' % options.entry_point))
        pex_builder.info.entry_point = options.entry_point
    else:
        print('Creating environment PEX.')
    if (options.pex_name is not None):
        print(('Saving PEX file to %s' % options.pex_name))
        tmp_name = (options.pex_name + '~')
        safe_delete(tmp_name)
        pex_builder.build(tmp_name)
        os.rename(tmp_name, options.pex_name)
    else:
        pex_builder.freeze()
        print(('Running PEX file at %s with args %s' % (pex_builder.path(), args)))
        pex = PEX(pex_builder.path())
        return pex.run(args=list(args))
    return 0
