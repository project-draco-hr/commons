def _compute_targets_by_file(self):
    targets_by_file = defaultdict(OrderedSet)
    jarlibs_by_id = defaultdict(set)
    buildroot = get_buildroot()
    for target in self._context.targets():
        if isinstance(target, JvmTarget):
            for src in target.sources:
                targets_by_file[os.path.join(buildroot, target.target_base, src)].add(target)
        elif isinstance(target, JarLibrary):
            for jardep in target.dependencies:
                if isinstance(jardep, JarDependency):
                    jarlibs_by_id[(jardep.org, jardep.name)].add(target)
    genmap = self._context.products.get('classes')
    for (tgt, products) in genmap.itermappings():
        if isinstance(tgt, JvmTarget):
            for (basedir, classes) in products.items():
                for cls in classes:
                    targets_by_file[os.path.join(basedir, cls)].add(tgt)
    with Task.symlink_map_lock:
        all_symlinks_map = self._context.products.get_data('symlink_map').copy()
    ivy_products = self._context.products.get_data('ivy_jar_products')
    if ivy_products:

        def handle_ref(ref):
            target_key = (ref.org, ref.name)
            if (target_key in jarlibs_by_id):
                jarlib_targets = jarlibs_by_id[target_key]

                def map_symlinks(jar):
                    symlinks = all_symlinks_map.get(os.path.realpath(jar.path), [])
                    for symlink in symlinks:
                        for jarlib_target in jarlib_targets:
                            targets_by_file[symlink].add(jarlib_target)
                for jar in ivyinfo.modules_by_ref[ref].artifacts:
                    map_symlinks(jar)
                for dep in ivyinfo.deps_by_caller.get(ref, []):
                    depmodule = ivyinfo.modules_by_ref.get(dep, None)
                    if depmodule:
                        for depjar in depmodule.artifacts:
                            map_symlinks(depjar)
        for ivyinfos in ivy_products.values():
            for ivyinfo in ivyinfos:
                for ref in ivyinfo.modules_by_ref:
                    handle_ref(ref)
        self._lazy_targets_by_file = targets_by_file
    return targets_by_file
