def __init__(self, root_dir, relpath, must_exist=True):
    'Creates a BuildFile object representing the BUILD file set at the specified path.\n\n    root_dir: The base directory of the project\n    relpath: The path relative to root_dir where the BUILD file is found - this can either point\n        directly at the BUILD file or else to a directory which contains BUILD files\n    must_exist: If True, the specified BUILD file must exist or else an IOError is thrown\n    raises IOError if the specified path does not house a BUILD file and must_exist is True\n    '
    path = os.path.abspath(os.path.join(root_dir, relpath))
    buildfile = (os.path.join(path, BuildFile._CANONICAL_NAME) if os.path.isdir(path) else path)
    if os.path.isdir(buildfile):
        raise IOError(('%s is a directory' % buildfile))
    if must_exist:
        if (not os.path.exists(buildfile)):
            raise IOError(('BUILD file does not exist at: %s' % buildfile))
        if (not BuildFile._is_buildfile_name(os.path.basename(buildfile))):
            raise IOError(('%s is not a BUILD file' % buildfile))
        if (not os.path.exists(buildfile)):
            raise IOError(('BUILD file does not exist at: %s' % buildfile))
    self.root_dir = root_dir
    self.full_path = buildfile
    self.name = os.path.basename(self.full_path)
    self.parent_path = os.path.dirname(self.full_path)
    self._bytecode_path = os.path.join(self.parent_path, ('.%s.pyc' % self.name))
    self.relpath = os.path.relpath(self.full_path, self.root_dir)
    self.canonical_relpath = os.path.join(os.path.dirname(self.relpath), BuildFile._CANONICAL_NAME)
