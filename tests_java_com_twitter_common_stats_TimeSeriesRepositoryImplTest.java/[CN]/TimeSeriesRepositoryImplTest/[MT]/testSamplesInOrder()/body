{
  Stat<Integer> statA=control.createMock(Stat.class);
  Stat<Integer> statB=control.createMock(Stat.class);
  Stat<Integer> statC=control.createMock(Stat.class);
  Stat<Integer> statD=control.createMock(Stat.class);
  expect(statB.getName()).andReturn("statB");
  expectLastCall().atLeastOnce();
  expect(statA.getName()).andReturn("statA");
  expectLastCall().atLeastOnce();
  expect(statC.getName()).andReturn("statC");
  expectLastCall().atLeastOnce();
  expect(statD.getName()).andReturn("statD");
  expectLastCall().atLeastOnce();
  expect(statB.getName()).andReturn("statB");
  expectLastCall().atLeastOnce();
  expect(statB.read()).andReturn(1);
  expect(statA.getName()).andReturn("statA");
  expectLastCall().atLeastOnce();
  expect(statA.read()).andReturn(2);
  expect(statC.getName()).andReturn("statC");
  expectLastCall().atLeastOnce();
  expect(statC.read()).andReturn(3);
  expect(statD.getName()).andReturn("statD");
  expectLastCall().atLeastOnce();
  expect(statD.read()).andReturn(4);
  control.replay();
  Stats.export(statB);
  Stats.export(statA);
  Stats.export(statC);
  Stats.export(statD);
  repo.runSampler(clock);
}
