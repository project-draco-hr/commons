{
  ImmutableList.Builder<Amount<Long,Data>> builder=ImmutableList.builder();
  builder.add(Amount.of(8L,Data.KB));
  builder.add(Amount.of(12L,Data.KB));
  builder.add(Amount.of(16L,Data.KB));
  builder.add(Amount.of(20L,Data.KB));
  builder.add(Amount.of(24L,Data.KB));
  builder.add(Amount.of(32L,Data.KB));
  builder.add(Amount.of(64L,Data.KB));
  builder.add(Amount.of(256L,Data.KB));
  builder.add(Amount.of(1L,Data.MB));
  builder.add(Amount.of(16L,Data.MB));
  builder.add(Amount.of(32L,Data.MB));
  List<Amount<Long,Data>> sizes=builder.build();
  long fixSize=Amount.of(4,Data.KB).as(Data.BYTES);
  for (  Amount<Long,Data> maxSize : sizes) {
    WindowedApproxHistogram hist=new WindowedApproxHistogram(Amount.of(60L,Time.SECONDS),6,maxSize);
    hist.add(1L);
    hist.getQuantile(0.5);
    long size=ObjectSizeCalculator.getObjectSize(hist);
    assertTrue(size < fixSize + maxSize.as(Data.BYTES));
  }
}
