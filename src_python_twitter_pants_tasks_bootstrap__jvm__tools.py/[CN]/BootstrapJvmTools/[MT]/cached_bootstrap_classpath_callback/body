def cached_bootstrap_classpath_callback(self, key, tools):
    cache = {}
    cache_lock = threading.Lock()

    def bootstrap_classpath(java_runner=None):
        with cache_lock:
            if ('classpath' not in cache):
                targets = list(self.resolve_tool_targets(tools))
                ivy_args = ['-sync', '-symlink', '-types', 'jar', 'bundle']
                workunit_name = ('bootstrap-%s' % str(key))
                with self.context.new_workunit(name=workunit_name, labels=[WorkUnit.BOOTSTRAP]):
                    cache['classpath'] = self.ivy_resolve(targets, java_runner=java_runner, ivy_args=ivy_args, silent=True)
            return cache['classpath']
    return bootstrap_classpath
