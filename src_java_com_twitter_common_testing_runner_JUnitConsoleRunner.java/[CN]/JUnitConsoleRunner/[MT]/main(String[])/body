{
  System.setOut(new PrintStream(SWAPPABLE_OUT));
  System.setErr(new PrintStream(SWAPPABLE_ERR));
  /** 
 * Command line option bean.
 */
class Options {
    private boolean suppressOutput=false;
    private boolean xmlReport=false;
    private File outdir=new File(System.getProperty("java.io.tmpdir"));
    private List<String> tests=Lists.newArrayList();
    @Option(name="-suppress-output",usage="Suppresses test output.") public void setSuppressOutput(    boolean suppressOutput){
      this.suppressOutput=suppressOutput;
    }
    @Option(name="-xmlreport",usage="Create ant compatible junit xml report files in -outdir.") public void setXmlReport(    boolean xmlReport){
      this.xmlReport=xmlReport;
    }
    @Option(name="-outdir",usage="Directory to output test captures too.  Only used if -suppress-output or " + "-xmlreport is set.") public void setOutdir(    File outdir){
      this.outdir=outdir;
    }
    @Argument(usage="Names of junit test classes or test methods to run.  Names prefixed " + "with @ are considered arg file paths and these will be loaded and the " + "whitespace delimited arguments found inside added to the list",required=true,metaVar="TESTS",handler=StringArrayOptionHandler.class) public void setTests(    String[] tests){
      this.tests=Arrays.asList(tests);
    }
  }
  Options options=new Options();
  CmdLineParser parser=new CmdLineParser(options);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    e.getParser().printUsage(System.out);
    exit(1);
  }
  JUnitConsoleRunner runner=new JUnitConsoleRunner(options.suppressOutput,options.xmlReport,options.outdir);
  List<String> tests=Lists.newArrayList();
  for (  String test : options.tests) {
    if (test.startsWith("@")) {
      try {
        String argFileContents=Files.toString(new File(test.substring(1)),Charsets.UTF_8);
        tests.addAll(Arrays.asList(argFileContents.split("\\s+")));
      }
 catch (      IOException e) {
        System.err.printf("Failed to load args from arg file %s: %s\n",test,e.getMessage());
        exit(1);
      }
    }
 else {
      tests.add(test);
    }
  }
  runner.run(tests);
}
