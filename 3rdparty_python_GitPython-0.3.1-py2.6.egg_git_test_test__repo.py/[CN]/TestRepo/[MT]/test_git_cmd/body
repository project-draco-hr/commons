def test_git_cmd(self):
    l1 = '0123456789\n'
    l2 = 'abcdefghijklmnopqrstxy\n'
    l3 = 'z\n'
    d = ('%s%s%s\n' % (l1, l2, l3))
    l1p = l1[:5]

    def mkfull():
        return Git.CatFileContentStream((len(d) - 1), StringIO(d))
    ts = 5

    def mktiny():
        return Git.CatFileContentStream(ts, StringIO(d))
    s = mkfull()
    lines = s.readlines()
    assert ((len(lines) == 3) and lines[(-1)].endswith('\n'))
    assert (s._stream.tell() == len(d))
    s = mkfull()
    lines = s.readlines(5)
    assert (len(lines) == 1)
    s = mktiny()
    lines = s.readlines()
    assert ((len(lines) == 1) and (lines[0] == l1p))
    assert (s._stream.tell() == (ts + 1))
    s = mkfull()
    assert (s.readline() == l1)
    assert (s.readline() == l2)
    assert (s.readline() == l3)
    assert (s.readline() == '')
    assert (s._stream.tell() == len(d))
    s = mkfull()
    assert (s.readline(5) == l1p)
    assert (s.readline() == l1[5:])
    s = mktiny()
    assert (s.readline() == l1p)
    assert (s.readline() == '')
    assert (s._stream.tell() == (ts + 1))
    s = mkfull()
    assert (s.read() == d[:(-1)])
    assert (s.read() == '')
    assert (s._stream.tell() == len(d))
    s = mkfull()
    assert (s.read(5) == l1p)
    assert (s.read(6) == l1[5:])
    assert (s._stream.tell() == (5 + 6))
    s = mktiny()
    assert (s.read(2) == l1[:2])
    assert (s._stream.tell() == 2)
    assert (s.read() == l1[2:ts])
    assert (s._stream.tell() == (ts + 1))
