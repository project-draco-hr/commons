def test_rev_parse(self):
    rev_parse = self.rorepo.rev_parse
    assert (rev_parse('33ebe').hexsha == '33ebe7acec14b25c5f84f35a664803fcab2f7781')
    num_resolved = 0
    for ref in Reference.iter_items(self.rorepo):
        path_tokens = ref.path.split('/')
        for pt in range(len(path_tokens)):
            path_section = '/'.join(path_tokens[(- (pt + 1)):])
            try:
                obj = self._assert_rev_parse(path_section)
                assert (obj.type == ref.object.type)
                num_resolved += 1
            except BadObject:
                print ('failed on %s' % path_section)
                pass
    assert num_resolved
    tag = self._assert_rev_parse('0.1.4')
    assert (tag.type == 'tag')
    assert (tag.object == rev_parse(tag.object.hexsha))
    self._assert_rev_parse_types(tag.object.hexsha, tag.object)
    rev = '0.1.4^{tree}^{tree}'
    assert (rev_parse(rev) == tag.object.tree)
    assert (rev_parse((rev + ':CHANGES')) == tag.object.tree['CHANGES'])
    first_rev = '33ebe7acec14b25c5f84f35a664803fcab2f7781'
    commit = rev_parse(first_rev)
    assert (len(commit.parents) == 0)
    assert (commit.hexsha == first_rev)
    self.failUnlessRaises(BadObject, rev_parse, (first_rev + '~'))
    self.failUnlessRaises(BadObject, rev_parse, (first_rev + '^'))
    commit2 = rev_parse(first_rev[:20])
    assert (commit2 == commit)
    commit2 = rev_parse(first_rev[:5])
    assert (commit2 == commit)
    tag = rev_parse('0.1.4')
    for token in ('~0', '^0', '^{}'):
        assert (tag.object == rev_parse(('0.1.4%s' % token)))
    max_items = 40
    for (i, binsha) in enumerate(self.rorepo.odb.sha_iter()):
        assert (rev_parse(bin_to_hex(binsha)[:(8 - (i % 2))]).binsha == binsha)
        if (i > max_items):
            break
    self.failUnlessRaises(ValueError, rev_parse, '0.1.4^{tree')
    self.failUnlessRaises(ValueError, rev_parse, '0.1.4^tree}')
    head = self.rorepo.head
    self.failUnlessRaises(BadObject, rev_parse, ('%s@{0}' % head.commit.hexsha))
    assert (rev_parse('@{0}') == head.commit)
    if (not head.is_detached):
        refspec = ('%s@{0}' % head.ref.name)
        assert (rev_parse(refspec) == head.ref.commit)
        assert (rev_parse((refspec + '^{tree}')) == head.commit.tree)
        assert (rev_parse((refspec + ':CHANGES')).type == 'blob')
    assert (rev_parse('@{1}') != head.commit)
    self.failUnlessRaises(IndexError, rev_parse, '@{10000}')
    self.failUnlessRaises(NotImplementedError, rev_parse, '@{1 week ago}')
