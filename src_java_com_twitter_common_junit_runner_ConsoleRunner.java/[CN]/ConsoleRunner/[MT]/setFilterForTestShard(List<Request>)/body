{
class TestFilter extends Filter {
    private int testIdx;
    private HashMap<String,Boolean> testToRunStatus=new HashMap<String,Boolean>();
    @Override public boolean shouldRun(    Description desc){
      if (desc.isSuite()) {
        return true;
      }
      String descString=desc.getDisplayName();
synchronized (this) {
        Boolean shouldRun=testToRunStatus.get(descString);
        if (shouldRun != null) {
          return shouldRun;
        }
 else {
          shouldRun=testIdx % numTestShards == testShard;
          testIdx++;
          testToRunStatus.put(descString,shouldRun);
          return shouldRun;
        }
      }
    }
    @Override public String describe(){
      return "Filters a static subset of test methods";
    }
  }
class AlphabeticComparator implements Comparator<Description> {
    @Override public int compare(    Description o1,    Description o2){
      return o1.getDisplayName().compareTo(o2.getDisplayName());
    }
  }
  TestFilter testFilter=new TestFilter();
  AlphabeticComparator alphaComp=new AlphabeticComparator();
  ArrayList<Request> filteredRequests=new ArrayList<Request>(requests.size());
  for (  Request request : requests) {
    filteredRequests.add(request.sortWith(alphaComp).filterWith(testFilter));
  }
  for (  Request request : filteredRequests) {
    request.getRunner().getDescription();
  }
  return filteredRequests;
}
