{
  /** 
 * Command line option bean.
 */
class Options {
    private boolean failFast=false;
    private boolean suppressOutput=false;
    private boolean xmlReport=false;
    private boolean perTestTimer=false;
    private boolean defaultParallel=false;
    private int parallelThreads=0;
    private int testShard=0;
    private int numTestShards=0;
    private File outdir=new File(System.getProperty("java.io.tmpdir"));
    private List<String> tests=Lists.newArrayList();
    private CmdLineParser parser;
    void setParser(    CmdLineParser parser){
      this.parser=parser;
    }
    @Option(name="-fail-fast",usage="Causes the test suite run to fail fast.") public void setFailFast(    boolean failFast){
      this.failFast=failFast;
    }
    @Option(name="-suppress-output",usage="Suppresses test output.") public void setSuppressOutput(    boolean suppressOutput){
      this.suppressOutput=suppressOutput;
    }
    @Option(name="-xmlreport",usage="Create ant compatible junit xml report files in -outdir.") public void setXmlReport(    boolean xmlReport){
      this.xmlReport=xmlReport;
    }
    @Option(name="-outdir",usage="Directory to output test captures too.  Only used if -suppress-output or " + "-xmlreport is set.") public void setOutdir(    File outdir){
      this.outdir=outdir;
    }
    @Option(name="-per-test-timer",usage="Show progress and timer for each test class.") public void setPerTestTimer(    boolean perTestTimer){
      this.perTestTimer=perTestTimer;
    }
    @Option(name="-default-parallel",usage="Whether to run test classes without @TestParallel or @TestSerial in parallel.") public void setDefaultParallel(    boolean defaultParallel){
      this.defaultParallel=defaultParallel;
    }
    @Option(name="-parallel-threads",usage="Number of threads to execute tests in parallel. Must be positive, " + "or 0 to set automatically.") public void setParallelThreads(    int parallelThreads) throws CmdLineException {
      if (parallelThreads < 0) {
        throw new CmdLineException(parser,"-parallelThreads cannot be negative");
      }
      this.parallelThreads=parallelThreads;
      if (parallelThreads == 0) {
        this.parallelThreads=Runtime.getRuntime().availableProcessors();
      }
    }
    @Option(name="-test-shard",usage="Subset of tests to run, in the form M/N, 0 <= M < N. For example, 1/3 means " + "run tests number 2, 5, 8, 11, ...") public void setTestShard(    String shard) throws CmdLineException {
      String errorMsg="-test-shard should be in the form M/N";
      int slashIdx=shard.indexOf('/');
      if (slashIdx < 0) {
        throw new CmdLineException(parser,errorMsg);
      }
      try {
        this.testShard=Integer.parseInt(shard.substring(0,slashIdx));
        this.numTestShards=Integer.parseInt(shard.substring(slashIdx + 1));
      }
 catch (      NumberFormatException ex) {
        throw new CmdLineException(parser,errorMsg);
      }
      if (testShard < 0 || numTestShards <= 0 || testShard >= numTestShards) {
        throw new CmdLineException(parser,"0 <= M < N is required in -test-shard M/N");
      }
    }
    @Argument(usage="Names of junit test classes or test methods to run.  Names prefixed " + "with @ are considered arg file paths and these will be loaded and the " + "whitespace delimited arguments found inside added to the list",required=true,metaVar="TESTS",handler=StringArrayOptionHandler.class) public void setTests(    String[] tests){
      this.tests=Arrays.asList(tests);
    }
  }
  Options options=new Options();
  CmdLineParser parser=new CmdLineParser(options);
  options.setParser(parser);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    e.getParser().printUsage(System.out);
    exit(1);
  }
  ConsoleRunner runner=new ConsoleRunner(options.failFast,options.suppressOutput,options.xmlReport,options.perTestTimer,options.outdir,options.defaultParallel,options.parallelThreads,options.testShard,options.numTestShards);
  List<String> tests=Lists.newArrayList();
  for (  String test : options.tests) {
    if (test.startsWith("@")) {
      try {
        String argFileContents=Files.toString(new File(test.substring(1)),Charsets.UTF_8);
        tests.addAll(Arrays.asList(argFileContents.split("\\s+")));
      }
 catch (      IOException e) {
        System.err.printf("Failed to load args from arg file %s: %s\n",test,e.getMessage());
        exit(1);
      }
    }
 else {
      tests.add(test);
    }
  }
  runner.run(tests);
}
