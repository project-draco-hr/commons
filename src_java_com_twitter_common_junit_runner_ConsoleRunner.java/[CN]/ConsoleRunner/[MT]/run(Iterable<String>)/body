{
  final PrintStream out=System.out;
  System.setOut(new PrintStream(SWAPPABLE_OUT));
  System.setErr(new PrintStream(SWAPPABLE_ERR));
  List<Request> requests=parseRequests(out,tests);
  JUnitCore core=new JUnitCore();
  final AbortableListener abortableListener=new AbortableListener(failFast){
    @Override protected void abort(    Result failureResult){
      exit(failureResult.getFailureCount());
    }
  }
;
  core.addListener(abortableListener);
  if (xmlReport || suppressOutput) {
    if (!outdir.exists()) {
      if (!outdir.mkdirs()) {
        throw new IllegalStateException("Failed to create output directory: " + outdir);
      }
    }
    StreamCapturingListener streamCapturingListener=new StreamCapturingListener(outdir);
    abortableListener.addListener(streamCapturingListener);
    if (xmlReport) {
      AntJunitXmlReportListener xmlReportListener=new AntJunitXmlReportListener(outdir,streamCapturingListener);
      abortableListener.addListener(xmlReportListener);
    }
  }
  if (perTestTimer) {
    abortableListener.addListener(new PerClassConsoleListener(out));
  }
 else {
    abortableListener.addListener(new ConsoleListener(out));
  }
  Thread abnormalExitHook=new Thread(){
    @Override public void run(){
      try {
        abortableListener.abort(new UnknownError("Abnormal VM exit - test crashed."));
      }
 catch (      Exception e) {
        out.println(e);
        e.printStackTrace(out);
      }
    }
  }
;
  abnormalExitHook.setDaemon(true);
  Runtime.getRuntime().addShutdownHook(abnormalExitHook);
  int failures=0;
  try {
    if (this.parallelThreads > 1) {
      ConcurrentCompositeRequest request=new ConcurrentCompositeRequest(requests,this.defaultParallel,this.parallelThreads);
      failures=core.run(request).getFailureCount();
    }
 else {
      for (      Request request : requests) {
        Result result=core.run(request);
        failures+=result.getFailureCount();
      }
    }
  }
 catch (  InitializationError initializationError) {
    failures=1;
  }
  Runtime.getRuntime().removeShutdownHook(abnormalExitHook);
  exit(failures);
}
