@classmethod
def unpack_json(cls, blob):
    blob = json.loads(blob)
    for key in ('status', 'serviceEndpoint', 'additionalEndpoints'):
        if (key not in blob):
            raise ValueError(('Expected to find %s in ServiceInstance JSON!' % key))
    additional_endpoints = dict(((name, Endpoint(value['host'], value['port'])) for (name, value) in blob['additionalEndpoints'].items()))
    shard = blob.get('shard')
    if (shard is not None):
        try:
            shard = int(shard)
        except ValueError:
            log.warn(('Failed to deserialize shard from value %r' % shard))
            shard = None
    return cls(service_endpoint=Endpoint(blob['serviceEndpoint']['host'], blob['serviceEndpoint']['port']), additional_endpoints=additional_endpoints, status=Status.from_string(blob['status']), shard=shard)
