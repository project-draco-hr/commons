@classmethod
def resolve_all(cls, targets, *expected_types):
    'Yield the resolved concrete targets checking each is a subclass of one of the expected types\n    if specified.\n    '
    if targets:
        for target in maybe_list(targets, expected_type=Target):
            concrete_targets = [t for t in target.resolve() if t.is_concrete]
            for resolved in concrete_targets:
                if (expected_types and (not isinstance(resolved, expected_types))):
                    raise TypeError(('%s requires types: %s and found %s' % (cls, expected_types, resolved)))
                yield resolved
