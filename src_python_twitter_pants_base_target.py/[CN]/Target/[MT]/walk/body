def walk(self, work, predicate=None):
    "Walk of this target's dependency graph visiting each node exactly once.\n\n    If a predicate is supplied it will be used to test each target before handing the target to\n    work and descending. Work can return targets in which case these will be added to the walk\n    candidate set if not already walked.\n\n    :param work: Callable that takes a :py:class:`twitter.pants.base.target.Target`\n      as its single argument.\n    :param predicate: Callable that takes a :py:class:`twitter.pants.base.target.Target`\n      as its single argument and returns True if the target should passed to ``work``.\n    "
    if (not callable(work)):
        raise ValueError(('work must be callable but was %s' % work))
    if (predicate and (not callable(predicate))):
        raise ValueError(('predicate must be callable but was %s' % predicate))
    self._walk(set(), work, predicate)
