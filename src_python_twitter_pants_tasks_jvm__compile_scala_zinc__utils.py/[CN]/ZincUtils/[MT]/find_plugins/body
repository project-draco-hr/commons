def find_plugins(self, plugin_names):
    'Returns a map from plugin name to plugin jar.'
    plugin_names = set(plugin_names)
    plugins = {}
    buildroot = get_buildroot()
    for jar in self.plugin_jars():
        with open_jar(jar, 'r') as jarfile:
            try:
                with closing(jarfile.open(_PLUGIN_INFO_FILE, 'r')) as plugin_info_file:
                    plugin_info = ElementTree.parse(plugin_info_file).getroot()
                if (plugin_info.tag != 'plugin'):
                    raise TaskError(('File %s in %s is not a valid scalac plugin descriptor' % (_PLUGIN_INFO_FILE, jar)))
                name = plugin_info.find('name').text
                if (name in plugin_names):
                    if (name in plugins):
                        raise TaskError(('Plugin %s defined in %s and in %s' % (name, plugins[name], jar)))
                    plugins[name] = os.path.relpath(jar, buildroot)
            except KeyError:
                pass
    unresolved_plugins = (plugin_names - set(plugins.keys()))
    if unresolved_plugins:
        raise TaskError(('Could not find requested plugins: %s' % list(unresolved_plugins)))
    return plugins
