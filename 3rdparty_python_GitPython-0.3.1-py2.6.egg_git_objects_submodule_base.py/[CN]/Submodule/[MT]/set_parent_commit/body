def set_parent_commit(self, commit, check=True):
    "Set this instance to use the given commit whose tree is supposed to \n\t\tcontain the .gitmodules blob.\n\t\t\n\t\t:param commit: Commit'ish reference pointing at the root_tree\n\t\t:param check: if True, relatively expensive checks will be performed to verify\n\t\t\tvalidity of the submodule.\n\t\t:raise ValueError: if the commit's tree didn't contain the .gitmodules blob.\n\t\t:raise ValueError: if the parent commit didn't store this submodule under the\n\t\t\tcurrent path\n\t\t:return: self"
    pcommit = self.repo.commit(commit)
    pctree = pcommit.tree
    if (self.k_modules_file not in pctree):
        raise ValueError(('Tree of commit %s did not contain the %s file' % (commit, self.k_modules_file)))
    prev_pc = self._parent_commit
    self._parent_commit = pcommit
    if check:
        parser = self._config_parser(self.repo, self._parent_commit, read_only=True)
        if (not parser.has_section(sm_section(self.name))):
            self._parent_commit = prev_pc
            raise ValueError(('Submodule at path %r did not exist in parent commit %s' % (self.path, commit)))
    self.binsha = pctree[self.path].binsha
    self._clear_cache()
    return self
