{
  int n=10000;
  FakeClock clock=new FakeClock();
  Amount<Long,Time> window=Amount.of(1L,Time.MINUTES);
  int slices=2;
  Amount<Long,Data> maxMemory=Amount.of(32L,Data.KB);
  double error=ApproximateHistogram.DEFAULT_PRECISION.getEpsilon() * n * slices;
  Histogram hist=new Histogram(name,new WindowedApproxHistogram(window,slices,maxMemory,clock),Histogram.DEFAULT_QUANTILES,metrics);
  for (int i=1; i <= n; ++i) {
    hist.add(i);
  }
  clock.advance(Amount.of(31L,Time.SECONDS));
  Map<String,Number> sample=metrics.sample();
  assertEquals(1L,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "min"));
  assertEquals((long)n,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "max"));
  assertEquals((long)n,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "count"));
  assertEquals((long)(n * (n + 1) / 2),sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "sum"));
  assertEquals((long)n / 2,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "avg"));
  long[] expected=new long[Histogram.DEFAULT_QUANTILES.length];
  for (int i=0; i < Histogram.DEFAULT_QUANTILES.length; i++) {
    expected[i]=(long)(Histogram.DEFAULT_QUANTILES[i] * n);
  }
  checkQuantiles(expected,sample,error);
}
