{
  FakeTicker ticker=new FakeTicker();
  Histogram hist=new Histogram(name,new WindowedApproxHistogram(WindowedApproxHistogram.DEFAULT_WINDOW,WindowedApproxHistogram.DEFAULT_SLICES,WindowedApproxHistogram.DEFAULT_MAX_MEMORY,ticker),Histogram.DEFAULT_QUANTILES,metrics);
  int[] data=new int[200];
  for (int i=0; i < data.length; ++i) {
    data[i]=-100 + i;
  }
  for (  int x : data) {
    hist.add(x);
  }
  Map<String,Number> sample=metrics.sample();
  assertEquals(-100L,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "min"));
  assertEquals(99L,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "max"));
  assertEquals(200L,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "count"));
  assertEquals(-100L,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "sum"));
  assertEquals(0L,sample.get(name + ScopedMetrics.SCOPE_DELIMITER + "avg"));
  long[] expected=new long[Histogram.DEFAULT_QUANTILES.length];
  for (int i=0; i < Histogram.DEFAULT_QUANTILES.length; i++) {
    int idx=(int)(Histogram.DEFAULT_QUANTILES[i] * data.length);
    expected[i]=data[idx];
  }
  checkQuantiles(expected,sample,ERROR);
}
