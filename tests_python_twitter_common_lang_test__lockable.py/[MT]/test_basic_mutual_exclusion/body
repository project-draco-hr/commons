def test_basic_mutual_exclusion():


    class Foo(Lockable):

        def __init__(self):
            self.counter = 0
            self.start_event = threading.Event()
            self.finish_event = threading.Event()
            Lockable.__init__(self)

        @Lockable.sync
        def pooping(self):
            self.counter += 1
            self.start_event.set()
            self.finish_event.wait()
    f = Foo()


    class FooSetter(threading.Thread):

        def run(self):
            f.pooping()
    fs1 = FooSetter()
    fs2 = FooSetter()
    fs1.start()
    fs2.start()
    f.start_event.wait(timeout=1.0)
    assert f.start_event.is_set()
    assert (f.counter == 1)
    f.start_event.clear()
    f.finish_event.set()
    f.start_event.wait(timeout=1.0)
    assert f.start_event.is_set()
    assert (f.counter == 2)
