def execute(self, targets):
    self.check_clean_master()
    exported_targets = self.exported_targets()
    self.check_targets(exported_targets)
    pushdbs = {}

    def get_db(target):
        if (target.provides is None):
            raise TaskError(('trying to publish target %r which does not provide an artifact' % target))
        dbfile = target.provides.repo.push_db
        result = pushdbs.get(dbfile)
        if (not result):
            db = PushDb.load(dbfile)
            repo = self.repos[target.provides.repo.name]
            result = (db, dbfile, repo)
            pushdbs[dbfile] = result
        return result

    def fingerprint_internal(target):
        if (not target.is_internal):
            raise ValueError(('Expected an internal target for fingerprinting, got %s' % target))
        (pushdb, _, _) = get_db(target)
        (_, _, _, fingerprint) = pushdb.as_jar_with_version(target)
        return (fingerprint or '0.0.0')

    def lookup_synthetic_target(target):
        revmap = self.context.products.get('java:rev')
        if revmap.get(target):
            for (_, codegen_targets) in revmap.get(target).items():
                for codegen_target in codegen_targets:
                    if isinstance(codegen_target, JavaThriftLibrary):
                        return codegen_target

    def stage_artifacts(target, jar, version, changelog, confs=None, synth_target=None):

        def artifact_path(name=None, suffix='', extension='jar', artifact_ext=''):
            return os.path.join(self.outdir, jar.org, (jar.name + artifact_ext), ('%s%s-%s%s.%s' % ((name or jar.name), (artifact_ext if (name != 'ivy') else ''), version, suffix, extension)))

        def get_pushdb(target):
            return get_db(target)[0]
        with safe_open(artifact_path(suffix='-CHANGELOG', extension='txt'), 'w') as changelog_file:
            changelog_file.write(changelog)
        ivyxml = artifact_path(name='ivy', extension='xml')
        IvyWriter(get_pushdb).write(target, ivyxml, confs)
        PomWriter(get_pushdb).write(target, artifact_path(extension='pom'))
        idl_ivyxml = None
        if synth_target:
            changelog_path = artifact_path(suffix='-CHANGELOG', extension='txt', artifact_ext='-only')
            with safe_open(changelog_path, 'w') as changelog_file:
                changelog_file.write(changelog)
            idl_ivyxml = artifact_path(name='ivy', extension='xml', artifact_ext='-only')
            IvyWriter(get_pushdb).write(synth_target, idl_ivyxml, ['idl'], synth=True)
            PomWriter(get_pushdb).write(synth_target, artifact_path(extension='pom', artifact_ext='-only'), synth=True)

        def copy(tgt, typename, suffix='', artifact_ext=''):
            genmap = self.context.products.get(typename)
            mapping = genmap.get(tgt)
            if (not mapping):
                print(('no mapping for %s' % tgt))
            else:
                for (basedir, jars) in mapping.items():
                    for artifact in jars:
                        path = artifact_path(suffix=suffix, artifact_ext=artifact_ext)
                        shutil.copy(os.path.join(basedir, artifact), path)
        copy(target, typename='jars')
        copy(target, typename='source_jars', suffix='-sources')
        if synth_target:
            copy(synth_target, typename='idl_jars', suffix='-idl', artifact_ext='-only')
        if target.is_java:
            copy(target, typename='javadoc_jars', suffix='-javadoc')
        return (ivyxml, idl_ivyxml)
    if self.overrides:
        print(('Publishing with revision overrides:\n  %s' % '\n  '.join((('%s=%s' % (coordinate(org, name), rev)) for ((org, name), rev) in self.overrides.items()))))
    head_sha = self.scm.commit_id
    safe_rmtree(self.outdir)
    published = []
    skip = (self.restart_at is not None)
    for target in exported_targets:
        synth_target = lookup_synthetic_target(target)
        (pushdb, dbfile, repo) = get_db(target)
        (jar, semver, sha, fingerprint) = pushdb.as_jar_with_version(target)
        if synth_target:
            tmp_jar = copy.copy(jar)
            tmp_jar.name = (tmp_jar.name + '-only')
            published.append(tmp_jar)
        published.append(jar)
        if (skip and ((jar.org, jar.name) == self.restart_at)):
            skip = False
        newver = (self.overrides.get((jar.org, jar.name)) or semver.bump())
        if self.snapshot:
            newver = newver.make_snapshot()
        if (newver <= semver):
            raise TaskError(('Requested version %s must be greater than the current version %s' % (newver.version(), semver.version())))
        newfingerprint = self.fingerprint(target, fingerprint_internal)
        no_changes = (newfingerprint == fingerprint)
        if no_changes:
            changelog = ('No changes for %s - forced push.\n' % jar_coordinate(jar, semver.version()))
        else:
            changelog = (self.changelog(target, sha) or 'Direct dependencies changed.\n')
        if (no_changes and (not self.force)):
            print(('No changes for %s' % jar_coordinate(jar, semver.version())))
            stage_artifacts(target, jar, (newver if self.force else semver).version(), changelog, synth_target=synth_target)
        elif skip:
            print(('Skipping %s to resume at %s' % (jar_coordinate(jar, (newver if self.force else semver).version()), coordinate(self.restart_at[0], self.restart_at[1]))))
            stage_artifacts(target, jar, semver.version(), changelog, synth_target=synth_target)
        else:
            if (not self.dryrun):
                if no_changes:
                    print(changelog)
                else:
                    print(('\nChanges for %s since %s @ %s:\n\n%s' % (coordinate(jar.org, jar.name), semver.version(), sha, changelog)))
                push = raw_input(('Publish %s with revision %s ? [y|N] ' % (coordinate(jar.org, jar.name), newver.version())))
                print('\n')
                if (push.strip().lower() != 'y'):
                    raise TaskError('User aborted push')
            pushdb.set_version(target, newver, head_sha, newfingerprint)
            (ivyxml, idl_ivyxml) = stage_artifacts(target, jar, newver.version(), changelog, confs=repo['confs'], synth_target=synth_target)
            if self.dryrun:
                print(('Skipping publish of %s in test mode.' % jar_coordinate(jar, newver.version())))
            else:
                resolver = repo['resolver']
                path = repo.get('path')
                jvmargs = []
                auth = repo['auth']
                if auth:
                    (user, password) = auth
                    jvmargs.append(('-Dlogin=%s' % user))
                    jvmargs.append(('-Dpassword=%s' % password))
                ivysettings = self.generate_ivysettings(published, publish_local=path)
                opts = ['-settings', ivysettings, '-ivy', ivyxml, '-deliverto', ('%s/[organisation]/[module]/ivy-[revision].xml' % self.outdir), '-publish', resolver, '-publishpattern', ('%s/[organisation]/[module]/[artifact]-[revision](-[classifier]).[ext]' % self.outdir), '-revision', newver.version(), '-m2compatible']
                if self.snapshot:
                    opts.append('-overwrite')
                result = binary_util.runjava_indivisible(jvmargs=jvmargs, classpath=self.ivycp, opts=opts, workunit_name='ivy')
                if (result != 0):
                    raise TaskError(('Failed to push %s - ivy failed with %d' % (jar_coordinate(jar, newver.version()), result)))
                if synth_target:
                    opts = ['-settings', ivysettings, '-ivy', idl_ivyxml, '-deliverto', ('%s/[organisation]/[module]/ivy-[revision].xml' % self.outdir), '-publish', resolver, '-publishpattern', ('%s/[organisation]/[module]/[artifact]-[revision](-[classifier]).[ext]' % self.outdir), '-revision', newver.version(), '-m2compatible']
                    if self.snapshot:
                        opts.append('-overwrite')
                    result = binary_util.runjava_indivisible(jvmargs=jvmargs, classpath=self.ivycp, opts=opts, workunit_name='ivy')
                    if (result != 0):
                        raise TaskError(('Failed to push %s - ivy failed with %d' % (jar_coordinate(jar, newver.version()), result)))
                if self.commit:
                    pushdb.dump(dbfile)
                    self.commit_push(jar.org, jar.name, newver.version(), head_sha)
