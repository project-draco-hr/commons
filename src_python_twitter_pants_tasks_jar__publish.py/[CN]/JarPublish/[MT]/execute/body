def execute(self, targets):
    self.check_clean_master(commit=((not self.dryrun) and self.commit))
    exported_targets = self.exported_targets()
    self.check_targets(exported_targets)
    pushdbs = {}

    def get_db(tgt):
        if (tgt.provides is None):
            raise TaskError(('trying to publish target %r which does not provide an artifact' % tgt))
        dbfile = tgt.provides.repo.push_db
        result = pushdbs.get(dbfile)
        if (not result):
            db = PushDb.load(dbfile)
            repo = self.repos[tgt.provides.repo.name]
            result = (db, dbfile, repo)
            pushdbs[dbfile] = result
        return result

    def get_pushdb(tgt):
        return get_db(tgt)[0]

    def fingerprint_internal(tgt):
        if (not tgt.is_internal):
            raise ValueError(('Expected an internal target for fingerprinting, got %s' % tgt))
        (pushdb, _, _) = get_db(tgt)
        (_, _, _, fingerprint) = pushdb.as_jar_with_version(tgt)
        return (fingerprint or '0.0.0')

    def lookup_synthetic_target(tgt):
        return (tgt.derived_from if isinstance(tgt.derived_from, JavaThriftLibrary) else None)

    def artifact_path(jar, version, name=None, suffix='', extension='jar', artifact_ext=''):
        return os.path.join(self.outdir, jar.org, (jar.name + artifact_ext), ('%s%s-%s%s.%s' % ((name or jar.name), (artifact_ext if (name != 'ivy') else ''), version, suffix, extension)))

    def stage_artifact(tgt, jar, version, changelog, confs=None, artifact_ext='', synth=False):

        def path(name=None, suffix='', extension='jar'):
            return artifact_path(jar, version, name=name, suffix=suffix, extension=extension, artifact_ext=artifact_ext)
        with safe_open(path(suffix='-CHANGELOG', extension='txt'), 'w') as changelog_file:
            changelog_file.write(changelog)
        ivyxml = path(name='ivy', extension='xml')
        IvyWriter(get_pushdb).write(tgt, ivyxml, confs=confs, synth=synth)
        PomWriter(get_pushdb).write(tgt, path(extension='pom'), synth=synth)
        return ivyxml

    def copy_artifact(tgt, version, typename, suffix='', artifact_ext=''):
        genmap = self.context.products.get(typename)
        for (basedir, jars) in genmap.get(tgt).items():
            for artifact in jars:
                path = artifact_path(jar, version, suffix=suffix, artifact_ext=artifact_ext)
                shutil.copy(os.path.join(basedir, artifact), path)

    def stage_artifacts(tgt, jar, version, changelog, confs=None, synth_target=None):
        is_idl = isinstance(tgt, ThriftLibrary)
        class_target = (None if is_idl else tgt)
        idl_target = (synth_target or (tgt if is_idl else None))
        class_ivyxml_path = idl_ivyxml_path = None
        if class_target:
            class_ivyxml_path = stage_artifact(tgt, jar, version, changelog, confs)
            copy_artifact(tgt, version, typename='jars')
            copy_artifact(tgt, version, typename='source_jars', suffix='-sources')
            jarmap = self.context.products.get('javadoc_jars')
            if ((not jarmap.empty()) and (tgt.is_java or tgt.is_scala)):
                copy_artifact(tgt, version, typename='javadoc_jars', suffix='-javadoc')
        if idl_target:
            synth = bool(synth_target)
            artifact_ext = ('-only' if synth else '')
            idl_ivyxml_path = stage_artifact(idl_target, jar, version, changelog, confs=['idl'], artifact_ext=artifact_ext, synth=synth)
            copy_artifact(idl_target, version, typename='idl_jars', suffix='-idl', artifact_ext=artifact_ext)
        return (class_ivyxml_path, idl_ivyxml_path)
    if self.overrides:
        print(('Publishing with revision overrides:\n  %s' % '\n  '.join((('%s=%s' % (coordinate(org, name), rev)) for ((org, name), rev) in self.overrides.items()))))
    head_sha = self.scm.commit_id
    safe_rmtree(self.outdir)
    published = []
    skip = (self.restart_at is not None)
    for target in exported_targets:
        synth_target = lookup_synthetic_target(target)
        (pushdb, dbfile, repo) = get_db(target)
        (jar, semver, sha, fingerprint) = pushdb.as_jar_with_version(target)
        if synth_target:
            tmp_jar = copy.copy(jar)
            tmp_jar.name += '-only'
            published.append(tmp_jar)
        published.append(jar)
        if (skip and ((jar.org, jar.name) == self.restart_at)):
            skip = False
        newver = (self.overrides.get((jar.org, jar.name)) or semver.bump())
        if self.snapshot:
            newver = newver.make_snapshot()
        if (newver <= semver):
            raise TaskError(('Requested version %s must be greater than the current version %s' % (newver.version(), semver.version())))
        newfingerprint = self.fingerprint(target, fingerprint_internal)
        no_changes = (newfingerprint == fingerprint)
        if no_changes:
            changelog = ('No changes for %s - forced push.\n' % jar_coordinate(jar, semver.version()))
        else:
            changelog = (self.changelog(target, sha) or 'Direct dependencies changed.\n')
        if (no_changes and (not self.force)):
            print(('No changes for %s' % jar_coordinate(jar, semver.version())))
            stage_artifacts(target, jar, (newver if self.force else semver).version(), changelog, synth_target=synth_target)
        elif skip:
            print(('Skipping %s to resume at %s' % (jar_coordinate(jar, (newver if self.force else semver).version()), coordinate(self.restart_at[0], self.restart_at[1]))))
            stage_artifacts(target, jar, semver.version(), changelog, synth_target=synth_target)
        else:
            if (not self.dryrun):
                if no_changes:
                    print(changelog)
                else:
                    print(('\nChanges for %s since %s @ %s:\n\n%s' % (coordinate(jar.org, jar.name), semver.version(), sha, changelog)))
                if os.isatty(sys.stdin.fileno()):
                    push = raw_input(('Publish %s with revision %s ? [y|N] ' % (coordinate(jar.org, jar.name), newver.version())))
                    print('\n')
                    if (push.strip().lower() != 'y'):
                        raise TaskError('User aborted push')
            pushdb.set_version(target, newver, head_sha, newfingerprint)
            (ivyxml, idl_ivyxml) = stage_artifacts(target, jar, newver.version(), changelog, confs=repo['confs'], synth_target=synth_target)
            if self.dryrun:
                print(('Skipping publish of %s in test mode.' % jar_coordinate(jar, newver.version())))
            else:
                resolver = repo['resolver']
                path = repo.get('path')
                jvm_args = self._jvmargs
                if repo.get('auth'):
                    user = repo.get('username')
                    password = repo.get('password')
                    if (user and password):
                        jvm_args.append(('-Dlogin=%s' % user))
                        jvm_args.append(('-Dpassword=%s' % password))
                    else:
                        raise TaskError(('Unable to publish to %s. %s' % (repo['resolver'], repo.get('help', ''))))

                def publish(ivyxml_path):
                    ivysettings = self.generate_ivysettings(published, publish_local=path)
                    args = ['-settings', ivysettings, '-ivy', ivyxml_path, '-deliverto', ('%s/[organisation]/[module]/ivy-[revision].xml' % self.outdir), '-publish', resolver, '-publishpattern', ('%s/[organisation]/[module]/[artifact]-[revision](-[classifier]).[ext]' % self.outdir), '-revision', newver.version(), '-m2compatible']
                    if (LogOptions.stderr_log_level() == logging.DEBUG):
                        args.append('-verbose')
                    if self.snapshot:
                        args.append('-overwrite')
                    try:
                        ivy = Bootstrapper.default_ivy()
                        ivy.execute(jvm_options=jvm_args, args=args, workunit_factory=self.context.new_workunit, workunit_name='jar-publish')
                    except (Bootstrapper.Error, Ivy.Error) as e:
                        raise TaskError(('Failed to push %s! %s' % (jar_coordinate(jar, newver.version()), e)))
                if ivyxml:
                    publish(ivyxml)
                if idl_ivyxml:
                    publish(idl_ivyxml)
                if self.commit:
                    org = jar.org
                    name = jar.name
                    rev = newver.version()
                    args = dict(org=org, name=name, rev=rev, coordinate=coordinate(org, name, rev), user=getpass.getuser(), cause=('with forced revision' if ((org, name) in self.overrides) else '(autoinc)'))
                    pushdb.dump(dbfile)
                    self.commit_push(coordinate(org, name, rev))
                    self.scm.refresh()
                    self.scm.tag(('%(org)s-%(name)s-%(rev)s' % args), message=('Publish of %(coordinate)s initiated by %(user)s %(cause)s' % args))
