def exported_targets(self):
    candidates = set()
    if self.transitive:
        candidates.update(self.context.targets())
    else:
        candidates.update(self.context.target_roots)

        def get_synthetic(lang, target):
            mappings = self.context.products.get(lang).get(target)
            if mappings:
                for (key, generated) in mappings.items():
                    for synthetic in generated:
                        yield synthetic
        for candidate in self.context.target_roots:
            candidates.update(get_synthetic('java', candidate))
            candidates.update(get_synthetic('scala', candidate))

    def exportable(tgt):
        return ((tgt in candidates) and tgt.is_exported)
    return OrderedSet(filter(exportable, reversed(InternalTarget.sort_targets(filter(exportable, candidates)))))
