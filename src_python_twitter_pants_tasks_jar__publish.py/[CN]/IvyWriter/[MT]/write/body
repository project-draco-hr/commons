def write(self, target, path, confs=None):
    dependencies = [self.internaldep(dep) for dep in target.internal_dependencies]
    dependencies.extend((self.jardep(dep) for dep in target.jar_dependencies if dep.rev))
    excludes = []
    if target.excludes:
        excludes.extend((IvyWriter.create_exclude(exclude) for exclude in target.excludes))
    template_data = self.internaldep(target).extend(publications=(set(confs) if confs else set()), dependencies=dependencies, excludes=excludes)
    with safe_open(path, 'w') as output:
        generator = Generator(pkgutil.get_data(__name__, os.path.join('ivy_resolve', 'ivy.mk')), lib=template_data)
        generator.write(output)
