def info(self, member, callback=None):
    promise = Promise(callback)

    def do_info():
        self._zk.aget(path, None, info_completion)
    with self._member_lock:
        if (member not in self._members):
            self._members[member] = Future()
        member_future = self._members[member]
    member_future.add_done_callback((lambda future: promise.set(future.result())))
    dispatch = False
    with self._member_lock:
        if ((not member_future.done()) and (not member_future.running())):
            try:
                dispatch = member_future.set_running_or_notify_cancel()
            except:
                pass

    def info_completion(_, rc, content, stat):
        if (rc in self._zk.COMPLETION_RETRY):
            do_info()
            return
        if (rc == zookeeper.NONODE):
            future = self._members.pop(member, Future())
            future.set_result(Membership.error())
            return
        elif (rc != zookeeper.OK):
            return
        self._members[member].set_result(content)
    if dispatch:
        path = posixpath.join(self._path, self.id_to_znode(member.id))
        do_info()
    return promise()
