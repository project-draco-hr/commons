def join(self, blob, callback=None, expire_callback=None):
    membership_promise = Promise(callback)
    exists_promise = Promise(expire_callback)

    def do_join():
        self._zk.acreate(posixpath.join(self._path, self.MEMBER_PREFIX), blob, self._acl, (zookeeper.SEQUENCE | zookeeper.EPHEMERAL), acreate_completion)

    def exists_completion(_, rc, path):
        if (rc in self._zk.COMPLETION_RETRY):
            self._zk.aexists(path, exists_watch, exists_completion)
            return
        if (rc == zookeeper.NONODE):
            exists_promise.set()

    def exists_watch(_, event, state, path):
        if (((event == zookeeper.SESSION_EVENT) and (state == zookeeper.EXPIRED_SESSION_STATE)) or (event == zookeeper.DELETED_EVENT)):
            exists_promise.set()

    def acreate_completion(_, rc, path):
        if (rc in self._zk.COMPLETION_RETRY):
            do_join()
            return
        if (rc == zookeeper.OK):
            created_id = self.znode_to_id(path)
            membership = Membership(created_id)
            with self._member_lock:
                result_future = self._members.get(membership, Future())
                result_future.set_result(blob)
                self._members[membership] = result_future
            if expire_callback:
                self._zk.aexists(path, exists_watch, exists_completion)
        else:
            membership = Membership.error()
        membership_promise.set(membership)
    do_join()
    return membership_promise()
