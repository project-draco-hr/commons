def monitor(self, membership=frozenset(), callback=None):
    capture = Capture(callback)

    def wait_exists():
        self._zk.aexists(self._path, exists_watch, exists_completion)

    def exists_watch(_, event, state, path):
        if ((event == zookeeper.SESSION_EVENT) and (state == zookeeper.EXPIRED_SESSION_STATE)):
            wait_exists()
            return
        if (event == zookeeper.CREATED_EVENT):
            do_monitor()
        elif (event == zookeeper.DELETED_EVENT):
            wait_exists()

    def exists_completion(_, rc, stat):
        if (rc == zookeeper.OK):
            do_monitor()

    def do_monitor():
        self._zk.aget_children(self._path, get_watch, get_completion)

    def get_watch(_, event, state, path):
        if ((event == zookeeper.SESSION_EVENT) and (state == zookeeper.EXPIRED_SESSION_STATE)):
            wait_exists()
            return
        if (state != zookeeper.CONNECTED_STATE):
            return
        if (event == zookeeper.DELETED_EVENT):
            wait_exists()
            return
        if (event != zookeeper.CHILD_EVENT):
            return
        if set_different(capture, membership, self._members):
            return
        do_monitor()

    def get_completion(_, rc, children):
        if (rc in self._zk.COMPLETION_RETRY):
            do_monitor()
            return
        if (rc == zookeeper.NONODE):
            wait_exists()
            return
        if (rc != zookeeper.OK):
            log.warning(('Unexpected get_completion return code: %s' % ReturnCode(rc)))
            capture.set(set([Membership.error()]))
            return
        self._update_children(children)
        set_different(capture, membership, self._members)
    do_monitor()
    return capture()
