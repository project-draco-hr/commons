{
  ImmutableList.Builder<String> requiredHelps=ImmutableList.builder();
  ImmutableList.Builder<String> optionalHelps=ImmutableList.builder();
  for (  OptionInfo optionInfo : ORDER_BY_NAME.immutableSortedCopy(argumentInfo.optionInfos)) {
    Field field=optionInfo.field;
    CmdLine cmdLine=optionInfo.cmdLine;
    Arg arg=getArg(field);
    Object defaultValue=arg.uncheckedGet();
    ImmutableList<String> constraints=collectConstraints(verifiers,field);
    String help=formatHelp(cmdLine,field,constraints,defaultValue);
    if (!arg.hasDefault()) {
      requiredHelps.add(help);
    }
 else {
      optionalHelps.add(help);
    }
  }
  infoLog("-------------------------------------------------------------------------");
  infoLog(String.format("%s to print this help message",Joiner.on(" or ").join(Iterables.transform(HELP_ARGS,ARG_NAME_TO_FLAG))));
  Optional<PositionalInfo> positionalInfo=argumentInfo.positionalInfo;
  if (positionalInfo.isPresent()) {
    infoLog("\nPositional args:");
    PositionalInfo info=positionalInfo.get();
    Field field=info.field;
    Arg arg=getArg(field);
    Object defaultValue=arg.uncheckedGet();
    ImmutableList<String> constraints=collectConstraints(verifiers,field);
    infoLog(String.format("%s%s\n\t%s\n\t(%s.%s)",defaultValue != null ? "default " + defaultValue : "",Iterables.isEmpty(constraints) ? "" : " [" + Joiner.on(", ").join(constraints) + "]",info.positional.help(),field.getDeclaringClass().getName(),field.getName()));
  }
  ImmutableList<String> required=requiredHelps.build();
  if (!required.isEmpty()) {
    infoLog("\nRequired flags:");
    infoLog(Joiner.on('\n').join(required));
  }
  ImmutableList<String> optional=optionalHelps.build();
  if (!optional.isEmpty()) {
    infoLog("\nOptional flags:");
    infoLog(Joiner.on('\n').join(optional));
  }
  infoLog("-------------------------------------------------------------------------");
}
