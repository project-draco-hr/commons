def _do_test_fetch(self, remote, rw_repo, remote_repo):
    self._do_test_fetch_info(rw_repo)

    def fetch_and_test(remote, **kwargs):
        progress = TestRemoteProgress()
        kwargs['progress'] = progress
        res = remote.fetch(**kwargs)
        progress.make_assertion()
        self._do_test_fetch_result(res, remote)
        return res

    def get_info(res, remote, name):
        return res[('%s/%s' % (remote, name))]
    remote_repo.head.reference = remote_repo.heads.master
    res = fetch_and_test(remote)
    for info in res:
        assert (info.flags & info.HEAD_UPTODATE)
    rhead = remote_repo.head
    remote_commit = rhead.commit
    rhead.reset('HEAD~2', index=False)
    res = fetch_and_test(remote)
    mkey = ('%s/%s' % (remote, 'master'))
    master_info = res[mkey]
    assert ((master_info.flags & FetchInfo.FORCED_UPDATE) and (master_info.note is not None))
    rhead.commit = remote_commit
    res = fetch_and_test(remote)
    assert (res[mkey].flags & FetchInfo.FAST_FORWARD)
    new_remote_branch = Head.create(remote_repo, 'new_branch')
    res = fetch_and_test(remote)
    new_branch_info = get_info(res, remote, new_remote_branch)
    assert (new_branch_info.flags & FetchInfo.NEW_HEAD)
    new_remote_branch.rename('other_branch_name')
    res = fetch_and_test(remote)
    other_branch_info = get_info(res, remote, new_remote_branch)
    assert (other_branch_info.ref.commit == new_branch_info.ref.commit)
    Head.delete(new_remote_branch.repo, new_remote_branch)
    res = fetch_and_test(remote)
    self.failUnlessRaises(IndexError, get_info, res, remote, new_remote_branch)
    stale_refs = remote.stale_refs
    assert ((len(stale_refs) == 2) and isinstance(stale_refs[0], RemoteReference))
    RemoteReference.delete(rw_repo, *stale_refs)
    res = fetch_and_test(remote, refspec=('master:refs/remotes/%s/master' % remote))
    assert ((len(res) == 1) and get_info(res, remote, 'master'))
    res = fetch_and_test(remote, refspec='master')
    assert (len(res) == 1)
    rtag = TagReference.create(remote_repo, '1.0-RV_hello.there')
    res = fetch_and_test(remote, tags=True)
    tinfo = res[str(rtag)]
    assert (isinstance(tinfo.ref, TagReference) and (tinfo.ref.commit == rtag.commit))
    assert (tinfo.flags & tinfo.NEW_TAG)
    Reference.set_object(rtag, rhead.commit.parents[0].parents[0])
    res = fetch_and_test(remote, tags=True)
    tinfo = res[str(rtag)]
    assert (tinfo.commit == rtag.commit)
    assert (tinfo.flags & tinfo.TAG_UPDATE)
    TagReference.delete(remote_repo, rtag)
    res = fetch_and_test(remote, tags=True)
    self.failUnlessRaises(IndexError, get_info, res, remote, str(rtag))
    other_repo_dir = tempfile.mktemp('other_repo')
    other_repo = remote_repo.clone(other_repo_dir, shared=False)
    remote_repo_url = ('git://localhost%s' % remote_repo.git_dir)
    other_origin = other_repo.remotes.origin
    other_origin.config_writer.set('url', remote_repo_url)
    rw_repo.head.reset(remote.refs.master, working_tree=True)
    try:
        self._commit_random_file(rw_repo)
        remote.push(rw_repo.head.reference)
        res = fetch_and_test(other_origin)
    finally:
        shutil.rmtree(other_repo_dir)
