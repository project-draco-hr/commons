def _test_push_and_pull(self, remote, rw_repo, remote_repo):
    lhead = rw_repo.head
    lindex = rw_repo.index
    try:
        lhead.reference = rw_repo.heads.master
    except AttributeError:
        lhead.reference = rw_repo.create_head('master')
    lhead.reset(remote.refs.master, working_tree=True)
    self._commit_random_file(rw_repo)
    progress = TestRemoteProgress()
    res = remote.push(lhead.reference, progress)
    assert isinstance(res, IterableList)
    self._do_test_push_result(res, remote)
    progress.make_assertion()
    lhead.reset('HEAD~1')
    res = remote.push(lhead.reference)
    assert (res[0].flags & PushInfo.ERROR)
    assert (res[0].flags & PushInfo.REJECTED)
    self._do_test_push_result(res, remote)
    res = remote.push(('+%s' % lhead.reference))
    assert ((res[0].flags & PushInfo.ERROR) == 0)
    assert (res[0].flags & PushInfo.FORCED_UPDATE)
    self._do_test_push_result(res, remote)
    res = remote.push('hellothere')
    assert (len(res) == 0)
    progress = TestRemoteProgress()
    to_be_updated = 'my_tag.1.0RV'
    new_tag = TagReference.create(rw_repo, to_be_updated)
    other_tag = TagReference.create(rw_repo, 'my_obj_tag.2.1aRV', message='my message')
    res = remote.push(progress=progress, tags=True)
    assert (res[(-1)].flags & PushInfo.NEW_TAG)
    progress.make_assertion()
    self._do_test_push_result(res, remote)
    new_tag = TagReference.create(rw_repo, to_be_updated, ref='HEAD~1', force=True)
    res = remote.push(tags=True)
    self._do_test_push_result(res, remote)
    assert ((res[(-1)].flags & PushInfo.REJECTED) and (res[(-1)].flags & PushInfo.ERROR))
    res = remote.push(('+%s' % new_tag.path))
    assert (((res[(-1)].flags & PushInfo.ERROR) == 0) and (res[(-1)].flags & PushInfo.FORCED_UPDATE))
    res = remote.push((':%s' % new_tag.path))
    self._do_test_push_result(res, remote)
    assert (res[0].flags & PushInfo.DELETED)
    new_head = Head.create(rw_repo, 'my_new_branch')
    progress = TestRemoteProgress()
    res = remote.push(new_head, progress)
    assert (res[0].flags & PushInfo.NEW_HEAD)
    progress.make_assertion()
    self._do_test_push_result(res, remote)
    res = remote.push((':%s' % new_head.path))
    self._do_test_push_result(res, remote)
    Head.delete(rw_repo, new_head)
    assert (res[(-1)].flags & PushInfo.DELETED)
    res = remote.push(all=True)
    self._do_test_push_result(res, remote)
    remote.pull('master')
    TagReference.delete(rw_repo, new_tag, other_tag)
    remote.push((':%s' % other_tag.path))
