@with_rw_and_rw_remote_repo('0.1.6')
def test_base(self, rw_repo, remote_repo):
    num_remotes = 0
    remote_set = set()
    ran_fetch_test = False
    for remote in rw_repo.remotes:
        num_remotes += 1
        assert (remote == remote)
        assert (str(remote) != repr(remote))
        remote_set.add(remote)
        remote_set.add(remote)
        refs = remote.refs
        assert refs
        for ref in refs:
            assert (ref.remote_name == remote.name)
            assert ref.remote_head
        for opt in ('url',):
            val = getattr(remote, opt)
            reader = remote.config_reader
            assert (reader.get(opt) == val)
            assert (reader.get_value(opt, None) == val)
            self.failUnlessRaises(IOError, reader.set, opt, 'test')
            writer = remote.config_writer
            new_val = 'myval'
            writer.set(opt, new_val)
            assert (writer.get(opt) == new_val)
            writer.set(opt, val)
            assert (writer.get(opt) == val)
            del writer
            assert (getattr(remote, opt) == val)
        other_name = 'totally_other_name'
        prev_name = remote.name
        assert (remote.rename(other_name) == remote)
        assert (prev_name != remote.name)
        for time in range(2):
            assert (remote.rename(prev_name).name == prev_name)
        self._test_push_and_pull(remote, rw_repo, remote_repo)
        if (remote.name == 'daemon_origin'):
            self._do_test_fetch(remote, rw_repo, remote_repo)
            ran_fetch_test = True
        remote.update()
    assert ran_fetch_test
    assert num_remotes
    assert (num_remotes == len(remote_set))
    origin = rw_repo.remote('origin')
    assert (origin == rw_repo.remotes.origin)
