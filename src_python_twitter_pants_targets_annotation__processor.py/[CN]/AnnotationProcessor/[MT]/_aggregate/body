@classmethod
def _aggregate(cls, name, provides, apt_libs):
    all_deps = OrderedSet()
    all_excludes = OrderedSet()
    all_sources = []
    all_resources = []
    all_binary_resources = []
    all_annotation_processors = []
    for apt_lib in apt_libs:
        if apt_lib.resolved_dependencies:
            all_deps.update((dep for dep in apt_lib.jar_dependencies if (dep.rev is not None)))
        if apt_lib.excludes:
            all_excludes.update(apt_lib.excludes)
        if apt_lib.sources:
            all_sources.extend(apt_lib.sources)
        if apt_lib.resources:
            all_resources.extend(apt_lib.resources)
        if apt_lib.binary_resources:
            all_binary_resources.extend(apt_lib.binary_resources)
        if apt_lib.processors:
            all_annotation_processors.extend(apt_lib.processors)
    return AnnotationProcessor(name, all_sources, provides=provides, dependencies=all_deps, excludes=all_excludes, resources=all_resources, binary_resources=all_binary_resources, processors=all_annotation_processors, is_meta=True)
