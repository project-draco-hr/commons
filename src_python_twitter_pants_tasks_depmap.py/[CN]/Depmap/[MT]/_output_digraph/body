def _output_digraph(self, target):
    color_by_type = {}

    def output_candidate(internal):
        return ((self.is_internal_only and internal) or (self.is_external_only and (not internal)) or ((not self.is_internal_only) and (not self.is_external_only)))

    def output_dep(dep):
        (dep_id, internal) = self._dep_id(dep)
        if internal:
            fmt = '  "%(id)s" [style=filled, fillcolor="%(color)d"];'
        else:
            fmt = '  "%(id)s" [style=filled, fillcolor="%(color)d", shape=ellipse];'
        if (not color_by_type.has_key(type(dep))):
            color_by_type[type(dep)] = (len(color_by_type.keys()) + 1)
        return (fmt % {'id': dep_id, 'color': color_by_type[type(dep)], })

    def output_deps(outputted, dep, parent=None):
        output = []
        if (dep not in outputted):
            outputted.add(dep)
            output.append(output_dep(dep))
            if parent:
                output.append(('  "%s" -> "%s";' % (self._dep_id(parent)[0], self._dep_id(dep)[0])))
            for dependency in dep.resolve():
                if self._is_jvm(dependency):
                    for internal_dependency in dependency.internal_dependencies:
                        output += output_deps(outputted, internal_dependency, dependency)
                for jar in (dependency.jar_dependencies if self._is_jvm(dependency) else [dependency]):
                    (jar_id, internal) = self._dep_id(jar)
                    if output_candidate(internal):
                        if (jar not in outputted):
                            output += [output_dep(jar)]
                            outputted.add(jar)
                        (target_id, _) = self._dep_id(target)
                        (dep_id, _) = self._dep_id(dependency)
                        left_id = (target_id if self.is_external_only else dep_id)
                        if ((left_id, jar_id) not in outputted):
                            styled = (internal and (not self.is_internal_only))
                            output += [('  "%s" -> "%s"%s;' % (left_id, jar_id, (' [style="dashed"]' if styled else '')))]
                            outputted.add((left_id, jar_id))
        return output
    header = [('digraph "%s" {' % target.id)]
    graph_attr = ['  node [shape=rectangle, colorscheme=set312;];', '  rankdir=LR;']
    return (((header + graph_attr) + output_deps(set(), target)) + ['}'])
