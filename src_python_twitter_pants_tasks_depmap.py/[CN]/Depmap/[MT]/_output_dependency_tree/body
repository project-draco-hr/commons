def _output_dependency_tree(self, target):

    def output_dep(dep, indent):
        return ('%s%s' % ((indent * '  '), dep))

    def output_deps(dep, indent=0, outputted=set()):
        (dep_id, _) = self._dep_id(dep)
        if (dep_id in outputted):
            return ([output_dep(('*%s' % dep_id), indent)] if (not self.is_minimal) else [])
        else:
            output = []
            if (not self.is_external_only):
                output += [output_dep(dep_id, indent)]
                outputted.add(dep_id)
                indent += 1
            if self._is_jvm(dep):
                for internal_dep in dep.internal_dependencies:
                    output += output_deps(internal_dep, indent, outputted)
            if (not self.is_internal_only):
                if self._is_jvm(dep):
                    for jar_dep in dep.jar_dependencies:
                        (jar_dep_id, internal) = self._dep_id(jar_dep)
                        if (not internal):
                            if ((jar_dep_id not in outputted) or ((not self.is_minimal) and (not self.is_external_only))):
                                output += [output_dep(jar_dep_id, indent)]
                                outputted.add(jar_dep_id)
            return output
    return [dependency for t in target.resolve() for dependency in output_deps(t)]
