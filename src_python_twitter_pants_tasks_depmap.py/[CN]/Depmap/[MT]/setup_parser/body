@classmethod
def setup_parser(cls, option_group, args, mkflags):
    super(Depmap, cls).setup_parser(option_group, args, mkflags)
    cls.internal_only_flag = mkflags('internal-only')
    cls.external_only_flag = mkflags('external-only')
    option_group.add_option(cls.internal_only_flag, action='store_true', dest='depmap_is_internal_only', default=False, help='Specifies that only internal dependencies should be included in the graph output (no external jars).')
    option_group.add_option(cls.external_only_flag, action='store_true', dest='depmap_is_external_only', default=False, help='Specifies that only external dependencies should be included in the graph output (only external jars).')
    option_group.add_option(mkflags('minimal'), action='store_true', dest='depmap_is_minimal', default=False, help='For a textual dependency tree, only prints a dependency the 1st time it is encountered.  For graph output this does nothing.')
    option_group.add_option(mkflags('separator'), dest='depmap_separator', default='-', help="Specifies the separator to use between the org/name/rev components of a dependency's fully qualified name.")
    option_group.add_option(mkflags('graph'), action='store_true', dest='depmap_is_graph', default=False, help='Specifies the internal dependency graph should be output in the dot digraph format')
