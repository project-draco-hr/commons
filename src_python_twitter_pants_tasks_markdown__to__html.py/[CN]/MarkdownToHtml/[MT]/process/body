def process(self, outdir, base, source, fragmented, url_builder, get_config, css=None):

    def parse_url(spec):
        match = MarkdownToHtml.PANTS_LINK.match(spec)
        if match:
            page = Target.get(Address.parse(get_buildroot(), match.group(1)))
            anchor = (match.group(2) or '')
            if (not page):
                raise TaskError(('Invalid link %s' % match.group(1)))
            (alias, url) = url_builder(page, config=get_config(page))
            return (alias, (url + anchor))
        else:
            return (spec, spec)

    def build_url(label):
        components = label.split('|', 1)
        if (len(components) == 1):
            return parse_url(label.strip())
        else:
            (alias, link) = components
            (_, url) = parse_url(link.strip())
            return (alias, url)
    wikilinks = WikilinksExtension(build_url)
    (path, ext) = os.path.splitext(source)
    output_path = os.path.join(outdir, (path + '.html'))
    safe_mkdir(os.path.dirname(output_path))
    with codecs.open(output_path, 'w', 'utf-8') as output:
        with codecs.open(os.path.join(get_buildroot(), base, source), 'r', 'utf-8') as input:
            md_html = markdown.markdown(input.read(), extensions=['codehilite(guess_lang=False)', 'extra', 'tables', 'toc', wikilinks])
            if fragmented:
                if css:
                    with safe_open(css) as fd:
                        output.write((textwrap.dedent('\n              <style type="text/css">\n              %s\n              </style>\n              ').strip() % fd.read()))
                        output.write('\n')
                output.write(md_html)
            else:
                if css:
                    css_relpath = os.path.relpath(css, outdir)
                    out_relpath = os.path.dirname(source)
                    link_relpath = os.path.relpath(css_relpath, out_relpath)
                    css = ('<link rel="stylesheet" type="text/css" href="%s"/>' % link_relpath)
                html = (textwrap.dedent('\n          <html>\n            <head>\n              <meta charset="utf-8">\n              %s\n            </head>\n            <body>\n          <!-- generated by pants! -->\n          %s\n            </body>\n          </html>\n          ').strip() % ((css or ''), md_html))
                output.write(html)
            return output.name
