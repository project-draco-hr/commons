def execute(self, targets):
    if (not MarkdownToHtml.AVAILABLE):
        raise TaskError('Cannot process markdown - no markdown lib on the sys.path')
    css_relpath = os.path.join('css', 'codehighlight.css')
    css = emit_codehighlight_css(os.path.join(self.outdir, css_relpath), self.code_style)
    if css:
        self.context.log.info(('Emitted %s' % css))
    genmap = self.context.products.get('markdown_html')
    for page in filter((lambda t: isinstance(t, Page)), targets):
        (_, ext) = os.path.splitext(page.source)
        if (ext in self.extensions):

            def process_page(key, outdir, url_builder, config):
                outputs = list()
                if (css and self.standalone):
                    outputs.append(css_relpath)
                html_path = self.process(outdir, page.target_base, page.source, self.standalone, url_builder, config, css=css)
                self.context.log.info(('Processed %s to %s' % (page.source, html_path)))
                outputs.append(os.path.relpath(html_path, outdir))
                genmap.add(key, outdir, outputs)

            def url_builder(linked_page, config=None):
                (path, ext) = os.path.splitext(linked_page.source)
                return (linked_page.name, os.path.relpath((path + '.html'), os.path.dirname(page.source)))
            process_page(page, os.path.join(self.outdir, 'html'), url_builder, (lambda p: None))
            for wiki in page.wikis():

                def get_config(page):
                    return page.wiki_config(wiki)
                basedir = os.path.join(self.outdir, wiki.id)
                process_page((wiki, page), basedir, wiki.url_builder, get_config)
