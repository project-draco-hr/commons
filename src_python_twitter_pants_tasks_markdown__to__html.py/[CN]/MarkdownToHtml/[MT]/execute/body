def execute(self, targets):
    if (not MarkdownToHtml.AVAILABLE):
        raise TaskError('Cannot process markdown - no markdown lib on the sys.path')
    css_relpath = os.path.join('css', 'codehighlight.css')
    css = emit_codehighlight_css(os.path.join(self.outdir, css_relpath), self.code_style)
    if css:
        self.context.log.info(('Emitted %s' % css))

    def is_page(target):
        return isinstance(target, Page)
    roots = set()
    interior_nodes = set()
    if self.open:
        dependencies_by_page = self.context.dependents(on_predicate=is_page, from_predicate=is_page)
        roots.update(dependencies_by_page.keys())
        for dependencies in dependencies_by_page.values():
            interior_nodes.update(dependencies)
            roots.difference_update(dependencies)
        for page in self.context.targets(is_page):
            if ((not page.dependencies) and (page not in interior_nodes)):
                roots.add(page)
    plaingenmap = self.context.products.get('markdown_html')
    wikigenmap = self.context.products.get('wiki_html')
    show = []
    for page in filter(is_page, targets):
        (_, ext) = os.path.splitext(page.source)
        if (ext in self.extensions):

            def process_page(key, outdir, url_builder, config, genmap, fragment=False):
                html_path = self.process(outdir, page.target_base, page.source, (self.fragment or fragment), url_builder, config, css=css)
                self.context.log.info(('Processed %s to %s' % (page.source, html_path)))
                relpath = os.path.relpath(html_path, outdir)
                genmap.add(key, outdir, [relpath])
                return html_path

            def url_builder(linked_page, config=None):
                (path, ext) = os.path.splitext(linked_page.source)
                return (linked_page.name, os.path.relpath((path + '.html'), os.path.dirname(page.source)))
            page_path = os.path.join(self.outdir, 'html')
            html = process_page(page, page_path, url_builder, (lambda p: None), plaingenmap)
            if (css and (not self.fragment)):
                plaingenmap.add(page, self.outdir, list(css_relpath))
            if (self.open and (page in roots)):
                show.append(html)
            for wiki in page.wikis():

                def get_config(page):
                    return page.wiki_config(wiki)
                basedir = os.path.join(self.outdir, wiki.id)
                process_page((wiki, page), basedir, wiki.url_builder, get_config, wikigenmap, fragment=True)
    if show:
        binary_util.ui_open(*show)
