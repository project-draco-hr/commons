def topological_sort(data, priors=[], require_fully_specified=False):
    '\n    Topological sort.\n\n    data can be one of two formats:\n     (1) dictionary:\n           after_dep => before_dep or set(before deps) or None<=>set()\n     (2) list:\n           sequence of (before, after) pairs of dependencies\n\n    equivalent examples:\n      (1) topological_sort({2: 1, 3: 2, 4: set([2, 3])})\n      (2) topological_sort([ (1,2), (2,3), (2,4), (3,4) ])\n\n    yields sets of elements as their dependencies are satisfied, or raises\n    DependencyCycle exception.\n\n    you may supply priors, an array of pre-satisfied dependencies.\n  '
    data = copy.deepcopy(data)
    if isinstance(data, (list, tuple)):
        data = _preprocess_list(data)
    elif isinstance(data, dict):
        data = copy.deepcopy(data)
    else:
        raise TypeError(('topological_sort must take a dictionary or a list, got %s' % type(data)))
    for (key, val) in data.items():
        if (val is None):
            data[key] = set()
        elif isinstance(val, str):
            data[key] = set([val])
        elif (not hasattr(val, '__iter__')):
            data[key] = set([val])
    for (key, val) in data.items():
        val.discard(key)
    unavailable_deps = (reduce(set.union, data.values(), set()) - set(data.keys()))
    unavailable_deps -= set(priors)
    if (unavailable_deps and require_fully_specified):
        raise UnderspecifiedDependencies(('Some dependencies unavailable: %s' % ' '.join(map(str, unavailable_deps))))
    data.update(((key, set()) for key in unavailable_deps))

    def filter_keys(data, prior_set):
        return dict(((key, (values - prior_set)) for (key, values) in data.items() if (key not in prior_set)))
    if priors:
        data = filter_keys(data, set(priors))
    while True:
        independent = set((after for (after, before) in data.items() if (not before)))
        if (not independent):
            break
        else:
            yield independent
        data = filter_keys(data, independent)
    remaining_deps = reduce(set.union, data.values(), set())
    if remaining_deps:
        raise DependencyCycle(('Data contained a cycle! Unsatisfied deps: %s' % remaining_deps))
