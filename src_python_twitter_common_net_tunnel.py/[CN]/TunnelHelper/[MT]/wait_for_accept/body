@classmethod
def wait_for_accept(cls, port, tunnel_popen, timeout):
    total_time = Amount(0, Time.SECONDS)
    sleep = cls.MIN_RETRY
    warned = False
    while ((total_time < timeout) and (tunnel_popen.returncode is None)):
        try:
            accepted_socket = socket.create_connection(('localhost', port), timeout=5.0)
            accepted_socket.close()
            return True
        except socket.error:
            total_time += sleep
            time.sleep(sleep.as_(Time.SECONDS))
            sleep = min((sleep * 2), cls.MAX_INTERVAL)
            if ((total_time > cls.WARN_THRESHOLD) and (not warned)):
                log.warn(('Still waiting for tunnel to be established after %s (timeout is %s)' % (total_time, cls.DEFAULT_TIMEOUT)))
                warned = True
            tunnel_popen.poll()
    if (tunnel_popen.returncode is not None):
        cls.log(('SSH returned prematurely with code %s' % str(tunnel_popen.returncode)))
    else:
        cls.log('timed out initializing tunnel')
    return False
