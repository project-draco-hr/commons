def test_classpath_updates(self):
    a = MockTarget('a', exclusives={'a': '1', 'b': '1', })
    b = MockTarget('b', exclusives={'a': '1', 'b': '<none>', })
    c = MockTarget('c', exclusives={'a': '2', 'b': '2', })
    d = MockTarget('d')
    context = Context(CheckExclusivesTest.config, options={}, run_tracker=None, target_roots=[a, b, c, d])
    context.products.require_data('exclusives_groups')
    check_exclusives_task = CheckExclusives(context, signal_error=True)
    check_exclusives_task.execute([a, b, c, d])
    egroups = context.products.get_data('exclusives_groups')
    egroups.set_base_classpath_for_group('a=1,b=1', ['a1', 'b1'])
    egroups.set_base_classpath_for_group('a=1,b=<none>', ['a1'])
    egroups.set_base_classpath_for_group('a=2,b=2', ['a2', 'b2'])
    egroups.set_base_classpath_for_group('a=<none>,b=<none>', ['none'])
    egroups.update_compatible_classpaths(None, ['update_without_group'])
    egroups.update_compatible_classpaths('a=<none>,b=<none>', ['update_all'])
    egroups.update_compatible_classpaths('a=1,b=<none>', ['update_a1bn'])
    egroups.update_compatible_classpaths('a=2,b=2', ['update_only_a2b2'])
    self.assertEquals(egroups.get_classpath_for_group('a=2,b=2'), ['update_only_a2b2', 'update_all', 'update_without_group', 'a2', 'b2'])
    self.assertEquals(egroups.get_classpath_for_group('a=1,b=1'), ['update_a1bn', 'update_all', 'update_without_group', 'a1', 'b1'])
    self.assertEquals(egroups.get_classpath_for_group('a=1,b=<none>'), ['update_a1bn', 'update_all', 'update_without_group', 'a1'])
    self.assertEquals(egroups.get_classpath_for_group('a=<none>,b=<none>'), ['update_all', 'update_without_group', 'none'])
    egroups.update_compatible_classpaths('a=1,b=1', ['a1', 'b1', 'xxx'])
    self.assertEquals(egroups.get_classpath_for_group('a=1,b=1'), ['xxx', 'update_a1bn', 'update_all', 'update_without_group', 'a1', 'b1'])
