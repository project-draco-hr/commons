def test_sampler_base():


    class TestSampler(SamplerBase):

        def __init__(self, period, clock):
            self.count = 0
            SamplerBase.__init__(self, period, clock)

        def iterate(self):
            self.count += 1
    test_clock = ThreadedClock()
    sampler = TestSampler(Amount(1, Time.SECONDS), clock=test_clock)
    sampler.start()
    assert test_clock.converge(threads=[sampler])
    test_clock.assert_waiting(sampler, 1)
    test_clock.tick(0.5)
    assert test_clock.converge(threads=[sampler])
    assert (sampler.count == 0)
    test_clock.tick(0.5)
    assert test_clock.converge(threads=[sampler])
    assert (sampler.count == 1)
    test_clock.tick(5)
    assert test_clock.converge(threads=[sampler])
    assert (sampler.count == 6)
    assert (not sampler.is_stopped())
    sampler.stop()
    test_clock.tick(5)
    assert test_clock.converge(threads=[sampler])
    assert (sampler.count == 6)
