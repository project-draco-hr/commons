def test_base(self):
    path_repo = fixture_path('git_config')
    path_global = fixture_path('git_config_global')
    r_config = GitConfigParser([path_repo, path_global], read_only=True)
    assert r_config.read_only
    num_sections = 0
    num_options = 0
    assert (r_config._is_initialized == False)
    for section in r_config.sections():
        num_sections += 1
        for option in r_config.options(section):
            num_options += 1
            val = r_config.get(section, option)
            val_typed = r_config.get_value(section, option)
            assert isinstance(val_typed, (bool, long, float, basestring))
            assert val
            assert ('\n' not in option)
            assert ('\n' not in val)
            self.failUnlessRaises(IOError, r_config.set, section, option, None)
            self.failUnlessRaises(IOError, r_config.remove_option, section, option)
        self.failUnlessRaises(IOError, r_config.remove_section, section)
    assert (num_sections and num_options)
    assert (r_config._is_initialized == True)
    default = 'my default value'
    assert (r_config.get_value('doesnt', 'exist', default) == default)
    self.failUnlessRaises(NoSectionError, r_config.get_value, 'doesnt', 'exist')
