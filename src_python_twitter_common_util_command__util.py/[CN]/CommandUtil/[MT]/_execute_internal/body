@staticmethod
def _execute_internal(cmd, log_std_out, log_std_err, log_cmd, also_output_to_file=None, return_output=False):
    '\n    Executes the command and returns 0 if successful\n    Non-Zero status if command fails or an exception raised\n    '
    tmp_filename = None
    if (log_std_out or log_std_err):
        tmp_filename = tempfile.mktemp()
        tmp_file = open(tmp_filename, 'w')
    if ((not log_std_err) or (not log_std_out)):
        dev_null_file = open(os.devnull, 'w')
    if log_std_out:
        if also_output_to_file:
            std_out_file = open(also_output_to_file, 'w')
        else:
            std_out_file = tmp_file
    else:
        std_out_file = dev_null_file
    if log_std_err:
        std_err_file = tmp_file
    else:
        std_err_file = dev_null_file
    if log_cmd:
        log.info(('Executing: %s' % ' '.join(cmd)))
    try:
        ret = subprocess.call(cmd, stdout=std_out_file, stderr=std_err_file)
        text = None
        if tmp_filename:
            with open(tmp_filename, 'r') as file_read:
                text = file_read.read()
            os.remove(tmp_filename)
        if text:
            log.info(('External output:\n%s' % text))
        return ((ret, text) if return_output else ret)
    except subprocess.CalledProcessError as exception:
        log.error(('Subprocess Exception occurred %s' % exception))
        return ((ret, None) if return_output else ret)
    except OSError as exception:
        log.error(('OS Exception occurred %s' % exception))
        return ((1, None) if return_output else 1)
