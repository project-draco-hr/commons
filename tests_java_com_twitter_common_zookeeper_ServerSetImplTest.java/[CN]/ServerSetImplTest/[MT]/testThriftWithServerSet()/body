{
  final AtomicReference<Socket> clientConnection=new AtomicReference<Socket>();
  final CountDownLatch connected=new CountDownLatch(1);
  final ServerSocket server=new ServerSocket(0);
  Thread service=new Thread(new Runnable(){
    @Override public void run(){
      try {
        clientConnection.set(server.accept());
      }
 catch (      IOException e) {
        LOG.log(Level.WARNING,"Problem accepting a connection to thrift server",e);
      }
 finally {
        connected.countDown();
      }
    }
  }
);
  service.setDaemon(true);
  service.start();
  ServerSetImpl serverSetImpl=new ServerSetImpl(createZkClient(),SERVICE);
  serverSetImpl.watch(serverSetMonitor);
  assertChangeFiredEmpty();
  InetSocketAddress localSocket=new InetSocketAddress(server.getLocalPort());
  serverSetImpl.join(localSocket,Maps.<String,InetSocketAddress>newHashMap());
  assertChangeFired(ImmutableMap.<InetSocketAddress,Status>of(localSocket,Status.ALIVE));
  Service.Iface svc=createThriftClient(serverSetImpl);
  try {
    String value=svc.getString();
    LOG.info("Got value: " + value + " from server");
    assertEquals(Service.Iface.DONE,value);
  }
 catch (  TResourceExhaustedException e) {
    fail("ServerSet is not empty, should not throw exception here");
  }
 finally {
    connected.await();
    server.close();
  }
}
