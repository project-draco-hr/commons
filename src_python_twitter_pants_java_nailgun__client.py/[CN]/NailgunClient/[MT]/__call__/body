def __call__(self, main_class, *args, **environment):
    'Executes the given main_class with any supplied args in the given environment.\n\n    :param string main_class: the fully qualified class name of the main entrypoint\n    :param list args: any arguments to pass to the main entrypoint\n    :param dict environment: an environment mapping made available to native nails via the nail\n      context\n\n    Returns the exit code of the main_class.\n    '
    environment = dict((self.ENV_DEFAULTS.items() + environment.items()))
    sock = self.try_connect()
    if (not sock):
        raise self.NailgunError(('Problem connecting to nailgun server %s:%d' % (self._host, self._port)))
    session = NailgunSession(sock, self._ins, self._out, self._err)
    try:
        try:
            return session.execute(self._work_dir, main_class, *args, **environment)
        except socket.error as e:
            raise self.NailgunError(('Problem contacting nailgun server %s:%d: %s' % (self._host, self._port, e)))
        except session.ProtocolError as e:
            raise self.NailgunError(('Problem executing the nailgun protocol with nailgun server %s:%s: %s' % (self._host, self._port, e)))
    finally:
        sock.close()
