def _sort_and_validate_targets(self, targets):
    'Validate each target.\n\n    Returns a topologically ordered set of VersionedTargets, each representing one input target.\n    '
    ordered_targets = self._order_target_list(targets)
    versioned_targets = []
    id_to_hash = {}
    for target in ordered_targets:
        dependency_keys = set()
        if (self._invalidate_dependents and hasattr(target, 'dependencies')):
            for dep in target.dependencies:
                if isinstance(dep, Target):
                    hash = id_to_hash.get(dep.id, None)
                    if (hash is None):
                        hash = self._invalidator.existing_hash(dep.id)
                    if (hash is not None):
                        dependency_keys.add(hash)
                elif isinstance(dep, JarDependency):
                    jarid = ''
                    for key in CacheManager._JAR_HASH_KEYS:
                        jarid += str(getattr(dep, key))
                    dependency_keys.add(jarid)
                else:
                    dependency_keys.add(str(dep))
        cache_key = self._key_for(target, dependency_keys)
        id_to_hash[target.id] = cache_key.hash
        versioned_targets.append(VersionedTargetSet(self, [target], [cache_key]))
    return versioned_targets
