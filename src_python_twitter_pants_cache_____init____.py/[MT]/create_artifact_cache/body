def create_artifact_cache(log, artifact_root, spec, task_name, action='using'):
    "Returns an artifact cache for the specified spec.\n\n  spec can be:\n    - a path to a file-based cache root.\n    - a URL of a RESTful cache root.\n    - a bar-separated list of URLs, where we'll pick the one with the best ping times.\n    - A list of the above, for a combined cache.\n  "
    if (not spec):
        raise ValueError('Empty artifact cache spec')
    if isinstance(spec, basestring):
        if (spec.startswith('/') or spec.startswith('~')):
            path = os.path.join(spec, task_name)
            log.info(('%s %s local artifact cache at %s' % (task_name, action, path)))
            return LocalArtifactCache(log, artifact_root, path)
        elif (spec.startswith('http://') or spec.startswith('https://')):
            pinger = Pinger(timeout=0.5, tries=2)
            best_url = select_best_url(spec, pinger, log)
            if best_url:
                url = ((best_url.rstrip('/') + '/') + task_name)
                log.info(('%s %s remote artifact cache at %s' % (task_name, action, url)))
                return RESTfulArtifactCache(log, artifact_root, url)
            else:
                log.warn(('%s has no reachable artifact cache in %s.' % (task_name, spec)))
                return None
        else:
            raise ValueError(('Invalid artifact cache spec: %s' % spec))
    elif isinstance(spec, (list, tuple)):
        caches = filter(None, [create_artifact_cache(log, artifact_root, x, task_name, action) for x in spec])
        return (CombinedArtifactCache(caches) if caches else None)
