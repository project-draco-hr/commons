def create_artifact_cache(log, artifact_root, spec, task_name):
    "Returns an artifact cache for the specified spec.\n\n  spec can be:\n    - a path to a file-based cache root.\n    - a URL of a RESTful cache root.\n    - a bar-separated list of URLs, where we'll pick the one with the best ping times.\n    - A list of the above, for a combined cache.\n  "
    if (not spec):
        raise ValueError('Empty artifact cache spec')
    if isinstance(spec, basestring):
        if spec.startswith('/'):
            log.info(('%s using local artifact cache at %s' % spec))
            return FileBasedArtifactCache(log, artifact_root, spec)
        elif (spec.startswith('http://') or spec.startswith('https://')):
            best_url = select_best_url(spec, Pinger(), log)
            if best_url:
                log.info(('%s using remote artifact cache at %s' % (task_name, best_url)))
                return RESTfulArtifactCache(log, artifact_root, best_url)
            else:
                log.warn(('No reachable artifact cache in %s.' % spec))
                return None
        else:
            raise ValueError(('Invalid artifact cache spec: %s' % spec))
    elif isinstance(spec, (list, tuple)):
        caches = [create_artifact_cache(log, artifact_root, x, task_name) for x in spec]
        return CombinedArtifactCache(caches)
