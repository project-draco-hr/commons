def update_reporting(options, is_console_task, run_tracker):
    "Updates reporting config once we've parsed cmd-line flags."
    old_outfile = run_tracker.report.remove_reporter('capturing').settings.outfile
    old_outfile.flush()
    buffered_output = old_outfile.getvalue()
    old_outfile.close()
    log_level = Report.log_level_from_string((options.log_level or 'info'))
    color = (not options.no_color)
    timing = options.time
    cache_stats = options.time
    if (options.quiet or is_console_task):
        console_reporter = QuietReporter(run_tracker, QuietReporter.Settings(log_level=log_level, color=color))
    else:
        settings = PlainTextReporter.Settings(log_level=log_level, outfile=sys.stdout, color=color, indent=True, timing=timing, cache_stats=cache_stats)
        console_reporter = PlainTextReporter(run_tracker, settings)
        console_reporter.emit(buffered_output)
        console_reporter.flush()
    run_tracker.report.add_reporter('console', console_reporter)
    if options.logdir:
        safe_mkdir(options.logdir)
        run_id = run_tracker.run_info.get_info('id')
        outfile = open(os.path.join(options.logdir, ('%s.log' % run_id)), 'w')
        settings = PlainTextReporter.Settings(log_level=log_level, outfile=outfile, color=False, indent=True, timing=True, cache_stats=True)
        logfile_reporter = PlainTextReporter(run_tracker, settings)
        logfile_reporter.emit(buffered_output)
        logfile_reporter.flush()
        run_tracker.report.add_reporter('logfile', logfile_reporter)
