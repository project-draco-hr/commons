def initial_reporting(config, run_tracker):
    'Sets up the initial reporting configuration.\n\n  Will be changed after we parse cmd-line flags.\n  '
    reports_dir = config.get('reporting', 'reports_dir', default=os.path.join(config.getdefault('pants_workdir'), 'reports'))
    link_to_latest = os.path.join(reports_dir, 'latest')
    if os.path.exists(link_to_latest):
        os.unlink(link_to_latest)
    run_id = run_tracker.run_info.get_info('id')
    if (run_id is None):
        raise ReportingError('No run_id set')
    run_dir = os.path.join(reports_dir, run_id)
    safe_rmtree(run_dir)
    html_dir = os.path.join(run_dir, 'html')
    safe_mkdir(html_dir)
    os.symlink(run_dir, link_to_latest)
    report = Report()
    outfile = StringIO()
    capturing_reporter_settings = PlainTextReporter.Settings(outfile=outfile, log_level=Report.INFO, color=False, indent=True, timing=False, cache_stats=False)
    capturing_reporter = PlainTextReporter(run_tracker, capturing_reporter_settings)
    report.add_reporter('capturing', capturing_reporter)
    template_dir = config.get('reporting', 'reports_template_dir')
    html_reporter_settings = HtmlReporter.Settings(log_level=Report.INFO, html_dir=html_dir, template_dir=template_dir)
    html_reporter = HtmlReporter(run_tracker, html_reporter_settings)
    report.add_reporter('html', html_reporter)
    run_tracker.run_info.add_info('default_report', html_reporter.report_path())
    port = ReportingServerManager.get_current_server_port()
    if port:
        run_tracker.run_info.add_info('report_url', ('http://localhost:%d/run/%s' % (port, run_id)))
    return report
