@contextmanager
def open_jar(path, *args, **kwargs):
    'Yields a jar in a with context that will be closed when the context exits.\n\n  The yielded jar is a zipfile.ZipFile object with an additional mkdirs(arcpath) method that will\n  create a zip directory entry similar to unix `mkdir -p`.  Additionally, the ZipFile.write and\n  ZipFile.writestr methods are enhanced to call mkdirs as needed to ensure all jar entries contain\n  a full complement of parent paths leading from each leaf to the root of the jar.\n  '
    with open_zip(path, *args, **kwargs) as jar:
        real_write = jar.write
        real_writestr = jar.writestr
        made_dirs = set()

        def mkdirs(arcpath):
            if (arcpath and (arcpath not in made_dirs)):
                made_dirs.add(arcpath)
                parent_path = os.path.dirname(arcpath)
                mkdirs(parent_path)
                zipinfo = zipfile.ZipInfo((arcpath if arcpath.endswith('/') else (arcpath + '/')))
                zipinfo.compress_type = zipfile.ZIP_STORED
                zipinfo.external_attr = ((((((((stat.S_IFDIR | stat.S_IRUSR) | stat.S_IWUSR) | stat.S_IXUSR) | stat.S_IRGRP) | stat.S_IXGRP) | stat.S_IROTH) | stat.S_IXOTH) << 16)
                zipinfo.external_attr |= 16
                real_writestr(zipinfo, '')

        def write(path, arcname=None, **kwargs):
            if os.path.isdir(path):
                mkdirs((arcname or path))
            else:
                mkdirs(os.path.dirname((arcname or path)))
                real_write(path, arcname, **kwargs)

        def writestr(zinfo_or_arcname, *args, **kwargs):
            mkdirs(os.path.dirname(zinfo_or_arcname))
            real_writestr(zinfo_or_arcname, *args, **kwargs)
        jar.mkdirs = mkdirs
        jar.write = write
        jar.writestr = writestr
        yield jar
