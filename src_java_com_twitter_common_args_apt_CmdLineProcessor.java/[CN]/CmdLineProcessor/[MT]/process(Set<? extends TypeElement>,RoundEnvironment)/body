{
  try {
    @Nullable Configuration classpathConfiguration=configSupplier.get();
    Set<? extends Element> parsers=getAnnotatedElements(roundEnv,ArgParser.class);
    contributingClassNamesBuilder.addAll(extractClassNames(parsers));
    @Nullable Set<String> parsedTypes=getParsedTypes(classpathConfiguration,parsers);
    Set<? extends Element> cmdlineArgs=getAnnotatedElements(roundEnv,CmdLine.class);
    contributingClassNamesBuilder.addAll(extractEnclosingClassNames(cmdlineArgs));
    Set<? extends Element> positionalArgs=getAnnotatedElements(roundEnv,Positional.class);
    contributingClassNamesBuilder.addAll(extractEnclosingClassNames(positionalArgs));
    ImmutableSet<? extends Element> invalidArgs=Sets.intersection(cmdlineArgs,positionalArgs).immutableCopy();
    if (!invalidArgs.isEmpty()) {
      error("An Arg cannot be annotated with both @CmdLine and @Positional, found bad Arg " + "fields: %s",invalidArgs);
    }
    for (    ArgInfo cmdLineInfo : processAnnotatedArgs(parsedTypes,cmdlineArgs,CmdLine.class)) {
      configBuilder.addCmdLineArg(cmdLineInfo);
    }
    for (    ArgInfo positionalInfo : processAnnotatedArgs(parsedTypes,positionalArgs,Positional.class)) {
      configBuilder.addPositionalInfo(positionalInfo);
    }
    checkPositionalArgsAreLists(roundEnv);
    processParsers(parsers);
    Set<? extends Element> verifiers=getAnnotatedElements(roundEnv,VerifierFor.class);
    contributingClassNamesBuilder.addAll(extractClassNames(verifiers));
    processVerifiers(verifiers);
    if (roundEnv.processingOver()) {
      if (classpathConfiguration != null && (!classpathConfiguration.isEmpty() || !configBuilder.isEmpty())) {
        @Nullable Resource cmdLinePropertiesResource=openCmdLinePropertiesResource(classpathConfiguration);
        if (cmdLinePropertiesResource != null) {
          Writer writer=cmdLinePropertiesResource.getWriter();
          try {
            configBuilder.build(classpathConfiguration).store(writer,"Generated via apt by " + getClass().getName());
          }
  finally {
            closeQuietly(writer);
          }
          writeResourceMapping(contributingClassNamesBuilder.build(),cmdLinePropertiesResource.getResource());
        }
      }
    }
  }
 catch (  RuntimeException e) {
    error("Unexpected error completing annotation processing:\n%s",Throwables.getStackTraceAsString(e));
  }
  return true;
}
