{
  if (!isCheckLinkage) {
    return null;
  }
  Iterable<String> parsersFor=Iterables.transform(parsers,new Function<Element,String>(){
    @Override public String apply(    Element parser){
      TypeMirror parsedType=getTypeArgument(parser.asType(),typeElement(Parser.class));
      if (parsedType == null) {
        error("failed to find a type argument for Parser: %s",parser);
        return null;
      }
      return typeUtils.erasure(parsedType).toString();
    }
  }
);
  if (configuration != null) {
    parsersFor=Iterables.concat(parsersFor,Iterables.filter(Iterables.transform(configuration.parserInfo(),new Function<ParserInfo,String>(){
      @Override @Nullable public String apply(      ParserInfo parserInfo){
        TypeElement typeElement=elementUtils.getTypeElement(parserInfo.parsedType);
        return (typeElement == null) ? null : typeUtils.erasure(typeElement.asType()).toString();
      }
    }
),Predicates.notNull()));
  }
  return ImmutableSet.copyOf(parsersFor);
}
