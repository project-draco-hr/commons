def add_and_parse_file(self, analysis_file, classes_dir):
    sections = {'products': ZincAnalysisCollection.PRODUCTS, 'binary dependencies': ZincAnalysisCollection.BINARY, 'source dependencies': ZincAnalysisCollection.SOURCE, 'external dependencies': ZincAnalysisCollection.EXTERNAL, 'class names': ZincAnalysisCollection.CLASS, }
    depmaps = (self.products, self.binary_deps, self.source_deps, self.external_deps, self.class_names)
    classes_maps = (self.product_classes, self.binary_dep_classes, None, None, None)
    try:
        with open(('%s.relations' % analysis_file), 'r') as zincfile:
            current_section = None
            for line in zincfile:
                if line.startswith('   '):
                    (src, sep, dep) = line.partition(' -> ')
                    src = src[3:]
                    dep = dep.rstrip()
                    if ((sep == '') and (line != '\n')):
                        print ('Syntax error: line is neither a section header nor a dep. "%s"' % line)
                        continue
                    depmaps[current_section][src].add(dep)
                    classes_map = classes_maps[current_section]
                    if (classes_map is not None):
                        cl = self._classfile_to_classname(dep, classes_dir)
                        if (cl is not None):
                            classes_map[src].add(cl)
                elif line.endswith(':\n'):
                    current_section = (ZincAnalysisCollection.DONE if (current_section == self.stop_after) else sections[line[0:(-2)]])
                if (current_section == ZincAnalysisCollection.DONE):
                    return
    except IOError:
        print ('ERROR: analysis file %s not found' % analysis_file)
    except KeyError as e:
        print ('ERROR: unrecognized section: %s' % e)
