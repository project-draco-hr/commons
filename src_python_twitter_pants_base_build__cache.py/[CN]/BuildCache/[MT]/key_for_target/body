def key_for_target(self, target, sources=TARGET_SOURCES, fingerprint_extra=None):
    'Get a key representing the given target name and its sources.\n\n    :target: The target to create a CacheKey for.\n    :sources: A source scope to select from the target for hashing, defaults to TARGET_SOURCES.\n    :fingerprint_extra: A that accepts a sha hash and updates it with extra fingerprint data.\n    '
    if (((not sources) or (not sources.valid(target))) and (not fingerprint_extra)):
        raise ValueError('A target needs to have at least one of sources or a fingerprint_extra function to generate a CacheKey.')
    if (not sources):
        sources = NO_SOURCES
    srcs = sorted(sources.select(target))
    sha = self._sources_hash(srcs)
    if fingerprint_extra:
        fingerprint_extra(sha)
    return self._key_for(target.id, sha, srcs)
