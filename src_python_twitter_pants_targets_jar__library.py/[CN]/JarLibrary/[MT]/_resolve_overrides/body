def _resolve_overrides(self):
    '\n    Resolves override targets, and then excludes and re-includes each of them\n    to create and return a new dependency set.\n    '
    if (not self.override_targets):
        return self._pre_override_dependencies
    result = OrderedSet()
    excludes = set()
    for override_target in self.override_targets:
        for resolved in override_target.resolve():
            excludes.update(self._excludes(resolved))
        result.add(override_target)
    for direct_dep in self._pre_override_dependencies:
        for jar_dep in self._jar_dependencies(direct_dep):
            for exclude in excludes:
                jar_dep.exclude(exclude.org, exclude.name)
        result.add(direct_dep)
    return result
