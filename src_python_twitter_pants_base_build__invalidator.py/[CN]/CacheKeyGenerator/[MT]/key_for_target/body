def key_for_target(self, target, sources=TARGET_SOURCES, fingerprint_extra=None):
    "Get a key representing the given target and its sources.\n\n    A key for a set of targets can be created by calling combine_cache_keys()\n    on the target's individual cache keys.\n\n    :target: The target to create a CacheKey for.\n    :sources: A source scope to select from the target for hashing, defaults to TARGET_SOURCES.\n    :fingerprint_extra: A function that accepts a sha hash and updates it with extra fprint data.\n    "
    if (not fingerprint_extra):
        if ((not sources) or (not sources.valid(target))):
            raise ValueError('A target needs to have at least one of sources or a fingerprint_extra function to generate a CacheKey.')
    if (not sources):
        sources = NO_SOURCES
    sha = hashlib.sha1()
    srcs = sorted(sources.select(target))
    actual_srcs = self._sources_hash(sha, srcs)
    if fingerprint_extra:
        fingerprint_extra(sha)
    sha.update(self._cache_key_gen_version)
    return CacheKey(target.id, sha.hexdigest(), len(actual_srcs), actual_srcs)
