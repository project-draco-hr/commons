def execute_single_compilation(self, vt, cp):
    depfile = self.create_depfile_path(vt.targets)
    self.merge_depfile(vt)
    self.context.log.info(('Compiling targets %s' % str(vt.targets)))
    (sources_by_target, processors, fingerprint) = self.calculate_sources(vt.targets)
    if sources_by_target:
        sources = reduce((lambda all, sources: all.union(sources)), sources_by_target.values())
        if (not sources):
            self.context.log.warn(('Skipping java compile for targets with no sources:\n  %s' % '\n  '.join((str(t) for t in sources_by_target.keys()))))
        else:
            classpath = [jar for (conf, jar) in cp if (conf in self._confs)]
            result = self.compile(classpath, sources, fingerprint, depfile)
            if (result != 0):
                default_message = ('Unexpected error - %s returned %d' % (_JMAKE_MAIN, result))
                raise TaskError(_JMAKE_ERROR_CODES.get(result, default_message))
            self.split_depfile(vt)
        artifact_files = [self._classes_dir, depfile]
        if (processors and (not self.dry_run)):
            processor_info_file = os.path.join(self._classes_dir, _PROCESSOR_INFO_FILE)
            if os.path.exists(processor_info_file):
                with safe_open(processor_info_file, 'r') as f:
                    for processor in f:
                        processors.add(processor.strip())
            self.write_processor_info(processor_info_file, processors)
            artifact_files.append(processor_info_file)
        if (self._artifact_cache and self.context.options.write_to_artifact_cache):
            self.update_artifact_cache(vt, artifact_files)
