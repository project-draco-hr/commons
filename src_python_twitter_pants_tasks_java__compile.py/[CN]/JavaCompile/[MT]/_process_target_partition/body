def _process_target_partition(self, vts, cp):
    sources_by_target = self._compute_sources_by_target(vts.targets)
    sources = list(itertools.chain.from_iterable(sources_by_target.values()))
    fingerprint = Target.identify(vts.targets)
    if (not sources):
        self.context.log.warn(('Skipping java compile for targets with no sources:\n  %s' % vts.targets))
    else:
        self.context.log.info('Operating on a partition containing ', items_to_report_element(vts.cache_key.sources, 'source'), ' in ', items_to_report_element([t.address.reference() for t in vts.targets], 'target'), '.')
        classpath = [jar for (conf, jar) in cp if (conf in self._confs)]
        result = self.compile(classpath, sources, fingerprint, self._depfile)
        if (result != 0):
            default_message = ('Unexpected error - %s returned %d' % (_JMAKE_MAIN, result))
            raise TaskError(_JMAKE_ERROR_CODES.get(result, default_message))
    return sources_by_target
