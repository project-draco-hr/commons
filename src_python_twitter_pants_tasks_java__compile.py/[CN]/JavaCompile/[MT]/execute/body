def execute(self, targets):
    java_targets = filter(JavaCompile._is_java, targets)
    if java_targets:
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._resources_dir))
                cp.insert(0, (conf, self._classes_dir))
            with self.changed(java_targets, invalidate_dependants=True) as changed:
                (sources_by_target, processors, fingerprint) = self.calculate_sources(changed)
                if sources_by_target:
                    sources = reduce((lambda all, sources: all.union(sources)), sources_by_target.values())
                    if (not sources):
                        self.context.log.warn(('Skipping java compile for targets with no sources:\n  %s' % '\n  '.join((str(t) for t in sources_by_target.keys()))))
                    else:
                        classpath = [jar for (conf, jar) in cp if (conf in self._confs)]
                        result = self.compile(classpath, sources, fingerprint)
                        if (result != 0):
                            default_message = ('Unexpected error - %s returned %d' % (_JMAKE_MAIN, result))
                            raise TaskError(_JMAKE_ERROR_CODES.get(result, default_message))
                    if processors:
                        processor_info_file = os.path.join(self._classes_dir, _PROCESSOR_INFO_FILE)
                        if os.path.exists(processor_info_file):
                            with safe_open(processor_info_file, 'r') as f:
                                for processor in f:
                                    processors.add(processor.strip())
                        self.write_processor_info(processor_info_file, processors)
        if self.context.products.isrequired('classes'):
            genmap = self.context.products.get('classes')
            compiler = DependencyCompiler(self._classes_dir, self._dependencies_file)
            for (target, classes_by_source) in compiler.findclasses(targets).items():
                for (source, classes) in classes_by_source.items():
                    genmap.add(source, self._classes_dir, classes)
                    genmap.add(target, self._classes_dir, classes)
            for target in targets:
                if (is_apt(target) and target.processors):
                    basedir = os.path.join(self._resources_dir, target.id)
                    processor_info_file = os.path.join(basedir, _PROCESSOR_INFO_FILE)
                    self.write_processor_info(processor_info_file, target.processors)
                    genmap.add(target, basedir, [_PROCESSOR_INFO_FILE])
