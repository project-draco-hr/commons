def execute(self, targets):
    java_targets = filter(_is_java, targets)
    if java_targets:
        safe_mkdir(self._classes_dir)
        safe_mkdir(self._depfile_dir)
        egroups = self.context.products.get_data('exclusives_groups')
        group_id = egroups.get_group_key_for_target(java_targets[0])
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._resources_dir))
                egroups.update_compatible_classpaths(group_id, [(conf, self._resources_dir)])
                cp.insert(0, (conf, self._classes_dir))
                egroups.update_compatible_classpaths(group_id, [(conf, self._classes_dir)])
        with self.invalidated(java_targets, invalidate_dependents=True, partition_size_hint=self._partition_size_hint) as invalidation_check:
            for vt in invalidation_check.invalid_vts_partitioned:
                exclusives_classpath = egroups.get_classpath_for_group(group_id)
                self.execute_single_compilation(vt, exclusives_classpath)
                if (not self.dry_run):
                    vt.update()
            for vt in invalidation_check.all_vts:
                depfile = self.create_depfile_path(vt.targets)
                if ((not self.dry_run) and os.path.exists(depfile)):
                    deps = Dependencies(self._classes_dir)
                    deps.load(depfile)
                    self._deps.merge(deps)
        if (not self.dry_run):
            if self.context.products.isrequired('classes'):
                genmap = self.context.products.get('classes')
                for (target, classes_by_source) in self._deps.findclasses(java_targets).items():
                    for (source, classes) in classes_by_source.items():
                        genmap.add(source, self._classes_dir, classes)
                        genmap.add(target, self._classes_dir, classes)
                for target in java_targets:
                    if (is_apt(target) and target.processors):
                        basedir = os.path.join(self._resources_dir, Target.maybe_readable_identify([target]))
                        processor_info_file = os.path.join(basedir, _PROCESSOR_INFO_FILE)
                        self.write_processor_info(processor_info_file, target.processors)
                        genmap.add(target, basedir, [_PROCESSOR_INFO_FILE])
            all_processors = set()
            for target in java_targets:
                if (is_apt(target) and target.processors):
                    all_processors.update(target.processors)
            processor_info_file = os.path.join(self._classes_dir, _PROCESSOR_INFO_FILE)
            if os.path.exists(processor_info_file):
                with safe_open(processor_info_file, 'r') as f:
                    for processor in f:
                        all_processors.add(processor.strip())
            self.write_processor_info(processor_info_file, all_processors)
