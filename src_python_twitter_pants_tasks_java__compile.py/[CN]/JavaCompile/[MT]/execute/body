def execute(self, targets):
    java_targets = filter(JavaCompile._is_java, targets)
    if java_targets:
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._output_dir))
            with self.changed(java_targets, invalidate_dependants=True) as changed:
                (bases, sources_by_target, processors, fingerprint) = self.calculate_sources(changed)
                if sources_by_target:
                    classpath = [jar for (conf, jar) in cp if (conf in self._confs)]
                    result = self.compile(classpath, bases, sources_by_target, fingerprint)
                    if (result != 0):
                        raise TaskError(('%s returned %d' % (self._main, result)))
                    if processors:
                        if os.path.exists(self._processor_service_info_file):
                            with safe_open(self._processor_service_info_file, 'r') as f:
                                for processor in f:
                                    processors.add(processor.strip())
                        with safe_open(self._processor_service_info_file, 'w') as f:
                            for processor in processors:
                                f.write(('%s\n' % processor))
        if self.context.products.isrequired('classes'):
            genmap = self.context.products.get('classes')
            classes_by_target = SunCompiler.findclasses(self._output_dir, targets)
            for (target, classes) in classes_by_target.items():
                genmap.add(target, self._output_dir, classes)
