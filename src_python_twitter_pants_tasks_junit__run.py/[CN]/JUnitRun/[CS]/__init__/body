def __init__(self, context):
    super(JUnitRun, self).__init__(context)
    context.products.require_data('exclusives_groups')
    self.confs = context.config.getlist('junit-run', 'confs')
    self._junit_bootstrap_key = 'junit'
    junit_bootstrap_tools = context.config.getlist('junit-run', 'junit-bootstrap-tools', default=[':junit'])
    self._jvm_tool_bootstrapper.register_jvm_tool(self._junit_bootstrap_key, junit_bootstrap_tools)
    self._emma_bootstrap_key = 'emma'
    emma_bootstrap_tools = context.config.getlist('junit-run', 'emma-bootstrap-tools', default=[':emma'])
    self._jvm_tool_bootstrapper.register_jvm_tool(self._emma_bootstrap_key, emma_bootstrap_tools)
    self.jvm_args = context.config.getlist('junit-run', 'jvm_args', default=[])
    if context.options.junit_run_jvmargs:
        self.jvm_args.extend(context.options.junit_run_jvmargs)
    if context.options.junit_run_debug:
        self.jvm_args.extend(context.config.getlist('jvm', 'debug_args'))
    self.tests_to_run = context.options.junit_run_tests
    self.context.products.require('classes')
    self.outdir = (context.options.junit_run_outdir or context.config.get('junit-run', 'workdir'))
    self.batch_size = context.options.junit_run_batch_size
    self.fail_fast = context.options.junit_run_fail_fast
    self.coverage = context.options.junit_run_coverage
    self.coverage_filters = (context.options.junit_run_coverage_patterns or [])
    self.coverage_dir = os.path.join(self.outdir, 'coverage')
    self.coverage_instrument_dir = os.path.join(self.coverage_dir, 'classes')
    self.coverage_metadata_file = os.path.join(self.coverage_dir, 'coverage.em')
    self.coverage_file = os.path.join(self.coverage_dir, 'coverage.ec')
    self.coverage_report_console = context.options.junit_run_coverage_console
    self.coverage_console_file = os.path.join(self.coverage_dir, 'coverage.txt')
    self.coverage_report_xml = context.options.junit_run_coverage_xml
    self.coverage_xml_file = os.path.join(self.coverage_dir, 'coverage.xml')
    self.coverage_report_html_open = context.options.junit_run_coverage_html_open
    self.coverage_report_html = (self.coverage_report_html_open or context.options.junit_run_coverage_html)
    self.coverage = (self.coverage or self.coverage_report_html_open)
    self.coverage_html_file = os.path.join(self.coverage_dir, 'html', 'index.html')
    self.opts = []
    if (context.options.junit_run_xmlreport or context.options.junit_run_suppress_output):
        if self.fail_fast:
            self.opts.append('-fail-fast')
        if context.options.junit_run_xmlreport:
            self.opts.append('-xmlreport')
        self.opts.append('-suppress-output')
        self.opts.append('-outdir')
        self.opts.append(self.outdir)
    if context.options.junit_run_per_test_timer:
        self.opts.append('-per-test-timer')
    if context.options.junit_run_default_parallel:
        self.opts.append('-default-parallel')
    self.opts.append('-parallel-threads')
    self.opts.append(str(context.options.junit_run_parallel_threads))
    if context.options.junit_run_test_shard:
        self.opts.append('-test-shard')
        self.opts.append(context.options.junit_run_test_shard)
    if context.options.junit_run_arg:
        self.opts.extend(context.options.junit_run_arg)
