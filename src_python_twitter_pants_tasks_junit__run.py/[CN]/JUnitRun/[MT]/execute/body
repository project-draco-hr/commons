def execute(self, targets):
    if (not self.context.options.junit_run_skip):
        tests = list((self.normalize_test_classes() if self.test_classes else self.calculate_tests(targets)))
        if tests:
            junit_classpath = self.classpath(profile_classpath(self.junit_profile), confs=self.confs)

            def run_tests(classpath, main, jvmargs=None):
                with safe_args(tests) as all_tests:
                    result = runjava(jvmargs=((jvmargs or []) + self.java_args), classpath=classpath, main=main, args=(self.flags + all_tests))
                    if (result != 0):
                        raise TaskError()
            if self.coverage:
                emma_classpath = profile_classpath(self.emma_profile)

                def instrument_code():
                    safe_mkdir(self.coverage_instrument_dir, clean=True)
                    with safe_args(self.get_coverage_patterns(targets)) as patterns:
                        args = ['instr', '-out', self.coverage_metadata_file, '-d', self.coverage_instrument_dir, '-cp', os.pathsep.join(junit_classpath), '-exit']
                        for pattern in patterns:
                            args.extend(['-filter', pattern])
                        result = runjava(classpath=emma_classpath, main='emma', args=args)
                        if (result != 0):
                            raise TaskError(('Emma instrumentation failed with: %d' % result))

                def generate_reports():
                    args = ['report', '-in', self.coverage_metadata_file, '-in', self.coverage_file, '-exit']
                    source_bases = set((t.target_base for t in targets))
                    for source_base in source_bases:
                        args.extend(['-sp', source_base])
                    sorting = ['-Dreport.sort', '+name,+class,+method,+block']
                    if self.coverage_report_console:
                        args.extend((['-r', 'txt', ('-Dreport.txt.out.file=%s' % self.coverage_console_file)] + sorting))
                    if self.coverage_report_xml:
                        args.extend(['-r', 'xml', ('-Dreport.xml.out.file=%s' % self.coverage_xml_file)])
                    if self.coverage_report_html:
                        args.extend((['-r', 'html', ('-Dreport.html.out.file=%s' % self.coverage_html_file), '-Dreport.out.encoding=UTF-8'] + sorting))
                    result = runjava(classpath=emma_classpath, main='emma', args=args)
                    if (result != 0):
                        raise TaskError(('Failed to emma generate code coverage reports: %d' % result))
                    if self.coverage_report_console:
                        with safe_open(self.coverage_console_file) as console_report:
                            sys.stdout.write(console_report.read())
                    if self.coverage_report_html_open:
                        binary_utils.open(self.coverage_html_file)
                instrument_code()
                try:
                    run_tests((([self.coverage_instrument_dir] + junit_classpath) + emma_classpath), 'com.twitter.common.testing.runner.JUnitConsoleRunner', jvmargs=[('-Demma.coverage.out.file=%s' % self.coverage_file)])
                finally:
                    generate_reports()
            else:
                run_tests(junit_classpath, 'com.twitter.common.testing.runner.JUnitConsoleRunner')
