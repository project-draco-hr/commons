def execute(self, targets):
    if (not self.context.options.junit_run_skip):
        tests = list((self.get_tests_to_run() if self.tests_to_run else self.calculate_tests_from_targets(targets)))
        if tests:
            bootstrapped_cp = self._jvm_tool_bootstrapper.get_jvm_tool_classpath(self._junit_bootstrap_key)
            junit_classpath = self.classpath(bootstrapped_cp, confs=self.confs, exclusives_classpath=self.get_base_classpath_for_target(targets[0]))

            def run_tests(classpath, main, jvm_args=None):
                result = 0
                for batch in self._partition(tests):
                    with binary_util.safe_args(batch) as batch_tests:
                        result += abs(execute_java(classpath=classpath, main=main, jvm_options=((jvm_args or []) + self.jvm_args), args=(self.opts + batch_tests), workunit_factory=self.context.new_workunit, workunit_name='run', workunit_labels=[WorkUnit.TEST]))
                        if ((result != 0) and self.fail_fast):
                            break
                if (result != 0):
                    raise TaskError(('java %s ... exited non-zero (%i)' % (main, result)))
            if self.coverage:
                emma_classpath = self._jvm_tool_bootstrapper.get_jvm_tool_classpath(self._emma_bootstrap_key)

                def instrument_code():
                    safe_mkdir(self.coverage_instrument_dir, clean=True)
                    with binary_util.safe_args(self.get_coverage_patterns(targets)) as patterns:
                        args = ['instr', '-out', self.coverage_metadata_file, '-d', self.coverage_instrument_dir, '-cp', os.pathsep.join(junit_classpath), '-exit']
                        for pattern in patterns:
                            args.extend(['-filter', pattern])
                        main = 'emma'
                        result = execute_java(classpath=emma_classpath, main=main, args=args, workunit_factory=self.context.new_workunit, workunit_name='emma-instrument')
                        if (result != 0):
                            raise TaskError(("java %s ... exited non-zero (%i) 'failed to instrument'" % (main, result)))

                def generate_reports():
                    args = ['report', '-in', self.coverage_metadata_file, '-in', self.coverage_file, '-exit']
                    source_bases = set()

                    def collect_source_base(target):
                        if self.is_coverage_target(target):
                            source_bases.add(target.target_base)
                    for target in self.test_target_candidates(targets):
                        target.walk(collect_source_base)
                    for source_base in source_bases:
                        args.extend(['-sp', source_base])
                    sorting = ['-Dreport.sort', '+name,+class,+method,+block']
                    if self.coverage_report_console:
                        args.extend((['-r', 'txt', ('-Dreport.txt.out.file=%s' % self.coverage_console_file)] + sorting))
                    if self.coverage_report_xml:
                        args.extend(['-r', 'xml', ('-Dreport.xml.out.file=%s' % self.coverage_xml_file)])
                    if self.coverage_report_html:
                        args.extend((['-r', 'html', ('-Dreport.html.out.file=%s' % self.coverage_html_file), '-Dreport.out.encoding=UTF-8'] + sorting))
                    main = 'emma'
                    result = execute_java(classpath=emma_classpath, main=main, args=args, workunit_factory=self.context.new_workunit, workunit_name='emma-report')
                    if (result != 0):
                        raise TaskError(("java %s ... exited non-zero (%i) 'failed to generate code coverage reports'" % (main, result)))
                    if self.coverage_report_console:
                        with safe_open(self.coverage_console_file) as console_report:
                            sys.stdout.write(console_report.read())
                    if self.coverage_report_html_open:
                        binary_util.ui_open(self.coverage_html_file)
                instrument_code()
                try:
                    run_tests((([self.coverage_instrument_dir] + junit_classpath) + emma_classpath), 'com.twitter.common.junit.runner.ConsoleRunner', jvm_args=[('-Demma.coverage.out.file=%s' % self.coverage_file)])
                finally:
                    generate_reports()
            else:
                self.context.lock.release()
                run_tests(junit_classpath, 'com.twitter.common.testing.runner.JUnitConsoleRunner')
