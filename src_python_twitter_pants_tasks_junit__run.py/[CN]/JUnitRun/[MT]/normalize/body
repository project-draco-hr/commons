def normalize(self, classname_or_file, basedir=None):
    components = classname_or_file.split('#', 2)
    classname = components[0]
    methodname = (('#' + components[1]) if (len(components) == 2) else '')
    classes_by_source = self.context.products.get('classes')

    def relpath_toclassname(path):
        classes = classes_by_source.get(path)
        if (not classes):
            self.context.log.warn(('File %s contains no classes' % os.path.join(basedir, path)))
        else:
            for (base, classes) in classes.items():
                for cls in classes:
                    yield JUnitRun.classfile_to_classname(cls)
    if basedir:
        for classname in relpath_toclassname(classname):
            yield (classname + methodname)
    elif os.path.exists(classname):
        basedir = calculate_basedir(classname)
        for classname in relpath_toclassname(os.path.relpath(classname, basedir)):
            yield (classname + methodname)
    else:
        yield (classname + methodname)
