def interpret_test_spec(self, test_spec):
    components = test_spec.split('#', 2)
    classname_or_srcfile = components[0]
    methodname = (('#' + components[1]) if (len(components) == 2) else '')
    classes_by_source = self.context.products.get('classes')
    if os.path.exists(classname_or_srcfile):
        srcfile = classname_or_srcfile
        for cls in self.classnames_from_source_file(srcfile):
            yield (cls + methodname)
    else:
        classname = classname_or_srcfile
        yield (classname + methodname)
