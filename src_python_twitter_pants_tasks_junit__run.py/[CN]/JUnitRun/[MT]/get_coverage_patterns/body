def get_coverage_patterns(self, targets):
    if self.coverage_filters:
        return self.coverage_filters
    else:
        classes_under_test = set()
        classes_by_source = self.context.products.get_data('classes_by_source')

        def add_sources_under_test(tgt):
            if self.is_coverage_target(tgt):
                for source in tgt.sources_relative_to_buildroot():
                    source_products = classes_by_source.get(source)
                    if source_products:
                        for (_, classes) in source_products.rel_paths():
                            classes_under_test.update((JUnitRun.classfile_to_classname(cls) for cls in classes))
        for target in targets:
            target.walk(add_sources_under_test)
        return classes_under_test
