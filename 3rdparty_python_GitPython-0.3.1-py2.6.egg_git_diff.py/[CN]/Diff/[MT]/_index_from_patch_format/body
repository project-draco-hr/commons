@classmethod
def _index_from_patch_format(cls, repo, stream):
    "Create a new DiffIndex from the given text which must be in patch format\n\t\t:param repo: is the repository we are operating on - it is required \n\t\t:param stream: result of 'git diff' as a stream (supporting file protocol)\n\t\t:return: git.DiffIndex "
    text = stream.read()
    index = DiffIndex()
    diff_header = cls.re_header.match
    for diff in ('\n' + text).split('\ndiff --git')[1:]:
        header = diff_header(diff)
        (a_path, b_path, similarity_index, rename_from, rename_to, old_mode, new_mode, new_file_mode, deleted_file_mode, a_blob_id, b_blob_id, b_mode) = header.groups()
        (new_file, deleted_file) = (bool(new_file_mode), bool(deleted_file_mode))
        index.append(Diff(repo, a_path, b_path, a_blob_id, b_blob_id, (old_mode or deleted_file_mode), (new_mode or new_file_mode or b_mode), new_file, deleted_file, rename_from, rename_to, diff[header.end():]))
    return index
