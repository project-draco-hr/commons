def create_binary(self, binary):
    import platform
    safe_mkdir(self.outdir)
    jarmap = self.context.products.get('jars')
    binary_jarname = ('%s.jar' % binary.basename)
    binaryjarpath = os.path.join(self.outdir, binary_jarname)
    self.context.log.info(('creating %s' % os.path.relpath(binaryjarpath, get_buildroot())))
    with open_jar(binaryjarpath, 'w', compression=self.compression, allowZip64=self.zip64) as jar:
        if self.deployjar:

            def add_jars(target):
                generated = jarmap.get(target)
                if generated:
                    for (basedir, jars) in generated.items():
                        for internaljar in jars:
                            self.dump(os.path.join(basedir, internaljar), jar)
            binary.walk(add_jars, (lambda t: t.is_internal))
            for (basedir, externaljar) in self.list_jar_dependencies(binary):
                self.dump(os.path.join(basedir, externaljar), jar)
        manifest = Manifest()
        manifest.addentry(Manifest.MANIFEST_VERSION, '1.0')
        manifest.addentry(Manifest.CREATED_BY, ('python %s pants %s (Twitter, Inc.)' % (platform.python_version(), get_version())))
        main = (binary.main or '*** java -jar not supported, please use -cp and pick a main ***')
        manifest.addentry(Manifest.MAIN_CLASS, main)
        jar.writestr(Manifest.PATH, manifest.contents())
        jarmap.add(binary, self.outdir, [binary_jarname])
