def create_binary(self, binary):
    import platform
    safe_mkdir(self.outdir)
    jarmap = self.context.products.get('jars')
    jardepmap = (self.context.products.get('jar_dependencies') if self.deployjar else None)
    binary_jarname = ('%s.jar' % binary.name)
    binaryjarpath = os.path.join(self.outdir, binary_jarname)
    self.context.log.info(('creating %s' % os.path.relpath(binaryjarpath, get_buildroot())))
    with self.create_jar(binaryjarpath) as jar:
        externaljars = set()

        def add_jars(target):
            generated = jarmap.get(target)
            if generated:
                for (basedir, jars) in generated.items():
                    for internaljar in jars:
                        self.dump(os.path.join(basedir, internaljar), jar)
            if jardepmap:
                resolved = jardepmap.get(target)
                if resolved:
                    for (basedir, jars) in resolved.items():
                        for externaljar in jars:
                            if (externaljar not in externaljars):
                                self.dump(os.path.join(basedir, externaljar), jar)
                                externaljars.add(externaljar)
        binary.walk(add_jars, is_internal)
        manifest = Manifest()
        manifest.addentry(Manifest.MANIFEST_VERSION, '1.0')
        manifest.addentry(Manifest.CREATED_BY, ('python %s pants %s (Twitter, Inc.)' % (platform.python_version(), get_version())))
        manifest.addentry(Manifest.MAIN_CLASS, binary.main)
        jar.writestr(Manifest.PATH, manifest.contents())
        jarmap.add(binary, self.outdir, [binary_jarname])
