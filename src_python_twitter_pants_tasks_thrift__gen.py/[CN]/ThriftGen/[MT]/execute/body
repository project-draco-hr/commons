def execute(self, targets):
    thrifts = [t for t in targets if ThriftGen._is_thrift(t)]
    with self.changed(thrifts, invalidate_dependants=True) as changed_targets:
        safe_mkdir(self.output_dir)

        def forced(lang):
            thrift_targets = set()
            if (lang in self.gen_langs):
                for target in targets:
                    target.walk(thrift_targets.add, ThriftGen._is_thrift)
            return thrift_targets
        thrifts_by_dependee = self.context.dependants(ThriftGen._is_thrift)
        dependees_by_thrift = defaultdict(set)
        for (dependee, thrifts) in thrifts_by_dependee.items():
            for thrift in thrifts:
                dependees_by_thrift[thrift].add(dependee)

        def find_thrift_targets(predicate):
            thrift_targets = set()
            for dependee in thrifts_by_dependee.keys():
                if predicate(dependee):
                    tgts = thrifts_by_dependee.pop(dependee)
                    for tgt in tgts:
                        tgt.walk(thrift_targets.add, ThriftGen._is_thrift)
            return thrift_targets.intersection(set(targets))
        changed = set(changed_targets)
        thrift_targets = (find_thrift_targets(is_jvm) | forced('java'))
        if thrift_targets:
            self._gen_thrift(changed.intersection(thrift_targets), self.gen_java.gen)
            java_target_by_thrift = {}
            for target in thrift_targets:
                java_target_by_thrift[target] = self._create_java_target(target, dependees_by_thrift.get(target, []))
            for (thrift_target, java_target) in java_target_by_thrift.items():
                for dep in thrift_target.internal_dependencies:
                    java_target.update_dependencies([java_target_by_thrift[dep]])
        thrift_targets = (find_thrift_targets(is_python) | forced('python'))
        if thrift_targets:
            self._gen_thrift(changed.intersection(thrift_targets), self.gen_python.gen)
            python_target_by_thrift = {}
            for target in thrift_targets:
                python_target_by_thrift[target] = self._create_python_target(target, dependees_by_thrift.get(target, []))
            for (thrift_target, python_target) in python_target_by_thrift.items():
                for dep in thrift_target.internal_dependencies:
                    python_target.dependencies.add(python_target_by_thrift[dep])
        if thrifts_by_dependee:
            raise TaskError
