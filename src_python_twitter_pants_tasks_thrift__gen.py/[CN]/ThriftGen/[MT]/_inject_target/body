def _inject_target(self, target, dependees, geninfo, namespace, create_target):
    files = []
    has_service = False
    for src in target.sources_relative_to_buildroot():
        (services, genfiles) = calculate_gen(src)
        has_service = (has_service or services)
        files.extend(genfiles.get(namespace, []))
    deps = geninfo.deps[('service' if has_service else 'structs')]
    tgt = create_target(files, deps)
    tgt.id = (target.id + '.thrift_gen')
    tgt.add_labels('synthetic')
    for dependee in dependees:
        if isinstance(dependee, InternalTarget):
            dependee.update_dependencies((tgt,))
        else:
            dependee.dependencies.add(tgt)
    return tgt
