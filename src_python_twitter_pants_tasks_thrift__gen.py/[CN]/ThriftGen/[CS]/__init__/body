def __init__(self, context):
    CodeGen.__init__(self, context)
    output_dir = (context.options.thrift_gen_create_outdir or context.config.get('thrift-gen', 'workdir'))
    self.combined_dir = os.path.join(output_dir, 'combined')
    self.session_dir = os.path.join(output_dir, 'sessions')
    self.strict = context.config.getbool('thrift-gen', 'strict')
    self.verbose = context.config.getbool('thrift-gen', 'verbose')

    def create_geninfo(key):
        gen_info = context.config.getdict('thrift-gen', key)
        gen = gen_info['gen']
        deps = {}
        for (category, depspecs) in gen_info['deps'].items():
            dependencies = OrderedSet()
            deps[category] = dependencies
            for depspec in depspecs:
                dependencies.update(context.resolve(depspec))
        return self.GenInfo(gen, deps)
    self.gen_java = create_geninfo('java')
    self.gen_python = create_geninfo('python')
    self.gen_langs = set(context.options.thrift_gen_langs)
    for lang in ('java', 'python'):
        if self.context.products.isrequired(lang):
            self.gen_langs.add(lang)
    self.thrift_binary = select_thrift_binary(context.config, version=context.options.thrift_version)
