def deadline(closure, timeout=Amount(150, Time.MILLISECONDS), daemon=False, propagate=False):
    'Run a closure with a timeout, raising an exception if the timeout is exceeded.\n\n    args:\n      closure   - function to be run (e.g. functools.partial, or lambda)\n    kwargs:\n      timeout   - in seconds, or Amount of Time, [default: Amount(150, Time.MILLISECONDS]\n      daemon    - booleanish indicating whether to daemonize the thread used to run the closure\n                  (otherwise, a timed-out closure can potentially exist beyond the life of the\n                  calling thread) [default: False]\n      propagate - booleanish indicating whether to re-raise exceptions thrown by the closure\n                  [default: False]\n  '
    if isinstance(timeout, Compatibility.numeric):
        pass
    elif (isinstance(timeout, Amount) and isinstance(timeout.unit(), Time)):
        timeout = timeout.as_(Time.SECONDS)
    else:
        raise ValueError('timeout must be either numeric or Amount of Time.')
    q = Queue(maxsize=1)


    class AnonymousThread(Thread):

        def __init__(self):
            super(AnonymousThread, self).__init__()
            self.daemon = bool(daemon)

        def run(self):
            try:
                result = closure()
            except Exception as result:
                if (not propagate):
                    raise result
            q.put(result)
    AnonymousThread().start()
    try:
        result = q.get(timeout=timeout)
    except Empty:
        raise Timeout('Timeout exceeded!')
    else:
        if (propagate and isinstance(result, Exception)):
            raise result
        return result
