def generate_project(self, project):

    def linked_folder_id(path):
        return path.replace(os.path.sep, '.')

    def base_path(source_set):
        return os.path.join(source_set.root_dir, source_set.source_base)
    source_bases = {}
    for source_set in project.sources:
        source_bases[base_path(source_set)] = linked_folder_id(source_set.source_base)
    if project.has_python:
        for source_set in project.py_sources:
            source_bases[base_path(source_set)] = linked_folder_id(source_set.source_base)
        for source_set in project.py_libs:
            source_bases[base_path(source_set)] = linked_folder_id(source_set.source_base)

    def create_source_template(base, includes=None, excludes=None):
        return TemplateData(base=source_bases[base], includes=(includes or []), excludes=(excludes or []))

    def create_sourcepath(base, sources):

        def normalize_path_pattern(path):
            return (('%s/' % path) if (not path.endswith('/')) else path)
        includes = [normalize_path_pattern(src_set.path) for src_set in sources if src_set.path]
        excludes = []
        for source_set in sources:
            excludes.extend((normalize_path_pattern(exclude) for exclude in source_set.excludes))
        return create_source_template(base, includes, excludes)
    pythonpaths = []
    if project.has_python:
        for source_set in project.py_sources:
            pythonpaths.append(create_source_template(base_path(source_set)))
        for source_set in project.py_libs:
            lib_path = (source_set.path if source_set.path.endswith('.egg') else ('%s/' % source_set.path))
            pythonpaths.append(create_source_template(base_path(source_set), includes=[lib_path]))
    configured_project = TemplateData(name=self.project_name, has_python=project.has_python, has_scala=(project.has_scala and (not project.skip_scala)), source_bases=source_bases.items(), pythonpaths=pythonpaths, debug_port=project.debug_port)
    outdir = os.path.abspath(os.path.join(self.work_dir, 'bin'))
    safe_mkdir(outdir)
    source_sets = defaultdict(OrderedSet)
    for source_set in project.sources:
        source_sets[base_path(source_set)].add(source_set)
    sourcepaths = [create_sourcepath(base, sources) for (base, sources) in source_sets.items()]
    libs = []

    def add_jarlibs(classpath_entries):
        for classpath_entry in classpath_entries:
            jar = classpath_entry.jar
            source_jar = classpath_entry.source_jar
            libs.append((os.path.relpath(jar, self.cwd), (os.path.relpath(source_jar, self.cwd) if source_jar else None)))
    add_jarlibs(project.internal_jars)
    add_jarlibs(project.external_jars)
    configured_classpath = TemplateData(sourcepaths=sourcepaths, has_tests=project.has_tests, libs=libs, has_scala=project.has_scala, outdir=os.path.relpath(outdir, get_buildroot()))
    with safe_open(self.project_filename, 'w') as output:
        Generator(pkgutil.get_data(__name__, self.project_template), project=configured_project).write(output)
    with safe_open(self.classpath_filename, 'w') as output:
        Generator(pkgutil.get_data(__name__, self.classpath_template), classpath=configured_classpath).write(output)
    debug_filename = os.path.join(self.work_dir, ('Debug on port %d.launch' % project.debug_port))
    with safe_open(debug_filename, 'w') as output:
        Generator(pkgutil.get_data(__name__, self.debug_template), project=configured_project).write(output)
    for resource in _SETTINGS:
        with safe_open(os.path.join(self.cwd, '.settings', resource), 'w') as prefs:
            prefs.write(pkgutil.get_data(__name__, os.path.join('eclipse', 'files', resource)))
    factorypath = TemplateData(project_name=self.project_name, jarpaths=libs)
    with open(self.apt_filename, 'w') as output:
        Generator(pkgutil.get_data(__name__, self.apt_template), factorypath=factorypath).write(output)
    if project.has_python:
        with safe_open(self.pydev_filename, 'w') as output:
            Generator(pkgutil.get_data(__name__, self.pydev_template), project=configured_project).write(output)
    elif os.path.exists(self.pydev_filename):
        os.remove(self.pydev_filename)
    print ('\nGenerated project at %s%s' % (self.work_dir, os.sep))
