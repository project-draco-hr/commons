def __init__(self, run_tracker, root_dir, parser, argv):
    Command.__init__(self, run_tracker, root_dir, parser, argv)
    self.target = None
    self.extra_targets = []
    self.config = Config.load()
    self.interpreter_cache = PythonInterpreterCache(self.config, logger=self.debug)
    self.interpreter_cache.setup()
    interpreters = self.interpreter_cache.select_interpreter(list(self.interpreter_cache.matches(([self.options.interpreter] if self.options.interpreter else ['']))))
    if (len(interpreters) != 1):
        self.error('Unable to detect suitable interpreter.')
    self.interpreter = interpreters[0]
    for req in self.options.extra_requirements:
        with ParseContext.temp():
            self.extra_targets.append(PythonRequirement(req, use_2to3=True))
    binaries = []
    for k in range(len(self.args)):
        arg = self.args.pop(0)
        if (arg == '--'):
            break

        def not_a_target(debug_msg):
            self.debug(('Not a target, assuming option: %s.' % e))
            self.args.insert(0, arg)
        target = None
        try:
            address = Address.parse(root_dir, arg)
            target = Target.get(address)
            if (target is None):
                not_a_target(debug_msg='Unrecognized target')
                break
        except Exception as e:
            not_a_target(debug_msg=e)
            break
        for resolved in filter((lambda t: t.is_concrete), target.resolve()):
            if isinstance(resolved, PythonBinary):
                binaries.append(resolved)
            else:
                self.extra_targets.append(resolved)
    if (len(binaries) == 0):
        pass
    elif (len(binaries) == 1):
        self.target = binaries[0]
    else:
        self.error(('Can only process 1 binary target, %s contains %d:\n\t%s' % (arg, len(binaries), '\n\t'.join((str(binary.address) for binary in binaries)))))
    if (self.target is None):
        if (not self.extra_targets):
            self.error('No valid target specified!')
        self.target = self.extra_targets.pop(0)
