def __init__(self, run_tracker, root_dir, parser, argv):
    Command.__init__(self, run_tracker, root_dir, parser, argv)
    if (not self.args):
        self.error('A spec argument is required')
    self.target = None
    self.extra_targets = []
    for k in range(len(self.args)):
        arg = self.args.pop(0)
        if (arg == '--'):
            break
        target = None
        try:
            address = Address.parse(root_dir, arg)
            target = Target.get(address)
        except Exception:
            pass
        if (not target):
            break
        binaries = []
        for resolved in filter(is_concrete, target.resolve()):
            if isinstance(resolved, PythonBinary):
                binaries.append(resolved)
            else:
                self.extra_targets.append(resolved)
        if (not binaries):
            pass
        elif (len(binaries) == 1):
            self.target = binaries[0]
            break
        else:
            self.error(('Can only process 1 binary target, %s contains %d:\n\t%s' % (arg, len(binaries), '\n\t'.join((str(binary.address) for binary in binaries)))))
    if (self.target is None):
        if (not self.extra_targets):
            self.error('No valid target specified!')
        self.target = self.extra_targets.pop(0)
