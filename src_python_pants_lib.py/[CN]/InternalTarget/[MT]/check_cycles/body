@classmethod
def check_cycles(cls, internal_target):
    'Validates the given InternalTarget has no circular dependencies.  Raises CycleException if\n    it does.'
    dep_stack = OrderedSet()

    def descend(internal_dep):
        if (internal_dep in dep_stack):
            raise CycleException(dep_stack, internal_dep)
        if hasattr(internal_dep, 'internal_dependencies'):
            dep_stack.add(internal_dep)
            for dep in internal_dep.internal_dependencies:
                descend(dep)
            dep_stack.remove(internal_dep)
    descend(internal_target)
