{
  ++lineNumber;
  line=line.trim();
  if (!line.isEmpty() && !line.startsWith("#")) {
    List<String> parts=Lists.newArrayList(line.split(" "));
    if (parts.size() < 1) {
      throw new ConfigurationException("Invalid line: %s @%d",line,lineNumber);
    }
    String type=parts.remove(0);
    if ("positional".equals(type)) {
      if (parts.size() != 2) {
        throw new ConfigurationException("Invalid positional line: %s @%d",line,lineNumber);
      }
      positionalInfo.add(new ArgInfo(parts.get(0),parts.get(1)));
    }
 else     if ("field".equals(type)) {
      if (parts.size() != 2) {
        throw new ConfigurationException("Invalid field line: %s @%d",line,lineNumber);
      }
      fieldInfoBuilder.add(new ArgInfo(parts.get(0),parts.get(1)));
    }
 else     if ("parser".equals(type)) {
      if (parts.size() != 2) {
        throw new ConfigurationException("Invalid parser line: %s @%d",line,lineNumber);
      }
      parserInfoBuilder.add(new ParserInfo(parts.get(0),parts.get(1)));
    }
 else     if ("verifier".equals(type)) {
      if (parts.size() != 3) {
        throw new ConfigurationException("Invalid verifier line: %s @%d",line,lineNumber);
      }
      verifierInfoBuilder.add(new VerifierInfo(parts.get(0),parts.get(1),parts.get(2)));
    }
 else {
      LOG.warning(String.format("Did not recognize entry type %s for line: %s @%d",type,line,lineNumber));
    }
  }
  return true;
}
