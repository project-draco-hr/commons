@classmethod
def setUpClass(cls):
    super(DepmapTest, cls).setUpClass()

    def create_target(path, name, type, deps=(), **kwargs):
        cls.create_target(path, dedent(("\n          %(type)s(name='%(name)s',\n            dependencies=[%(deps)s],\n            %(extra)s\n          )\n          " % dict(type=type, name=name, deps=','.join((("pants('%s')" % dep) for dep in list(deps))), extra=('' if (not kwargs) else ', '.join((('%s=%r' % (k, v)) for (k, v) in kwargs.items())))))))

    def create_python_binary_target(path, name, entry_point, type, deps=()):
        cls.create_target(path, dedent(("\n          %(type)s(name='%(name)s',\n            entry_point='%(entry_point)s',\n            dependencies=[%(deps)s]\n          )\n          " % dict(type=type, entry_point=entry_point, name=name, deps=','.join((("pants('%s')" % dep) for dep in list(deps)))))))

    def create_jvm_app(path, name, type, binary, deps=()):
        cls.create_target(path, dedent(("\n          %(type)s(name='%(name)s',\n            binary=pants('%(binary)s'),\n            bundles=%(deps)s\n          )\n          " % dict(type=type, name=name, binary=binary, deps=deps))))
    create_target('common/a', 'a', 'dependencies')
    create_target('common/b', 'b', 'jar_library')
    cls.create_target('common/c', dedent("\n      scala_library(name='c',\n        sources=[],\n      )\n    "))
    create_target('common/d', 'd', 'python_library')
    create_python_binary_target('common/e', 'e', 'common.e.entry', 'python_binary')
    create_target('common/f', 'f', 'jvm_binary')
    create_target('common/g', 'g', 'jvm_binary', deps=['common/f:f'])
    create_jvm_app('common/h', 'h', 'jvm_app', 'common/f:f', "bundle().add('common.f')")
    create_jvm_app('common/i', 'i', 'jvm_app', 'common/g:g', "bundle().add('common.g')")
    create_target('overlaps', 'one', 'jvm_binary', deps=['common/h', 'common/i'])
    cls.create_target('overlaps', dedent("\n      scala_library(name='two',\n        dependencies=[pants('overlaps:one')],\n        sources=[],\n      )\n    "))
    cls.create_target('resources/a', dedent("\n      resources(\n        name='a_resources',\n        sources=['a.resource']\n      )\n    "))
    cls.create_target('src/java/a', dedent("\n      java_library(\n        name='a_java',\n        resources=[pants('resources/a:a_resources')]\n      )\n    "))
