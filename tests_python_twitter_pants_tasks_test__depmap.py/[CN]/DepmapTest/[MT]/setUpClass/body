@classmethod
def setUpClass(cls):
    super(DepmapTest, cls).setUpClass()

    def create_target(path, name, type, deps=()):
        cls.create_target(path, dedent(("\n          %(type)s(name='%(name)s',\n            dependencies=[%(deps)s]\n          )\n          " % dict(type=type, name=name, deps=','.join((("pants('%s')" % dep) for dep in list(deps)))))))

    def create_jvm_app(path, name, type, binary, deps=()):
        cls.create_target(path, dedent(("\n          %(type)s(name='%(name)s',\n            binary=pants('%(binary)s'),\n            bundles=%(deps)s\n          )\n          " % dict(type=type, name=name, binary=binary, deps=deps))))
    create_target('common/a', 'a', 'dependencies')
    create_target('common/b', 'b', 'jar_library')
    create_target('common/c', 'c', 'scala_library')
    create_target('common/d', 'd', 'python_library')
    create_target('common/e', 'e', 'python_binary')
    create_target('common/f', 'f', 'jvm_binary')
    create_target('common/g', 'g', 'jvm_binary', deps=['common/f:f'])
    create_jvm_app('common/h', 'h', 'jvm_app', 'common/f:f', "bundle().add('common.f')")
    create_jvm_app('common/i', 'i', 'jvm_app', 'common/g:g', "bundle().add('common.g')")
    create_target('overlaps', 'one', 'jvm_binary', deps=['common/h', 'common/i'])
    create_target('overlaps', 'two', 'scala_library', deps=['overlaps:one'])
