def test(self):
    self.assertEqual(set(), self.git.changed_files())
    self.assertEqual(set(['README']), self.git.changed_files(from_commit='HEAD^'))
    tip_sha = self.git.commit_id
    self.assertTrue(tip_sha)
    self.assertTrue((tip_sha in self.git.changelog()))
    self.assertTrue(self.git.tag_name.startswith('first-'), msg='un-annotated tags should be found')
    self.assertEqual('master', self.git.branch_name)

    def edit_readme():
        with open(self.readme_file, 'a') as readme:
            readme.write('More data.')
    edit_readme()
    with open(os.path.join(self.worktree, 'INSTALL'), 'w') as untracked:
        untracked.write('make install')
    self.assertEqual(set(['README']), self.git.changed_files())
    self.assertEqual(set(['README', 'INSTALL']), self.git.changed_files(include_untracked=True))
    try:
        self.git.commit('API Changes.')
    except Scm.RemoteException:
        with environment_as(GIT_DIR=self.gitdir, GIT_WORK_TREE=self.worktree):
            subprocess.check_call(['git', 'reset', '--hard', 'depot/master'])
        self.git.refresh()
        edit_readme()
    self.git.commit('API \'"\' " Changes.')
    self.git.tag('second', message='Tagged \' " Changes')
    with temporary_dir() as clone:
        with pushd(clone):
            self.init_repo('origin', self.origin)
            subprocess.check_call(['git', 'pull', '--tags', 'origin', 'master:master'])
            with open(os.path.realpath('README')) as readme:
                self.assertEqual('--More data.', readme.read())
            git = Git()
            with safe_open(os.path.realpath('CHANGES'), 'w') as changes:
                changes.write('none')
            subprocess.check_call(['git', 'add', 'CHANGES'])
            self.assertEqual(set(['README', 'CHANGES']), git.changed_files(from_commit='first'))
            self.assertEqual('master', git.branch_name)
            self.assertEqual('second', git.tag_name, msg='annotated tags should be found')
