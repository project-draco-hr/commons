def build_egg(self):
    gen_root = os.path.join(self.chroot.path(), self.codegen_root)
    path = gen_root
    package = ''
    for module_name in self.module.split('.'):
        path = os.path.join(path, module_name)
        if (package == ''):
            package = module_name
        else:
            package = ((package + '.') + module_name)
        os.mkdir(path)
        with open(os.path.join(path, '__init__.py'), 'w') as f:
            if (package != self.module):
                f.write("__import__('pkg_resources').declare_namespace(__name__)")
                self.created_namespace_packages.add(package)
        self.created_packages.add(package)
    self.run_antlrs(path)

    def dump_setup_py(packages, namespace_packages):
        boilerplate = '\nfrom setuptools import setup\n\nsetup(name        = "%(target_name)s",\n      version     = "dev",\n      description = "autogenerated ANTLR parsers for %(target_name)s",\n      package_dir = { "": "." },\n      packages    = %(packages)s,\n      namespace_packages = %(namespace_packages)s)\n'
        boilerplate = (boilerplate % {'target_name': self.target.name, 'packages': repr(packages), 'namespace_packages': repr(list(namespace_packages)), })
        self.chroot.write(boilerplate, os.path.join(self.codegen_root, 'setup.py'))
    dump_setup_py(self.created_packages, self.created_namespace_packages)
    egg_root = os.path.join(self.chroot.path(), self.codegen_root)
    egg_path = EggBuilder().build_egg(egg_root, self.target)
    return egg_path
