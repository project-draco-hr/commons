@staticmethod
def filter(pythons):
    '\n      Given a map of python interpreters in the format provided by PythonInterpreter.find(),\n      filter out duplicate versions and versions we would prefer not to use.\n\n      Returns a map in the same format as find.\n    '
    good = []
    (MAJOR, MINOR, SUBMINOR) = range(3)

    def version_filter(version):
        return (((version[MAJOR] == 2) and (version[MINOR] >= 6)) or ((version[MAJOR] == 3) and (version[MINOR] >= 2)))
    all_versions = set((interpreter.identity().version for interpreter in pythons))
    good_versions = filter(version_filter, all_versions)
    for version in good_versions:
        candidates = [interp for interp in pythons if (interp.identity().version == version)]
        candidates.sort(key=(lambda interp: os.path.getmtime(interp.binary())), reverse=True)
        good.append(candidates.pop(0))
    return good
