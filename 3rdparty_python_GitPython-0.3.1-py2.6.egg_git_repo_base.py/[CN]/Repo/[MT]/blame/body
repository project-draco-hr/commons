def blame(self, rev, file):
    'The blame information for the given file at the given revision.\n\n\t\t:parm rev: revision specifier, see git-rev-parse for viable options.\n\t\t:return:\n\t\t\tlist: [git.Commit, list: [<line>]]\n\t\t\tA list of tuples associating a Commit object with a list of lines that \n\t\t\tchanged within the given commit. The Commit objects will be given in order\n\t\t\tof appearance.'
    data = self.git.blame(rev, '--', file, p=True)
    commits = dict()
    blames = list()
    info = None
    for line in data.splitlines(False):
        parts = self.re_whitespace.split(line, 1)
        firstpart = parts[0]
        if self.re_hexsha_only.search(firstpart):
            digits = parts[(-1)].split(' ')
            if (len(digits) == 3):
                info = {'id': firstpart, }
                blames.append([None, []])
        else:
            m = self.re_author_committer_start.search(firstpart)
            if m:
                role = m.group(0)
                if firstpart.endswith('-mail'):
                    info[('%s_email' % role)] = parts[(-1)]
                elif firstpart.endswith('-time'):
                    info[('%s_date' % role)] = int(parts[(-1)])
                elif (role == firstpart):
                    info[role] = parts[(-1)]
            elif firstpart.startswith('filename'):
                info['filename'] = parts[(-1)]
            elif firstpart.startswith('summary'):
                info['summary'] = parts[(-1)]
            elif (firstpart == ''):
                if info:
                    sha = info['id']
                    c = commits.get(sha)
                    if (c is None):
                        c = Commit(self, hex_to_bin(sha), author=Actor._from_string(((info['author'] + ' ') + info['author_email'])), authored_date=info['author_date'], committer=Actor._from_string(((info['committer'] + ' ') + info['committer_email'])), committed_date=info['committer_date'], message=info['summary'])
                        commits[sha] = c
                    m = self.re_tab_full_line.search(line)
                    (text,) = m.groups()
                    blames[(-1)][0] = c
                    blames[(-1)][1].append(text)
                    info = None
    return blames
