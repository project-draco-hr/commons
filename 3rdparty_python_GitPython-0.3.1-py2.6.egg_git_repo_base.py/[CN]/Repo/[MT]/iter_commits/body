def iter_commits(self, rev=None, paths='', **kwargs):
    'A list of Commit objects representing the history of a given ref/commit\n\n\t\t:parm rev:\n\t\t\trevision specifier, see git-rev-parse for viable options.\n\t\t\tIf None, the active branch will be used.\n\n\t\t:parm paths:\n\t\t\tis an optional path or a list of paths to limit the returned commits to\n\t\t\tCommits that do not contain that path or the paths will not be returned.\n\t\t\n\t\t:parm kwargs:\n\t\t\tArguments to be passed to git-rev-list - common ones are \n\t\t\tmax_count and skip\n\n\t\t:note: to receive only commits between two named revisions, use the \n\t\t\t"revA..revB" revision specifier\n\n\t\t:return ``git.Commit[]``'
    if (rev is None):
        rev = self.head.commit
    return Commit.iter_items(self, rev, paths, **kwargs)
