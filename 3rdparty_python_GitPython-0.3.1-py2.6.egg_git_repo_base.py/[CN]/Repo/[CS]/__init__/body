def __init__(self, path=None, odbt=DefaultDBType):
    'Create a new Repo instance\n\n\t\t:param path: is the path to either the root git directory or the bare git repo::\n\n\t\t\trepo = Repo("/Users/mtrier/Development/git-python")\n\t\t\trepo = Repo("/Users/mtrier/Development/git-python.git")\n\t\t\trepo = Repo("~/Development/git-python.git")\n\t\t\trepo = Repo("$REPOSITORIES/Development/git-python.git")\n\t\t\n\t\t:param odbt: Object DataBase type - a type which is constructed by providing \n\t\t\tthe directory containing the database objects, i.e. .git/objects. It will\n\t\t\tbe used to access all object data\n\t\t:raise InvalidGitRepositoryError:\n\t\t:raise NoSuchPathError:\n\t\t:return: git.Repo '
    epath = os.path.abspath(os.path.expandvars(os.path.expanduser((path or os.getcwd()))))
    if (not os.path.exists(epath)):
        raise NoSuchPathError(epath)
    self.working_dir = None
    self._working_tree_dir = None
    self.git_dir = None
    curpath = epath
    while curpath:
        if is_git_dir(curpath):
            self.git_dir = curpath
            self._working_tree_dir = os.path.dirname(curpath)
            break
        gitpath = join(curpath, '.git')
        if is_git_dir(gitpath):
            self.git_dir = gitpath
            self._working_tree_dir = curpath
            break
        (curpath, dummy) = os.path.split(curpath)
        if (not dummy):
            break
    if (self.git_dir is None):
        raise InvalidGitRepositoryError(epath)
    self._bare = False
    try:
        self._bare = self.config_reader('repository').getboolean('core', 'bare')
    except Exception:
        pass
    if self._bare:
        self._working_tree_dir = None
    self.working_dir = (self._working_tree_dir or self.git_dir)
    self.git = Git(self.working_dir)
    args = [join(self.git_dir, 'objects')]
    if issubclass(odbt, GitCmdObjectDB):
        args.append(self.git)
    self.odb = odbt(*args)
