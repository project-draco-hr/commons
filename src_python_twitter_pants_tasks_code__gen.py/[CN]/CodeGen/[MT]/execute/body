def execute(self, targets):
    gentargets = [t for t in targets if self.is_gentarget(t)]
    capabilities = self.genlangs()
    gentargets_by_dependee = self.context.dependents(on_predicate=self.is_gentarget, from_predicate=(lambda t: (not self.is_gentarget(t))))
    dependees_by_gentarget = defaultdict(set)
    for (dependee, tgts) in gentargets_by_dependee.items():
        for gentarget in tgts:
            dependees_by_gentarget[gentarget].add(dependee)

    def find_gentargets(predicate):
        tgts = set()
        for dependee in gentargets_by_dependee.keys():
            if predicate(dependee):
                for tgt in gentargets_by_dependee.pop(dependee):
                    tgt.walk(tgts.add, self.is_gentarget)
        return tgts.intersection(set(gentargets))
    gentargets_bylang = {}
    for (lang, predicate) in capabilities.items():
        gentargets_bylang[lang] = (gentargets if self.is_forced(lang) else find_gentargets(predicate))
    if gentargets_by_dependee:
        self.context.log.warn(('Left with unexpected unconsumed gen targets:\n\t%s' % '\n\t'.join((('%s -> %s' % (dependee, gentargets)) for (dependee, gentargets) in gentargets_by_dependee.items()))))
    if gentargets:
        self.prepare_gen(gentargets)
        with self.invalidated(gentargets, invalidate_dependents=True) as invalidation_check:
            for vts in invalidation_check.invalid_vts_partitioned:
                invalid_targets = set(vts.targets)
                for (lang, tgts) in gentargets_bylang.items():
                    invalid_lang_tgts = invalid_targets.intersection(tgts)
                    if invalid_lang_tgts:
                        self.genlang(lang, invalid_lang_tgts)
        invalid_vts_by_target = dict([(vt.target, vt) for vt in invalidation_check.invalid_vts])
        vts_artifactfiles_pairs = []
        write_to_artifact_cache = (self.artifact_cache_writes_enabled() if invalid_vts_by_target else False)
        for (lang, tgts) in gentargets_bylang.items():
            if tgts:
                langtarget_by_gentarget = {}
                for target in tgts:
                    syn_target = self.createtarget(lang, target, dependees_by_gentarget.get(target, []))
                    syn_target.derived_from = target
                    syn_target.add_labels('synthetic')
                    if (write_to_artifact_cache and (target in invalid_vts_by_target)):
                        generated_sources = list(syn_target.sources_absolute_paths())
                        vts_artifactfiles_pairs.append((invalid_vts_by_target[target], generated_sources))
                    langtarget_by_gentarget[target] = syn_target
                genmap = self.context.products.get(lang)
                for (gentarget, langtarget) in langtarget_by_gentarget.items():
                    genmap.add(gentarget, get_buildroot(), [langtarget])
                    for dep in self.getdependencies(gentarget):
                        if self.is_gentarget(dep):
                            self.updatedependencies(langtarget, langtarget_by_gentarget[dep])
                        else:
                            self.updatedependencies(langtarget, dep)
        if write_to_artifact_cache:
            self.update_artifact_cache(vts_artifactfiles_pairs)
