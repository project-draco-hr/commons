def http_request(self, path, fields=None, files=None, headers=None, method=None):
    '\n    Executes an HTTP request against the specified path, storing any cookies that\n    were set.  By default, if there are no field or files a GET is issued, otherwise a POST is used.\n    The HTTP verb can be customized by specifying method.\n    '
    if fields:
        debug_fields = fields.copy()
    else:
        debug_fields = {}
    if ('password' in debug_fields):
        debug_fields['password'] = '**************'
    url = self._make_url(path)
    self.debug(('HTTP request to %s: %s' % (url, debug_fields)))
    headers = (headers or {})
    if (fields or files):
        (content_type, body) = self._encode_multipart_formdata(fields, files)
        headers.update({'Content-Type': content_type, 'Content-Length': str(len(body)), })
        r = urllib2.Request(url, body, headers)
    else:
        r = urllib2.Request(url, headers=headers)
    if method:
        r.get_method = (lambda : method)
    try:
        return urllib2.urlopen(r, timeout=self.timeout).read()
    except urllib2.URLError as e:
        try:
            self.debug(e.read())
        except AttributeError:
            pass
        self.die(('Unable to access %s. The host path may be invalid\n%s' % (url, e)))
    except urllib2.HTTPError as e:
        return self.die(('Unable to access %s (%s). The host path may be invalid\n%s' % (url, e.code, e.read())))
