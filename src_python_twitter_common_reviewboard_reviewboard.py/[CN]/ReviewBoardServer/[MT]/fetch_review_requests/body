def fetch_review_requests(self, time_added_from=None, time_added_to=None, last_updated_from=None, last_updated_to=None, from_user=None, to_groups=None, to_user_groups=None, to_users=None, to_users_directly=None, ship_it=None, status=None, start=0, max_results=25):
    "\n    Returns a list of review requests that meet specified criteria.\n    If max_results is negative, then ignores 'start' and returns all the matched review requests.\n    "
    url = '/api/review-requests/'
    params = [('time-added-from', time_added_from), ('time-added-to', time_added_to), ('last-updated-from', last_updated_from), ('last-updated-to', last_updated_to), ('from-user', from_user), ('to-groups', to_groups), ('to-user-groups', to_user_groups), ('to-users', to_users), ('to-users-directly', to_users_directly), ('ship-it', ship_it), ('status', status)]
    qs = '&'.join([(('%s=%s' % p) if (p[1] is not None) else '') for p in params])
    return self._smart_query(('%s?%s' % (url, qs)), 'review_requests', start, max_results)
