{
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.enumVal.get(),is(Optimizations.ALL));
    }
  }
,"enum","ALL");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.stringVal.get(),is("newstring"));
    }
  }
,"string","newstring");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.charVal.get(),is('x'));
    }
  }
,"char","x");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.byteVal.get(),is((byte)10));
    }
  }
,"byte","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.shortVal.get(),is((short)10));
    }
  }
,"short","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.intVal.get(),is(10));
    }
  }
,"int","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.longVal.get(),is(10L));
    }
  }
,"long","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.floatVal.get(),is(10f));
    }
  }
,"float","10.0");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.doubleVal.get(),is(10d));
    }
  }
,"double","10.0");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.bool.get(),is(true));
    }
  }
,"bool","true");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.bool.get(),is(true));
    }
  }
,"bool","");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.bool.get(),is(false));
    }
  }
,"no_bool","");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.bool.get(),is(true));
    }
  }
,"no_bool","false");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.timeAmount.get(),is(Amount.of(100L,Time.SECONDS)));
    }
  }
,"time_amount","100secs");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.dataAmount.get(),is(Amount.of(1L,Data.Gb)));
    }
  }
,"data_amount","1Gb");
}
