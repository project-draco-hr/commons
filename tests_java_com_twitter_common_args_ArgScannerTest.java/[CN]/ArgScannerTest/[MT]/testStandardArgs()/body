{
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.ENUM_VAL.get(),is(Optimizations.ALL));
    }
  }
,"enum","ALL");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.STRING_VAL.get(),is("newstring"));
    }
  }
,"string","newstring");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.CHAR_VAL.get(),is('x'));
    }
  }
,"char","x");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.BYTE_VAL.get(),is((byte)10));
    }
  }
,"byte","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.SHORT_VAL.get(),is((short)10));
    }
  }
,"short","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.INT_VAL.get(),is(10));
    }
  }
,"int","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.LONG_VAL.get(),is(10L));
    }
  }
,"long","10");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.FLOAT_VAL.get(),is(10f));
    }
  }
,"float","10.0");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.DOUBLE_VAL.get(),is(10d));
    }
  }
,"double","10.0");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.BOOL.get(),is(true));
    }
  }
,"bool","true");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.BOOL.get(),is(true));
    }
  }
,"bool","");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.BOOL.get(),is(false));
    }
  }
,"no_bool","");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.BOOL.get(),is(true));
    }
  }
,"no_bool","false");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.TIME_AMOUNT.get(),is(Amount.of(100L,Time.SECONDS)));
    }
  }
,"time_amount","100secs");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.DATA_AMOUNT.get(),is(Amount.of(1L,Data.Gb)));
    }
  }
,"data_amount","1Gb");
  test(StandardArgs.class,new Command(){
    @Override public void execute(){
      assertThat(StandardArgs.RANGE.get(),is(com.google.common.collect.Range.closed(1,5)));
    }
  }
,"range","1-5");
  resetArgs(StandardArgs.class);
  assertTrue(parse(StandardArgs.class,"1mins","2secs"));
  assertEquals(ImmutableList.builder().add(Amount.of(60L,Time.SECONDS)).add(Amount.of(2L,Time.SECONDS)).build(),StandardArgs.POSITIONAL.get());
}
