def _inject_target(self, target, dependees, geninfo, gen_files_for_source, create_target):
    files = []
    has_service = False
    for source in target.sources_relative_to_buildroot():
        services = calculate_services(source)
        genfiles = gen_files_for_source[source]
        has_service = (has_service or services)
        files.extend(genfiles)
    deps = OrderedSet(geninfo.deps[('service' if has_service else 'structs')])
    deps.update(target.dependencies)
    target_type = _TARGET_TYPE_FOR_LANG[target.language]
    tgt = create_target(files, deps, target_type)
    tgt.derived_from = target
    tgt.add_labels('codegen', 'synthetic')
    for dependee in dependees:
        if isinstance(dependee, InternalTarget):
            dependee.update_dependencies((tgt,))
        else:
            dependee.dependencies.add(tgt)
    return tgt
