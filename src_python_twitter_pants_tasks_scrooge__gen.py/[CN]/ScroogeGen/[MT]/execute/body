def execute(self, targets):
    gentargets_by_dependee = self.context.dependants(on_predicate=self.is_gentarget, from_predicate=(lambda t: (not self.is_gentarget(t))))
    dependees_by_gentarget = defaultdict(set)
    for (dependee, tgts) in gentargets_by_dependee.items():
        for gentarget in tgts:
            dependees_by_gentarget[gentarget].add(dependee)
    partial_cmds = defaultdict(set)
    gentargets = filter(self.is_gentarget, targets)
    for target in gentargets:
        partial_cmd = self.PartialCmd(compiler=self.compiler_for_name[target.compiler], language=target.language, rpc_style=target.rpc_style, namespace_map=(tuple(target.namespace_map.items()) if target.namespace_map else ()))
        partial_cmds[partial_cmd].add(target)
    for partial_cmd in partial_cmds:
        self.profile_classpath(partial_cmd.compiler.profile)
    for (partial_cmd, tgts) in partial_cmds.items():
        gen_files_for_source = self.gen(partial_cmd, tgts)
        outdir = partial_cmd.outdir
        langtarget_by_gentarget = {}
        for target in tgts:
            dependees = dependees_by_gentarget.get(target, [])
            langtarget_by_gentarget[target] = self.createtarget(target, dependees, outdir, gen_files_for_source)
        genmap = self.context.products.get(partial_cmd.language)
        for (gentarget, langtarget) in langtarget_by_gentarget.items():
            genmap.add(gentarget, get_buildroot(), [langtarget])
            for dep in gentarget.internal_dependencies:
                if self.is_gentarget(dep):
                    langtarget.update_dependencies([langtarget_by_gentarget[dep]])
