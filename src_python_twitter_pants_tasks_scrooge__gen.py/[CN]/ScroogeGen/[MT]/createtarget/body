def createtarget(self, gentarget, dependees, outdir, gen_files_for_source):
    assert self.is_gentarget(gentarget)

    def create_target(files, deps, target_type):
        return self.context.add_new_target(outdir, target_type, name=gentarget.id, sources=files, provides=gentarget.provides, dependencies=deps, excludes=gentarget.excludes)

    def create_geninfo(key):
        compiler = self.compiler_for_name[gentarget.compiler]
        gen_info = self.context.config.getdict(compiler.config_section, key, default={'gen': key, 'deps': {'service': [], 'structs': [], }, })
        gen = gen_info['gen']
        deps = dict()
        for (category, depspecs) in gen_info['deps'].items():
            dependencies = OrderedSet()
            deps[category] = dependencies
            for depspec in depspecs:
                dependencies.update(self.context.resolve(depspec))
        return self.GenInfo(gen, deps)
    return self._inject_target(gentarget, dependees, create_geninfo(gentarget.language), gen_files_for_source, create_target)
