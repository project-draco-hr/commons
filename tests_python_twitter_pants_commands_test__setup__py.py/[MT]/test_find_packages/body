def test_find_packages():

    def assert_single_chroot(packages, namespace_packages, resources):
        with yield_chroot(packages, namespace_packages, resources) as chroot:
            (p, n_p, r) = SetupPy.find_packages(chroot)
            assert (p == set((packages + namespace_packages)))
            assert (n_p == set(namespace_packages))
            assert (r == dict(((k, set(v)) for (k, v) in resources.items())))
    assert_single_chroot(['twitter'], [], {})
    assert_single_chroot(['twitter'], ['twitter'], {})
    assert_single_chroot(['twitter'], [], {'twitter': ['blork.dat'], })
    resources = {'twitter': ['README.rst', os.path.join('pants', 'templates', 'ivy.mk'), os.path.join('pants', 'templates', 'maven.mk')], }
    assert_single_chroot(['twitter'], [], resources)
    with yield_chroot(['twitter', 'twitter.pants'], [], resources) as chroot:
        (_, _, r) = SetupPy.find_packages(chroot)
        assert (r == {'twitter': set(['README.rst']), 'twitter.pants': set([os.path.join('templates', 'ivy.mk'), os.path.join('templates', 'maven.mk')]), })
    with yield_chroot(['twitter', 'twitter.util'], [], {'twitter.utilization': ['README.rst'], }) as chroot:
        (_, _, r) = SetupPy.find_packages(chroot)
        assert (r == {'twitter': set(['utilization/README.rst']), })
