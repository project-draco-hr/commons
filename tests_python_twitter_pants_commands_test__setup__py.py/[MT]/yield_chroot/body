@contextmanager
def yield_chroot(packages, namespace_packages, resources):

    def to_path(package):
        return package.replace('.', os.path.sep)
    with temporary_dir() as td:

        def write(package, name, content):
            package_path = os.path.join(td, SetupPy.SOURCE_ROOT, to_path(package))
            safe_mkdir(os.path.dirname(os.path.join(package_path, name)))
            with open(os.path.join(package_path, name), 'w') as fp:
                fp.write(content)
        for package in packages:
            write(package, '__init__.py', '')
        for package in namespace_packages:
            write(package, '__init__.py', '__import__("pkg_resources").declare_namespace(__name__)')
        for (package, resource_list) in resources.items():
            for resource in resource_list:
                write(package, resource, 'asdfasdf')
        chroot_mock = Mock(spec=Chroot)
        chroot_mock.path.return_value = td
        yield chroot_mock
