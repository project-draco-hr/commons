def test_binary_target_injected_into_minified_dependencies_with_provider(self):
    with ParseContext.temp():
        bar = python_library(name='bar', provides=setup_py(name='bar', version='0.0.0').with_binaries(bar_binary=pants(':bar_bin')))
        bar_bin = python_binary(name='bar_bin', entry_point='bar.bin.bar', dependencies=[pants(':bar_bin_dep')])
        bar_bin_dep = python_library(name='bar_bin_dep', provides=setup_py(name='bar_bin_dep', version='0.0.0'))
    assert (SetupPy.minified_dependencies(bar) == OrderedSet([bar_bin, bar_bin_dep]))
    entry_points = dict(SetupPy.iter_entry_points(bar))
    assert (entry_points == {'bar_binary': 'bar.bin.bar', })
    with self.run_execute(bar, recursive=False) as setup_py_command:
        setup_py_command.run_one.assert_called_with(bar)
    with self.run_execute(bar, recursive=True) as setup_py_command:
        setup_py_command.run_one.assert_has_calls([call(bar), call(bar_bin_dep)], any_order=True)
