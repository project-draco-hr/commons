@classmethod
def _from_line(cls, repo, line, fetch_line):
    'Parse information from the given line as returned by git-fetch -v\n\t\tand return a new FetchInfo object representing this information.\n\t\t\n\t\tWe can handle a line as follows\n\t\t"%c %-*s %-*s -> %s%s"\n\t\t\n\t\tWhere c is either \' \', !, +, -, *, or =\n\t\t! means error\n\t\t+ means success forcing update\n\t\t- means a tag was updated\n\t\t* means birth of new branch or tag\n\t\t= means the head was up to date ( and not moved )\n\t\t\' \' means a fast-forward\n\t\t\n\t\tfetch line is the corresponding line from FETCH_HEAD, like\n\t\tacb0fa8b94ef421ad60c8507b634759a472cd56c\tnot-for-merge\tbranch \'0.1.7RC\' of /tmp/tmpya0vairemote_repo'
    match = cls.re_fetch_result.match(line)
    if (match is None):
        raise ValueError(('Failed to parse line: %r' % line))
    (control_character, operation, local_remote_ref, remote_local_ref, note) = match.groups()
    try:
        (new_hex_sha, fetch_operation, fetch_note) = fetch_line.split('\t')
        (ref_type_name, fetch_note) = fetch_note.split(' ', 1)
    except ValueError:
        raise ValueError(('Failed to parse FETCH__HEAD line: %r' % fetch_line))
    ref_type = None
    if (remote_local_ref == 'FETCH_HEAD'):
        ref_type = SymbolicReference
    elif (ref_type_name == 'branch'):
        ref_type = RemoteReference
    elif (ref_type_name == 'tag'):
        ref_type = TagReference
    else:
        raise TypeError(('Cannot handle reference type: %r' % ref_type_name))
    if (ref_type is SymbolicReference):
        remote_local_ref = ref_type(repo, 'FETCH_HEAD')
    else:
        remote_local_ref = Reference.from_path(repo, join_path(ref_type._common_path_default, remote_local_ref.strip()))
    note = ((note and note.strip()) or '')
    flags = 0
    try:
        flags |= cls._flag_map[control_character]
    except KeyError:
        raise ValueError(('Control character %r unknown as parsed from line %r' % (control_character, line)))
    old_commit = None
    if isinstance(remote_local_ref, Reference):
        if ('rejected' in operation):
            flags |= cls.REJECTED
        if ('new tag' in operation):
            flags |= cls.NEW_TAG
        if ('new branch' in operation):
            flags |= cls.NEW_HEAD
        if (('...' in operation) or ('..' in operation)):
            split_token = '...'
            if (control_character == ' '):
                split_token = split_token[:(-1)]
            old_commit = repo.rev_parse(operation.split(split_token)[0])
    return cls(remote_local_ref, flags, note, old_commit)
