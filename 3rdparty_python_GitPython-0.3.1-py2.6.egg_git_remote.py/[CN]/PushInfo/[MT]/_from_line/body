@classmethod
def _from_line(cls, remote, line):
    'Create a new PushInfo instance as parsed from line which is expected to be like\n\t\t\trefs/heads/master:refs/heads/master 05d2687..1d0568e'
    (control_character, from_to, summary) = line.split('\t', 3)
    flags = 0
    try:
        flags |= cls._flag_map[control_character]
    except KeyError:
        raise ValueError(('Control Character %r unknown as parsed from line %r' % (control_character, line)))
    (from_ref_string, to_ref_string) = from_to.split(':')
    if (flags & cls.DELETED):
        from_ref = None
    else:
        from_ref = Reference.from_path(remote.repo, from_ref_string)
    old_commit = None
    if summary.startswith('['):
        if ('[rejected]' in summary):
            flags |= cls.REJECTED
        elif ('[remote rejected]' in summary):
            flags |= cls.REMOTE_REJECTED
        elif ('[remote failure]' in summary):
            flags |= cls.REMOTE_FAILURE
        elif ('[no match]' in summary):
            flags |= cls.ERROR
        elif ('[new tag]' in summary):
            flags |= cls.NEW_TAG
        elif ('[new branch]' in summary):
            flags |= cls.NEW_HEAD
    else:
        split_token = '...'
        if (control_character == ' '):
            split_token = '..'
        (old_sha, new_sha) = summary.split(' ')[0].split(split_token)
        old_commit = remote.repo.commit(old_sha)
    return PushInfo(flags, from_ref, to_ref_string, remote, old_commit, summary)
