def execute(self, targets):
    safe_mkdir(self._output_dir)

    def jar_targets(predicate):
        return filter(predicate, (targets if self.transitive else self.context.target_roots))

    def add_genjar(typename, target, name):
        if self.context.products.isrequired(typename):
            self.context.products.get(typename).add(target, self._output_dir).append(name)
    if self.jar_classes:
        self.jar(jar_targets(is_jvm), self.context.products.get('classes'), functools.partial(add_genjar, 'jars'))
    if self.jar_idl:
        self.idljar(jar_targets(is_idl), functools.partial(add_genjar, 'idl_jars'))
    if self.jar_sources:
        self.sourcejar(jar_targets(is_jvm), functools.partial(add_genjar, 'source_jars'))
    if self.jar_javadoc:
        self.javadocjar(jar_targets(is_java), self.context.products.get('javadoc'), functools.partial(add_genjar, 'javadoc_jars'))
