def _jar(self, jvm_targets, add_genjar):
    classes_by_target = self.context.products.get_data('classes_by_target')
    resources_by_target = self.context.products.get_data('resources_by_target')
    for target in jvm_targets:
        target_classes = classes_by_target.get(target)
        target_resources = resources_by_target.get(target)
        if (target_classes or target_resources or target.has_resources):
            jar_name = ('%s.jar' % jarname(target))
            add_genjar(target, jar_name)
            jar_path = os.path.join(self._output_dir, jar_name)
            with self.create_jar(target, jar_path) as jarfile:

                def add_to_jar(target_products):
                    if target_products:
                        for (root, products) in target_products.rel_paths():
                            for prod in products:
                                jarfile.write(os.path.join(root, prod), prod)
                add_to_jar(target_classes)
                add_to_jar(target_resources)
