def __init__(self, context, select_targets, transitive, main):
    '\n      :select_targets A predicate that selects the targets to create a trimmed cmdline args resource\n                      file for.\n      :transitive     If True, splits cmdline args resource info for all classes in the transitive\n                      closure of classes depended on by the selected targets; otherwise, just\n                      selects cmdline info for the classes owned by the selected targets directly.\n      :main           True if the split cmdline arg resource info is for a main; False otherwise.\n    '
    Task.__init__(self, context)
    self.select_targets = select_targets
    self.transitive = transitive
    self.resource_index = (0 if main else 1)
    context.products.require('jars', self.select_targets)
    context.products.require_data('classes_by_target')
    default_args_resource_mapper = [os.path.join(self.get_workdir(key='java_workdir', workdir='javac'), 'classes')]
    self.classdirs = context.config.getlist('args-resource-mapper', 'classdirs', default=default_args_resource_mapper)
    self.include_all = context.options.args_resource_mapper_include_all
