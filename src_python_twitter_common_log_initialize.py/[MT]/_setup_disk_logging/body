def _setup_disk_logging(filebase):
    handlers = []

    def gen_filter(level):
        return GenericFilter((lambda record_level: ((record_level == level) and (level >= LogOptions.disk_log_level()))))

    def gen_link_filename(filebase, level):
        return ('%(filebase)s.%(level)s' % {'filebase': filebase, 'level': level, })
    hostname = gethostname()
    username = getpass.getuser()
    pid = os.getpid()
    datestring = time.strftime('%Y%m%d-%H%M%S', time.localtime())

    def gen_verbose_filename(filebase, level):
        return ('%(filebase)s.%(hostname)s.%(user)s.log.%(level)s.%(date)s.%(pid)s' % {'filebase': filebase, 'hostname': hostname, 'user': username, 'level': level, 'date': datestring, 'pid': pid, })
    logroot = LogOptions.log_dir()
    for (filter_type, filter_name) in _FILTER_TYPES.items():
        formatter = ProxyFormatter(LogOptions.disk_log_scheme)
        filter = gen_filter(filter_type)
        full_filebase = os.path.join(logroot, filebase)
        logfile_link = gen_link_filename(full_filebase, filter_name)
        logfile_full = gen_verbose_filename(full_filebase, filter_name)
        file_handler = PreambleFileHandler(logfile_full, formatter.preamble())
        file_handler.setFormatter(formatter)
        file_handler.addFilter(filter)
        handlers.append(file_handler)
        _safe_setup_link(logfile_link, logfile_full)
    return handlers
