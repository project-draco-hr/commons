def dump(self):
    self.debug(('Building PythonBinary %s:' % self._target))
    targets = self.resolve(([self._target] + self._extra_targets))
    for lib in (targets['libraries'] | targets['binaries']):
        self._dump_library(lib)
    generated_reqs = OrderedSet()
    if targets['thrifts']:
        for thr in set(targets['thrifts']):
            if (thr not in self.MEMOIZED_THRIFTS):
                self.MEMOIZED_THRIFTS[thr] = self._generate_thrift_requirement(thr)
            generated_reqs.add(self.MEMOIZED_THRIFTS[thr])
        with ParseContext.temp():
            generated_reqs.add(PythonRequirement('thrift', use_2to3=True, name=('thrift-' + ''.join(random.sample(('0123456789abcdef' * 8), 8)))))
    for antlr in targets['antlrs']:
        generated_reqs.add(self._generate_antlr_requirement(antlr))
    targets['reqs'] |= generated_reqs
    for req in targets['reqs']:
        if (not req.should_build(self._interpreter.python, Platform.current())):
            self.debug(('Skipping %s based upon version filter' % req))
            continue
        self._dump_requirement(req._requirement, False, req._repository)
    reqs_to_build = (req for req in targets['reqs'] if req.should_build(self._interpreter.python, Platform.current()))
    for dist in self._resolver.resolve(reqs_to_build, interpreter=self._interpreter):
        self._dump_distribution(dist)
    if (len(targets['binaries']) > 1):
        print('WARNING: Target has multiple python_binary targets!', file=sys.stderr)
    return self._builder
