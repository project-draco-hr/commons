def dump(self):
    self.debug(('Building PythonBinary %s:' % self._target))
    targets = self.resolve(([self._target] + self._extra_targets))
    for lib in targets['libraries']:
        self._dump_library(lib)
    for req in targets['reqs']:
        if (not req.should_build()):
            self.debug(('Skipping %s based upon version filter' % req))
            continue
        self._dump_requirement(req._requirement, req._dynamic, req._repository)
    for dist in self._resolver.resolve((req._requirement for req in targets['reqs'] if req.should_build())):
        self._dump_distribution(dist)
    if targets['thrifts']:
        default_thrift_version = self._config.get('python-thrift', 'default-version', default='0.9')
        thrift_versions = set()
        for thr in targets['thrifts']:
            self._dump_thrift_library(thr)
            thrift_version = (thr.thrift_version or default_thrift_version)
            thrift_versions.add(thrift_version)
        if (len(thrift_versions) > 1):
            print('WARNING: Target has multiple thrift versions!')
        for version in thrift_versions:
            self._builder.add_requirement(('thrift==%s' % version))
            for dist in self._resolver.resolve((('thrift==%s' % version) for version in thrift_versions)):
                self._dump_distribution(dist)
    for antlr in targets['antlrs']:
        self._dump_antlr_library(antlr)
    if (len(targets['binaries']) > 1):
        print('WARNING: Target has multiple python_binary targets!', file=sys.stderr)
    for binary in targets['binaries']:
        if (len(binary.sources) > 0):
            self._dump_bin(binary.sources[0], binary.target_base)
    return self._builder
