def build_dep_tree(self, input_target):
    target = copy.deepcopy(input_target)
    common_python = self._get_common_python()
    if (common_python not in target.dependencies):
        target.dependencies.add(common_python)
    (libraries, eggs, reqs, binaries, thrifts, antlrs) = (set(), set(), set(), set(), set(), set())

    def add_dep(trg):
        if isinstance(trg, PythonLibrary):
            if (trg.sources or trg.resources):
                libraries.add(trg)
            for dep in trg.dependencies:
                if isinstance(dep, PythonEgg):
                    eggs.add(dep)
        elif isinstance(trg, PythonEgg):
            eggs.add(trg)
        elif isinstance(trg, PythonRequirement):
            reqs.add(trg)
        elif isinstance(trg, PythonBinary):
            binaries.add(trg)
        elif isinstance(trg, PythonThriftLibrary):
            thrifts.add(trg)
        elif isinstance(trg, PythonAntlrLibrary):
            antlrs.add(trg)
        elif isinstance(trg, PythonTests):
            pass
        else:
            raise PythonChroot.InvalidDependencyException(trg)
        return (trg.dependencies if hasattr(trg, 'dependencies') else [])
    target.walk((lambda t: add_dep(t)))
    return (libraries, eggs, reqs, binaries, thrifts, antlrs)
