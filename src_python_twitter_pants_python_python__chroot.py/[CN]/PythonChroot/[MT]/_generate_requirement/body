def _generate_requirement(self, library, builder_cls):
    library_key = self._key_generator.key_for_target(library)
    builder = builder_cls(library, self._root, self._config, ('-' + library_key.hash[:8]))
    cache_dir = os.path.join(self._egg_cache_root, library_key.id)
    if self._build_invalidator.needs_update(library_key):
        sdist = builder.build(interpreter=self._interpreter)
        safe_mkdir(cache_dir)
        shutil.copy(sdist, os.path.join(cache_dir, os.path.basename(sdist)))
        self._build_invalidator.update(library_key)
    with ParseContext.temp():
        return PythonRequirement(builder.requirement_string(), repository=cache_dir, use_2to3=True)
