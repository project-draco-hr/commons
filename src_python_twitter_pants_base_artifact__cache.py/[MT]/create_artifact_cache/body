def create_artifact_cache(context, artifact_root, spec):
    "\n    Returns an artifact cache for the specified spec. If config is a string, it's interpreted\n    as a path or URL prefix to a cache root. If it's a list of strings, it returns an appropriate\n    combined cache.\n  "
    if (not spec):
        raise Exception, 'Empty artifact cache spec'
    if isinstance(spec, basestring):
        if spec.startswith('/'):
            return FileBasedArtifactCache(context, artifact_root, spec)
        elif (spec.startswith('http://') or spec.startswith('https://')):
            return RESTfulArtifactCache(context, artifact_root, spec)
        else:
            raise Exception, ('Invalid artifact cache spec: %s' % spec)
    elif isinstance(spec, (list, tuple)):
        caches = [create_artifact_cache(context, artifact_root, x) for x in spec]
        return CombinedArtifactCache(caches)
