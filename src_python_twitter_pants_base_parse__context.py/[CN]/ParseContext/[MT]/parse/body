def parse(self, **globalargs):
    'The entrypoint to parsing of a BUILD file.  Changes the working directory to the BUILD file\n    directory and then evaluates the BUILD file with the ROOT_DIR and __file__ globals set in\n    addition to any globals specified as kwargs.  As target methods are parsed they can examine the\n    stack to find these globals and thus locate themselves for the purposes of finding files\n    (see locate() and bind()).'
    if (self.buildfile not in ParseContext._parsed):
        buildfile_family = tuple(self.buildfile.family())
        ParseContext._parsed.update(buildfile_family)
        pants_context = {}
        ast1 = compile('from twitter.pants import *', '<string>', 'exec')
        ast2 = compile('from twitter.common.quantity import Amount, Time', '<string>', 'exec')
        Compatibility.exec_function(ast1, pants_context)
        Compatibility.exec_function(ast2, pants_context)
        with ParseContext.activate(self):
            start = os.path.abspath(os.curdir)
            try:
                os.chdir(self.buildfile.parent_path)
                for buildfile in buildfile_family:
                    self.buildfile = buildfile
                    eval_globals = copy.copy(pants_context)
                    eval_globals.update({'ROOT_DIR': buildfile.root_dir, '__file__': buildfile.full_path, 'PANTS_NEW': ParseContext.PANTS_NEW, })
                    eval_globals.update(globalargs)
                    Compatibility.exec_function(buildfile.code(), eval_globals)
            finally:
                os.chdir(start)
