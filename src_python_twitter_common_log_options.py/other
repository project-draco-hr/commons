'\nGlog log system global options.\n\nExports module-level options such as --log_dir and --stderr_log_level, but may be\noverridden locally before calling log.init().\n'
from __future__ import print_function
import logging
import optparse
import sys
_DISK_LOG_LEVEL_OPTION = 'twitter_common_log_disk_log_level'
_DEFAULT_LOG_OPTS = {'twitter_common_log_stderr_log_level': 'ERROR', _DISK_LOG_LEVEL_OPTION: 'INFO', 'twitter_common_log_log_dir': '/var/tmp', 'twitter_common_log_simple': False, 'twitter_common_log_scribe_buffer': False, 'twitter_common_log_scribe_host': 'localhost', 'twitter_common_log_scribe_log_level': 'NONE', 'twitter_common_log_scribe_port': 1463, 'twitter_common_log_scribe_category': 'python_default', }
try:
    from twitter.common import app
    HAVE_APP = True
except ImportError:
    from collections import namedtuple
    DefaultLogOpts = namedtuple('DefaultLogOpts', _DEFAULT_LOG_OPTS.keys())


    class AppDefaultProxy(object):

        def __init__(self):
            self._opts = DefaultLogOpts(**_DEFAULT_LOG_OPTS)

        def get_options(self):
            return self._opts

        def set_option(self, key, value, force=False):
            opts = self._opts._asdict()
            if (force or (key not in opts)):
                opts[key] = value
    app = AppDefaultProxy()
    HAVE_APP = False
_LOGGING_HELP = ('The level at which logging to %%s [default: %%%%default].\nTakes either LEVEL or scheme:LEVEL, where LEVEL is one\nof %s and scheme is one of %s.\n' % (repr(LogOptions._LOG_LEVELS.keys()), repr(LogOptions._LOG_SCHEMES)))
if HAVE_APP:
    app.add_option('--log_to_stdout', callback=LogOptions._stdout_options_callback, default=_DEFAULT_LOG_OPTS['twitter_common_log_stderr_log_level'], type='string', action='callback', metavar='[scheme:]LEVEL', dest='twitter_common_log_stderr_log_level', help='OBSOLETE - legacy flag, use --log_to_stderr instead.')
    app.add_option('--log_to_stderr', callback=LogOptions._stderr_options_callback, default=_DEFAULT_LOG_OPTS['twitter_common_log_stderr_log_level'], type='string', action='callback', metavar='[scheme:]LEVEL', dest='twitter_common_log_stderr_log_level', help=(_LOGGING_HELP % 'stderr'))
    app.add_option('--log_to_disk', callback=LogOptions._disk_options_callback, default=_DEFAULT_LOG_OPTS['twitter_common_log_disk_log_level'], type='string', action='callback', metavar='[scheme:]LEVEL', dest='twitter_common_log_disk_log_level', help=(_LOGGING_HELP % 'disk'))
    app.add_option('--log_dir', type='string', default=_DEFAULT_LOG_OPTS['twitter_common_log_log_dir'], metavar='DIR', dest='twitter_common_log_log_dir', help='The directory into which log files will be generated [default: %default].')
    app.add_option('--log_simple', default=_DEFAULT_LOG_OPTS['twitter_common_log_simple'], action='store_true', dest='twitter_common_log_simple', help='Write a single log file rather than one log file per log level [default: %default].')
    app.add_option('--log_to_scribe', callback=LogOptions._scribe_options_callback, default=_DEFAULT_LOG_OPTS['twitter_common_log_scribe_log_level'], type='string', action='callback', metavar='[scheme:]LEVEL', dest='twitter_common_log_scribe_log_level', help=(_LOGGING_HELP % 'scribe'))
    app.add_option('--scribe_category', type='string', default=_DEFAULT_LOG_OPTS['twitter_common_log_scribe_category'], metavar='CATEGORY', dest='twitter_common_log_scribe_category', help='The category used when logging to the scribe daemon. [default: %default].')
    app.add_option('--scribe_buffer', action='store_true', default=_DEFAULT_LOG_OPTS['twitter_common_log_scribe_buffer'], dest='twitter_common_log_scribe_buffer', help='Buffer messages when scribe is unavailable rather than dropping them. [default: %default].')
    app.add_option('--scribe_host', type='string', default=_DEFAULT_LOG_OPTS['twitter_common_log_scribe_host'], metavar='HOST', dest='twitter_common_log_scribe_host', help='The host running the scribe daemon. [default: %default].')
    app.add_option('--scribe_port', type='int', default=_DEFAULT_LOG_OPTS['twitter_common_log_scribe_port'], metavar='PORT', dest='twitter_common_log_scribe_port', help='The port used to connect to the scribe daemon. [default: %default].')
