def _aggregate(target_type, name, libs, deployjar=None, buildflags=None):
    all_deps = OrderedSet()
    all_excludes = OrderedSet()
    all_sources = []
    all_java_sources = []
    all_resources = []
    all_annotation_processors = []
    kwargs = dict(is_meta=True)
    if deployjar:
        kwargs['deployjar'] = deployjar
    if buildflags:
        kwargs['buildflags'] = buildflags
    for lib in libs:
        if lib.dependencies:
            all_deps.update((dep for dep in lib.jar_dependencies if (dep.rev is not None)))
            kwargs['dependencies'] = all_deps
        if lib.excludes:
            all_excludes.update(lib.excludes)
            kwargs['excludes'] = all_excludes
        if lib.sources:
            all_sources.extend(lib.sources)
        if (hasattr(lib, 'java_sources') and lib.java_sources):
            all_java_sources.extend(lib.java_sources)
            kwargs['java_sources'] = all_java_sources
        if (hasattr(lib, 'resources') and lib.resources):
            all_resources.extend(lib.resources)
            kwargs['resources'] = all_resources
        if (hasattr(lib, 'processors') and lib.processors):
            all_annotation_processors.extend(lib.processors)
            kwargs['processors'] = all_annotation_processors
    return target_type(name, all_sources, **kwargs)
