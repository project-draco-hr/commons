def profile_classpath(profile, java_executor=None, config=None):
    "Loads the given profile's classpath if necessary and returns a tuple of\n  (updated: bool, classpath: [string]).\n\n  :param string profile: Name of a jvm tool profile.\n  :param java_executor: An optional java executor.\n  :type java_executor: :class:`twitter.pants.java.Executor`\n  :param config: An optional site config.\n  :type config: :class:`twitter.pants.base.Config`\n  :param string ivy_jar: Optional path to a self-contained ivy jar.\n  :param string ivy_settings: Optional path to an ivysettings.xml file.\n  "
    config = (config or Config.load())
    profile_dir = config.get('ivy-profiles', 'workdir')
    ivy_xml = os.path.join(profile_dir, ('%s.ivy.xml' % profile))
    if (not os.path.exists(ivy_xml)):
        raise TaskError(('The ivy.xml to configure the %s tool classpath at %s is missing.' % (profile, ivy_xml)))
    digest = hashlib.sha1()
    with open(ivy_xml) as fp:
        digest.update(fp.read())
    profile_libdir = os.path.join(profile_dir, ('%s.libs' % profile))
    profile_check = ('%s.%s.checked' % (profile_libdir, digest.hexdigest()))
    updated = False
    if (not os.path.exists(profile_check)):
        safe_mkdir(profile_libdir, clean=True)
        for path in glob.glob(('%s*.checked' % profile_libdir)):
            safe_delete(path)
        java_executor = (java_executor or SubprocessExecutor())
        try:
            ivy = Bootstrapper.default_ivy(java_executor)
            ivy.execute(['-ivy', ivy_xml, '-retrieve', ('%s/[artifact]-[revision](-[classifier]).[ext]' % profile_libdir), '-symlink', '-types', 'jar', 'bundle', '-confs', 'default'])
        except (Bootstrapper.Error, Ivy.Error) as e:
            raise TaskError(('Failed to load profile %s! %s' % (profile_check, e)))
        with open(profile_check, 'w') as cp:
            for jar in os.listdir(profile_libdir):
                cp.write(('%s\n' % os.path.join(profile_libdir, jar)))
        updated = True
    with open(profile_check) as cp:
        return (updated, map((lambda entry: entry.strip()), cp.readlines()))
