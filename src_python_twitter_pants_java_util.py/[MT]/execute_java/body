def execute_java(classpath, main, jvm_options=None, args=None, executor=None, workunit_factory=None, workunit_name=None, workunit_labels=None):
    "Executes the java program defined by the classpath and main.\n\n  If `workunit_factory` is supplied, does so in the context of a workunit.\n\n  :param list classpath: the classpath for the java program\n  :param string main: the fully qualified class name of the java program's entry point\n  :param list jvm_options: an optional sequence of options for the underlying jvm\n  :param list args: an optional sequence of args to pass to the java program\n  :param executor: an optional java executor to use to launch the program; defaults to a subprocess\n    spawn of the default java distribution\n  :param workunit_factory: an optional callable that can produce a workunit context\n  :param string workunit_name: an optional name for the work unit; defaults to the main\n  :param list workunit_labels: an optional sequence of labels for the work unit\n\n  Returns the exit code of the java program.\n  Raises `twitter.pants.java.Executor.Error` if there was a problem launching java itself.\n  "
    executor = (executor or SubprocessExecutor())
    if (not isinstance(executor, Executor)):
        raise ValueError(('The executor argument must be a java Executor instance, give %s of type %s' % (executor, type(executor))))
    runner = executor.runner(classpath, main, args=args, jvm_options=jvm_options)
    workunit_name = (workunit_name or main)
    return execute_runner(runner, workunit_factory=workunit_factory, workunit_name=workunit_name, workunit_labels=workunit_labels)
