def run(self):
    if (self._installed is not None):
        return self._installed
    if ((self._interpreter.distribute is None) and self._strict):
        self._installed = False
        print('Failed to find distribute in sys.path!', file=sys.stderr)
        return self._installed
    setup_bootstrap = (Installer.SETUP_BOOTSTRAP % {'setuptools_path': (self._interpreter.distribute or ''), 'setup_py': 'setup.py', })
    with TRACER.timed(('Installing %s' % self._install_tmp), V=2):
        po = subprocess.Popen([self._interpreter.binary, '-', 'install', ('--root=%s' % self._install_tmp), '--prefix=', '--single-version-externally-managed', '--record', self._install_record], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=self._source_dir)
        (so, se) = po.communicate(setup_bootstrap.encode('ascii'))
        self._installed = (po.returncode == 0)
    self._egg_info = None
    if (not self._installed):
        print(('Failed to install stdout:\n%s' % so.decode('utf-8')), file=sys.stderr)
        print(('Failed to install stderr:\n%s' % se.decode('utf-8')), file=sys.stderr)
        return self._installed
    installed_files = []
    egg_info = None
    with open(self._install_record) as fp:
        installed_files = fp.read().splitlines()
        for line in installed_files:
            if line.endswith('.egg-info'):
                assert line.startswith('/'), 'Expect .egg-info to be within install_tmp!'
                egg_info = line
                break
    if (not egg_info):
        self._installed = False
        return self._installed
    installed_files = [os.path.relpath(fn, egg_info) for fn in installed_files if (fn != egg_info)]
    self._egg_info = os.path.join(self._install_tmp, egg_info[1:])
    with open(os.path.join(self._egg_info, 'installed-files.txt'), 'w') as fp:
        fp.write('\n'.join(installed_files))
        fp.write('\n')
    return self._installed
