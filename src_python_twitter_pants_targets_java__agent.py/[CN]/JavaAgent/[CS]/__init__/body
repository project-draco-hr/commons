def __init__(self, name, sources=None, dependencies=None, excludes=None, resources=None, exclusives=None, premain=None, agent_class=None, can_redefine=False, can_retransform=False, can_set_native_method_prefix=False):
    "\n    :param string name: The name of this target, which combined with this\n      build file defines the target :class:`twitter.pants.base.address.Address`.\n    :param sources: A list of filenames representing the source code\n      this library is compiled from.\n    :type sources: list of strings\n    :param dependencies: List of :class:`twitter.pants.base.target.Target` instances\n      this target depends on.\n    :type dependencies: list of targets\n    :param excludes: List of :class:`twitter.pants.targets.exclude.Exclude` instances\n      to filter this target's transitive dependencies against.\n    :param resources: An optional list of file paths (DEPRECATED) or\n      ``resources`` targets (which in turn point to file paths). The paths\n      indicate text file resources to place in this module's jar.\n    :param exclusives: An optional map of exclusives tags. See CheckExclusives for details.\n    :param string premain: When an agent is specified at JVM launch time this attribute specifies\n      the agent class. Exactly one of ``premain`` or ``agent_class`` must be specified.\n    :param string agent_class: If an implementation supports a mechanism to start agents sometime\n      after the VM has started then this attribute specifies the agent class. Exactly one of\n      ``premain`` or ``agent_class`` must be specified.\n    :param bool can_redefine: `True` if the ability to redefine classes is needed by this agent;\n      `False` by default.\n    :param bool can_retransform: `True` if the ability to retransform classes is needed by this\n      agent; `False` by default.\n    :param bool can_set_native_method_prefix: `True` if the ability to set he native method prefix\n      is needed by this agent; `False` by default.\n    "
    super(JavaAgent, self).__init__(name, sources, provides=None, dependencies=dependencies, excludes=excludes, resources=resources, exclusives=exclusives)
    if ((not premain) or agent_class):
        raise TargetDefinitionException(self, "Must have at least one of 'premain' or 'agent_class' defined.")
    if (not isinstance(premain, Compatibility.string)):
        raise TargetDefinitionException(self, ('The premain must be a fully qualified class name, given %s of type %s' % (premain, type(premain))))
    if (not isinstance(agent_class, Compatibility.string)):
        raise TargetDefinitionException(self, ('The agent_class must be a fully qualified class name, given %s of type %s' % (agent_class, type(agent_class))))
    self._premain = premain
    self._agent_class = agent_class
    self._can_redefine = can_redefine
    self._can_retransform = can_retransform
    self._can_set_native_method_prefix = can_set_native_method_prefix
    self.add_labels('java_agent')
