def classpath(self, cp=None, confs=None, exclusives_classpath=None):
    classpath = (cp or [])
    if (exclusives_classpath is None):
        with self.context.state('classpath', []) as context_cp:
            exclusives_classpath = context_cp
    classpath.extend((path for (conf, path) in exclusives_classpath if ((not confs) or (conf in confs))))

    def add_resource_paths(predicate):
        bases = set()
        for target in self.context.targets():
            if predicate(target):
                if (target.target_base not in bases):
                    sibling_resources_base = os.path.join(os.path.dirname(target.target_base), 'resources')
                    classpath.append(os.path.join(get_buildroot(), sibling_resources_base))
                    bases.add(target.target_base)
    if self.context.config.getbool('jvm', 'parallel_src_paths', default=False):
        add_resource_paths((lambda t: (is_jvm(t) and (not is_test(t)))))
    if self.context.config.getbool('jvm', 'parallel_test_paths', default=False):
        add_resource_paths((lambda t: (is_jvm(t) and is_test(t))))
    return classpath
