def find(self, requirement, platform=pkg_resources.get_platform(), py_version=None):
    '\n      Query the location of a distribution that fulfills a requirement.\n\n      Returns a tuple of:\n        location = the location of the distribution (or None if none found.)\n        repo = the repo in which it was found (or None if local or not found.)\n    '
    if (py_version is None):
        py_version = ('%s.%s' % (sys.version_info[0], sys.version_info[1]))
    env = pkg_resources.Environment()
    if isinstance(requirement, str):
        requirement = pkg_resources.Requirement.parse(requirement)
    for dist in pkg_resources.find_distributions(self._cache):
        if ((dist in requirement) and env.can_add(dist)):
            return (dist.location, None)
    for repo in self._pis:
        repo.find_packages(requirement)
        for package in repo[requirement.project_name]:
            if pkg_resources.compatible_platforms(package.platform, platform):
                if ((package.py_version is not None) and (package.py_version != py_version)):
                    continue
                if (package not in requirement):
                    continue
                return (package.location, repo)
    return (None, None)
