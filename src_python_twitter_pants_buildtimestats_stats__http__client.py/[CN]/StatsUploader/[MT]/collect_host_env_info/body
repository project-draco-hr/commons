def collect_host_env_info(self, stats):
    stats['env'] = os.environ.data
    stats['timestamp'] = int(time.time())
    try:
        import psutil
        stats['cpu_time'] = psutil.cpu_percent(interval=1)
        stats['network_counter'] = psutil.net_io_counters()
        stats['no_of_cpus'] = psutil.NUM_CPUS
    except Exception as e:
        log.debug(('Exception %s. Cannot collect psutil stats' % e))
    stats['git'] = {}
    (ret, git_origin) = CommandUtil().execute_and_get_output(['git', 'remote', '-v'])
    if (ret == 0):
        for url in git_origin.splitlines():
            origin = url.split()
            str1 = origin[2].strip('(').strip(')')
            if origin:
                stats['git'][str1] = origin[1]
    (ret, git_branch) = CommandUtil().execute_and_get_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])
    if (ret == 0):
        stats['git']['branch'] = git_branch.strip()
    try:
        stats['ip'] = socket.gethostbyname(socket.gethostname())
    except Exception as e:
        log.debug(('Exception %s. Cannot get ip stats' % e))
    log.debug('Done collecting stats')
    last_modified = None
    if os.path.exists(self._pants_stat_file):
        last_modified = int(os.path.getmtime(self._pants_stat_file))
    try:
        with open(self._pants_stat_file, 'a') as stats_file:
            json_response = json.dumps(stats, cls=PythonObjectEncoder)
            stats_file.write((json_response + '\n'))
        return last_modified
    except IOError as e:
        log.debug(('Could not write the pants stats %s' % e))
