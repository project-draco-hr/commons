@classmethod
def minimum_path(cls):
    '\n      Return as a tuple the emulated sys.path and sys.path_importer_cache of\n      a bare python installation, a la python -S.\n    '
    from site import USER_SITE
    from twitter.common.collections import OrderedSet
    from pkg_resources import find_distributions
    from distutils.sysconfig import get_python_lib
    site_libs = set([get_python_lib(plat_specific=False), get_python_lib(plat_specific=True)])
    site_distributions = OrderedSet()
    for path_element in sys.path:
        if any((path_element.startswith(site_lib) for site_lib in site_libs)):
            TRACER.log(('Inspecting path element: %s' % path_element))
            site_distributions.update((dist.location for dist in find_distributions(path_element)))
    user_site_distributions = OrderedSet((dist.location for dist in find_distributions(USER_SITE)))
    for path in site_distributions:
        TRACER.log(('Scrubbing from site-packages: %s' % path))
    for path in user_site_distributions:
        TRACER.log(('Scrubbing from user site: %s' % path))
    scrub_paths = (site_distributions | user_site_distributions)
    scrubbed_sys_path = list((OrderedSet(sys.path) - scrub_paths))
    scrub_from_importer_cache = filter((lambda key: any((key.startswith(path) for path in scrub_paths))), sys.path_importer_cache.keys())
    scrubbed_importer_cache = dict(((key, value) for (key, value) in sys.path_importer_cache.items() if (key not in scrub_from_importer_cache)))
    return (scrubbed_sys_path, scrubbed_importer_cache)
