def execute(self, targets):
    scala_targets = filter(ScalaCompile._has_scala_sources, reversed(InternalTarget.sort_targets(targets)))
    if scala_targets:
        safe_mkdir(self._depfile_dir)
        safe_mkdir(self._analysis_cache_dir)
        upstream_analysis_caches = self.context.products.get('upstream')
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._resources_dir))
        with self.invalidated(scala_targets, invalidate_dependants=True) as invalidated:
            if self._flatten:
                self.execute_single_compilation(invalidated.combined_all_versioned_targets(), cp, upstream_analysis_caches)
            else:
                for vt in invalidated.all_versioned_targets():
                    self.execute_single_compilation(vt, cp, upstream_analysis_caches)
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._classes_dir))
        if self.context.products.isrequired('classes'):
            genmap = self.context.products.get('classes')
            for (target, classes_by_source) in self._deps.findclasses(scala_targets).items():
                for (source, classes) in classes_by_source.items():
                    genmap.add(source, self._classes_dir, classes)
                    genmap.add(target, self._classes_dir, classes)
            for target in scala_targets:
                if (is_scalac_plugin(target) and target.classname):
                    basedir = self.write_plugin_info(target)
                    genmap.add(target, basedir, [_PLUGIN_INFO_FILE])
