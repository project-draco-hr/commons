def execute(self, targets):
    scala_targets = filter(ScalaCompile._has_scala_sources, targets)
    if scala_targets:
        safe_mkdir(self._depfile_dir)
        safe_mkdir(self._analysis_cache_dir)
        upstream_analysis_caches = self.context.products.get('upstream')
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._resources_dir))
                for jar in self._plugin_jars:
                    cp.insert(0, (conf, jar))
        with self.invalidated(scala_targets, invalidate_dependants=True, partition_size_hint=self._partition_size_hint) as invalidation_check:
            for vt in invalidation_check.all_vts:
                if vt.valid:
                    self.post_process(vt, upstream_analysis_caches, split_artifact=False)
            for vt in invalidation_check.invalid_vts_partitioned:
                self.execute_single_compilation(vt, cp, upstream_analysis_caches)
                if (not self.dry_run):
                    vt.update()
