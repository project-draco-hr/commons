def execute(self, targets):
    scala_targets = filter(is_scala, targets)
    if scala_targets:
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._output_dir))
        with self.changed(scala_targets, invalidate_dependants=True) as changed_targets:
            (bases, sources_by_target) = self.calculate_sources(changed_targets)
            if sources_by_target:
                classpath = [jar for (conf, jar) in cp if (conf in self._confs)]
                result = self.compile(classpath, bases, sources_by_target)
                if (result != 0):
                    raise TaskError(('%s returned %d' % (self._main, result)))
        if self.context.products.isrequired('classes'):
            genmap = self.context.products.get('classes')
            (_, sources) = self.calculate_sources(scala_targets)
            for (target, sources) in sources.items():
                classes = ScalaCompiler.findclasses(self._output_dir, sources, self._depfile)
                genmap.add(target, self._output_dir, classes)
