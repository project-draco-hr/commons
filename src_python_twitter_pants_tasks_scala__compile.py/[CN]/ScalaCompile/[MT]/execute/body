def execute(self, targets):
    scala_targets = filter(ScalaCompile._has_scala_sources, targets)
    if scala_targets:
        safe_mkdir(self._depfile_dir)
        safe_mkdir(self._analysis_cache_dir)
        upstream_analysis_caches = self.context.products.get('upstream')
        with self.context.state('classpath', []) as cp:
            for conf in self._confs:
                cp.insert(0, (conf, self._resources_dir))
                for jar in self._plugin_jars:
                    cp.insert(0, (conf, jar))
        with self.invalidated(scala_targets, invalidate_dependants=True, partition_size_hint=self._partition_size_hint) as invalidation_check:
            for vt in invalidation_check.all_vts:
                if vt.valid:
                    self.post_process(vt, upstream_analysis_caches, split_artifact=False)
            for vt in invalidation_check.invalid_vts_partitioned:
                self.execute_single_compilation(vt, cp, upstream_analysis_caches)
                if (not self.dry_run):
                    vt.update()
        if self.check_missing_deps:
            deps_cache = JvmDependencyCache(self, scala_targets)
            (deps_by_target, jar_deps_by_target) = deps_cache.get_compilation_dependencies()
            for target in deps_by_target:
                deps = deps_by_target[target].copy()
                jar_deps = jar_deps_by_target[target].copy()
                target.walk((lambda target: self._dependency_walk_work(deps, jar_deps, target)))
                if (len(deps) > 0):
                    genmap = self.context.products.get('missing_deps')
                    genmap.add(target, self.context._buildroot, [x.derived_from.address.reference() for x in deps])
                    for dep_target in deps:
                        print ('Error: target %s has undeclared compilation dependency on %s,' % (target.address, dep_target.derived_from.address.reference()))
                        print ('       because source file %s depends on class %s' % deps_cache.get_dependency_blame(target, dep_target))
                if (len(jar_deps) > 0):
                    for jd in jar_deps:
                        print ('Error: target %s needs to depend on jar_dependency %s.%s' % (target.address, jd.org, jd.name))
