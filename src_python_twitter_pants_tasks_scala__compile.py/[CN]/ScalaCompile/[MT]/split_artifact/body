def split_artifact(self, deps, versioned_target_set):
    if (len(versioned_target_set.targets) <= 1):
        return
    classes_by_source_by_target = deps.findclasses(versioned_target_set.targets)
    (src_output_dir, _, src_analysis_cache) = self.create_output_paths(versioned_target_set.targets)
    analysis_splits = []
    for target in versioned_target_set.targets:
        classes_by_source = classes_by_source_by_target.get(target, {})
        (dst_output_dir, dst_depfile, dst_analysis_cache) = self.create_output_paths([target])
        safe_rmtree(dst_output_dir)
        safe_mkdir(dst_output_dir)
        sources = []
        dst_deps = Dependencies(dst_output_dir)
        for (source, classes) in classes_by_source.items():
            src = os.path.join(target.target_base, source)
            dst_deps.add(src, classes)
            sources.append(os.path.join(target.target_base, source))
            for cls in classes:
                dst = os.path.join(dst_output_dir, cls)
                safe_mkdir(os.path.dirname(dst))
                os.link(os.path.join(src_output_dir, cls), dst)
        dst_deps.save(dst_depfile)
        analysis_splits.append((sources, dst_output_dir, dst_analysis_cache))
        self.generated_caches.add(os.path.join(dst_output_dir, dst_analysis_cache))
    if os.path.exists(src_analysis_cache):
        if self._zinc_utils.run_zinc_split(src_cache=src_analysis_cache, splits=[(x[0], x[2]) for x in analysis_splits]):
            raise TaskError, ('zinc failed to split analysis files %s from %s' % (':'.join([x[2] for x in analysis_splits]), src_analysis_cache))
        for split in analysis_splits:
            dst_analysis_cache = split[2]
            dst_output_dir = split[1]
            if os.path.exists(dst_analysis_cache):
                rebasings = [(src_output_dir, dst_output_dir)]
                if self._zinc_utils.run_zinc_rebase(cache=dst_analysis_cache, rebasings=rebasings):
                    raise TaskError, ('In split_artifact: zinc failed to rebase analysis file %s' % dst_analysis_cache)
