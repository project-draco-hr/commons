def execute_single_compilation(self, versioned_target_set, cp, upstream_analysis_caches):
    'Execute a single compilation, updating upstream_analysis_caches if needed.'
    (output_dir, depfile, analysis_cache) = self.create_output_paths(versioned_target_set.targets)
    portable_analysis_cache = (analysis_cache + '.portable')
    safe_mkdir(output_dir)
    if (not versioned_target_set.valid):
        with self.check_artifact_cache(versioned_target_set, build_artifacts=[output_dir, depfile, portable_analysis_cache]) as in_cache:
            if in_cache:
                if self._zinc_utils.localize_analysis_cache(portable_analysis_cache, analysis_cache):
                    self.context.log.warn(('zinc failed to localise analysis file %s. Target may require a full rebuild.' % portable_analysis_cache))
            else:
                self.merge_artifact(versioned_target_set)
                self.context.log.info(('Compiling targets %s' % versioned_target_set.targets))
                sources_by_target = self.calculate_sources(versioned_target_set.targets)
                if sources_by_target:
                    sources = reduce((lambda all, sources: all.union(sources)), sources_by_target.values())
                    if (not sources):
                        self.context.log.warn(('Skipping scala compile for targets with no sources:\n  %s' % '\n  '.join((str(t) for t in sources_by_target.keys()))))
                    else:
                        classpath = [jar for (conf, jar) in cp if (conf in self._confs)]
                        result = self._zinc_utils.compile(classpath, sources, output_dir, analysis_cache, upstream_analysis_caches, depfile)
                        if (result != 0):
                            raise TaskError(('Compile returned %d' % result))
                        if self._zinc_utils.relativize_analysis_cache(analysis_cache, portable_analysis_cache):
                            raise TaskError(('Zinc failed to relativize analysis file: %s' % analysis_cache))
    self.post_process(versioned_target_set, upstream_analysis_caches, split_artifact=True)
