def _write_to_artifact_cache(self, analysis_file, vts, sources_by_target):
    vt_by_target = dict([(vt.target, vt) for vt in vts.versioned_targets])
    split_analysis_files = [ScalaCompile._analysis_for_target(self._analysis_tmpdir, t) for t in vts.targets]
    portable_split_analysis_files = [ScalaCompile._portable_analysis_for_target(self._analysis_tmpdir, t) for t in vts.targets]
    splits = zip([sources_by_target.get(t, []) for t in vts.targets], split_analysis_files)
    splits_args_tuples = [(analysis_file, splits)]
    relativize_args_tuples = zip(split_analysis_files, portable_split_analysis_files)
    vts_artifactfiles_pairs = []
    classes_by_source = self._compute_classes_by_source(analysis_file)
    for (target, sources) in sources_by_target.items():
        artifacts = []
        for source in sources:
            for cls in classes_by_source.get(source, []):
                artifacts.append(os.path.join(self._classes_dir, cls))
        vt = vt_by_target.get(target)
        if (vt is not None):
            vts_artifactfiles_pairs.append((vt, (artifacts + [ScalaCompile._portable_analysis_for_target(self._analysis_tmpdir, target)])))
    update_artifact_cache_work = self.get_update_artifact_cache_work(vts_artifactfiles_pairs)
    if update_artifact_cache_work:
        work_chain = [Work(Analysis.split, splits_args_tuples, 'split'), Work(self._zinc_utils.relativize_analysis_file, relativize_args_tuples, 'relativize'), update_artifact_cache_work]
        self.context.submit_background_work_chain(work_chain, parent_workunit_name='cache')
