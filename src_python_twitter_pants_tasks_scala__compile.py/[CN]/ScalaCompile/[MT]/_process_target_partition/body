def _process_target_partition(self, partition, cp):
    'Needs invoking only on invalid targets.\n\n    partition - a triple (vts, sources_by_target, analysis_file).\n\n    May be invoked concurrently on independent target sets.\n\n    Postcondition: The individual targets in vts are up-to-date, as if each were\n                   compiled individually.\n    '
    (vts, sources, analysis_file) = partition
    if (not sources):
        self.context.log.warn(('Skipping scala compile for targets with no sources:\n  %s' % vts.targets))
    else:
        self.context.log.info('Compiling a partition containing ', items_to_report_element(sources, 'source'), ' in ', items_to_report_element([t.address.reference() for t in vts.targets], 'target'), '.')
        classpath = [entry for (conf, entry) in cp if (conf in self._confs)]
        with self.context.new_workunit('compile'):
            vts.force_invalidate()
            classpath.append(self._classes_dir)
            upstream = {self._classes_dir: self._analysis_file, }
            if self._zinc_utils.compile(classpath, sources, self._classes_dir, analysis_file, upstream):
                raise TaskError('Compile failed.')
