def __init__(self, context):
    NailgunTask.__init__(self, context, workdir=context.config.get('scala-compile', 'nailgun_dir'))
    self._flatten = (context.options.scala_compile_flatten if (context.options.scala_compile_flatten is not None) else context.config.getbool('scala-compile', 'default_to_flatten'))
    self._color = (context.options.scala_compile_color and context.config.getbool('scala-compile', 'color', default=True))
    self._compile_profile = context.config.get('scala-compile', 'compile-profile')
    self._zinc_profile = context.config.get('scala-compile', 'zinc-profile')
    self._depemitter_profile = context.config.get('scala-compile', 'dependencies-plugin-profile')
    scaladeps = []
    for spec in context.config.getlist('scala-compile', 'scaladeps'):
        scaladeps.extend(context.resolve(spec))
    for target in context.targets(is_scala):
        target.update_dependencies(scaladeps)
    workdir = context.config.get('scala-compile', 'workdir')
    self._incremental_classes_dir = os.path.join(workdir, 'incremental.classes')
    self._classes_dir = os.path.join(workdir, 'classes')
    self._analysis_cache_dir = os.path.join(workdir, 'analysis_cache')
    self._resources_dir = os.path.join(workdir, 'resources')
    self._main = context.config.get('scala-compile', 'main')
    self._args = context.config.getlist('scala-compile', 'args')
    self._jvm_args = context.config.getlist('scala-compile', 'jvm_args')
    if context.options.scala_compile_warnings:
        self._args.extend(context.config.getlist('scala-compile', 'warning_args'))
    else:
        self._args.extend(context.config.getlist('scala-compile', 'no_warning_args'))
    self._confs = context.config.getlist('scala-compile', 'confs')
    self._depfile_dir = os.path.join(workdir, 'depfiles')
    self._deps = Dependencies(self._classes_dir)
