def findclasses(self, targets):
    sources = set()
    target_by_source = dict()
    for target in targets:
        for source in target.sources:
            src = os.path.join(target.target_base, source)
            target_by_source[src] = target
            sources.add(src)
    classes_by_target_by_source = defaultdict((lambda : defaultdict(set)))
    with open(self.depfile, 'r') as deps:
        section = 0
        for dep in deps.readlines():
            line = dep.strip()
            if ('-------' == line):
                section += 1
            elif (ScalaCompiler._SECTIONS[section] == 'source_to_class'):
                (src, cls) = line.split('->')
                sourcefile = os.path.relpath(os.path.join(self.outputdir, src.strip()), get_buildroot())
                if (sourcefile in sources):
                    classfile = os.path.relpath(os.path.join(self.outputdir, cls.strip()), self.outputdir)
                    target = target_by_source[sourcefile]
                    relsrc = os.path.relpath(sourcefile, target.target_base)
                    classes_by_target_by_source[target][relsrc].add(classfile)
    return classes_by_target_by_source
