def test_binary_search_dag(self):
    rrr = MockTarget('rrr')
    rrl = MockTarget('rrl')
    rlr = MockTarget('rlr')
    rll = MockTarget('rll')
    lrr = MockTarget('lrr')
    lrl = MockTarget('lrl')
    llr = MockTarget('llr')
    lll = MockTarget('lll')
    rr = MockTarget('rr', [rrr, rrl])
    rl = MockTarget('rl', [rlr, rll])
    lr = MockTarget('lr', [lrr, lrl])
    ll = MockTarget('ll', [llr, lll])
    r = MockTarget('r', [rr, rl])
    l = MockTarget('l', [lr, ll])
    root = MockTarget('root', [r, l])

    def test_dag(dag):

        def t(n):
            return dag.lookup(n)
        self.assertEquals(dag._roots, set([t(root)]))
        self.assertEquals(dag.leaves, set(map(t, [rrr, rrl, rlr, rll, lrr, lrl, llr, lll])))
        self.check_dag_node(dag, root, [r, l], [])
        self.check_dag_node(dag, r, [rl, rr], [root])
        self.check_dag_node(dag, l, [ll, lr], [root])
        self.check_dag_node(dag, rr, [rrl, rrr], [r])
        self.check_dag_node(dag, rl, [rll, rlr], [r])
        self.check_dag_node(dag, lr, [lrl, lrr], [l])
        self.check_dag_node(dag, ll, [lll, llr], [l])
        self.check_dag_node(dag, rrr, [], [rr])
        self.check_dag_node(dag, rrl, [], [rr])
        self.check_dag_node(dag, rlr, [], [rl])
        self.check_dag_node(dag, rll, [], [rl])
        self.check_dag_node(dag, lrr, [], [lr])
        self.check_dag_node(dag, lrl, [], [lr])
        self.check_dag_node(dag, llr, [], [ll])
        self.check_dag_node(dag, lll, [], [ll])
    test_dag(make_dag([root, r, l, rr, rl, lr, ll, rrr, rrl, rlr, rll, lrr, lrl, llr, lll]))
    test_dag(make_dag([lrl, r, root, rl, rrr, rll, lr, lrr, ll, lll, l, rr, rrl, rlr, llr]))
    test_dag(make_dag([ll, rrl, lrl, rl, rlr, lr, root, rrr, rll, r, llr, rr, lrr, l, lll]))
    test_dag(make_dag([rr, rlr, rl, rrr, rrl, l, root, lr, lrr, llr, r, rll, lrl, ll, lll]))
    test_dag(make_dag([l, lll, rrr, rll, ll, lrl, llr, rl, root, r, lr, rlr, rr, lrr, rrl]))
