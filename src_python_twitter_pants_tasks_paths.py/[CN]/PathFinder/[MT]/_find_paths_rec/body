@classmethod
def _find_paths_rec(cls, from_target, to_target):
    if (from_target == to_target):
        return [[from_target]]
    if ((from_target not in cls.all_paths) or (to_target not in cls.all_paths[from_target])):
        paths = []
        if hasattr(from_target, 'dependency_addresses'):
            for address in from_target.dependency_addresses:
                dep = Target.get(address)
                for path in cls._find_paths_rec(dep, to_target):
                    new_path = copy.copy(path)
                    new_path.insert(0, from_target)
                    paths.append(new_path)
        if (from_target not in cls.all_paths):
            cls.all_paths[from_target] = {}
        cls.all_paths[from_target][to_target] = paths
    return cls.all_paths[from_target][to_target]
