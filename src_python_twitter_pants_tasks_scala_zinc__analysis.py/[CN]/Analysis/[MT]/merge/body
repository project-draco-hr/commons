@staticmethod
def merge(analyses):
    'Merge multiple Analysis instances into one.'
    src_prod = Util.merge_dicts([a.relations.src_prod for a in analyses])
    binary_dep = Util.merge_dicts([a.relations.binary_dep for a in analyses])
    classes = Util.merge_dicts([a.relations.classes for a in analyses])
    class_to_source = dict(((v, k) for (k, vs) in classes.iteritems() for v in vs))

    def merge_dependencies(internals, externals):
        internal = Util.merge_dicts(internals)
        naive_external = Util.merge_dicts(externals)
        external = defaultdict(list)
        for (k, vs) in naive_external.iteritems():
            for v in vs:
                vfile = class_to_source.get(v)
                if (vfile and (vfile in src_prod)):
                    internal[k].append(vfile)
                else:
                    external[k].append(v)
        return (internal, external)
    (internal, external) = merge_dependencies([a.relations.internal_src_dep for a in analyses], [a.relations.external_dep for a in analyses])
    (internal_pi, external_pi) = merge_dependencies([a.relations.internal_src_dep_pi for a in analyses], [a.relations.external_dep_pi for a in analyses])
    relations = Relations((src_prod, binary_dep, internal, external, internal_pi, external_pi, classes))
    products = Util.merge_dicts([a.stamps.products for a in analyses])
    sources = Util.merge_dicts([a.stamps.sources for a in analyses])
    binaries = Util.merge_dicts([a.stamps.binaries for a in analyses])
    classnames = Util.merge_dicts([a.stamps.classnames for a in analyses])
    stamps = Stamps((products, sources, binaries, classnames))
    internal_apis = Util.merge_dicts([a.apis.internal for a in analyses])
    naive_external_apis = Util.merge_dicts([a.apis.external for a in analyses])
    external_apis = defaultdict(list)
    for (k, vs) in naive_external_apis.iteritems():
        kfile = class_to_source[k]
        if (kfile in src_prod):
            internal_apis[kfile] = vs
        else:
            external_apis[k] = vs
    apis = APIs((internal_apis, external_apis))
    source_infos = SourceInfos((Util.merge_dicts([a.source_infos.source_infos for a in analyses]),))
    compilation_vals = sorted(set([x[0] for a in analyses for x in a.compilations.compilations.itervalues()]))
    compilations_dict = defaultdict(list)
    for (i, v) in enumerate(compilation_vals):
        compilations_dict[('%03d' % i)] = [v]
    compilations = Compilations((compilations_dict,))
    compile_setup = (analyses[0].compile_setup if (len(analyses) > 0) else CompileSetup((defaultdict(list),)))
    return Analysis(relations, stamps, apis, source_infos, compilations, compile_setup)
