@classmethod
def _register_jar(cls, jar, compiler=None, language=None, rpc_style=None, generated_deps=None, namespace_map=None):

    def create(name):
        synthetic = JavaThriftLibrary(name, sources=None, dependencies=([jar] + (generated_deps or [])), compiler=compiler, language=language, rpc_style=rpc_style, namespace_map=namespace_map)
        synthetic.derived_from = jar
        cls._PLACEHOLDERS_BY_JAR[jar].append(synthetic)
        cls._REGISTERED_JARS.add((jar.org, jar.name))
        return synthetic
    return cls._register_once(jar.id, jar.id, compiler, language, rpc_style, namespace_map, cls._extract_base(jar), create)
