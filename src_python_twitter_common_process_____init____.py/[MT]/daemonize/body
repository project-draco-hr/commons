def daemonize(pidfile=None, stdout='/dev/null', stderr='/dev/null', quiet=False):
    '\n    Exits the current process and starts a new daemon process.\n    `pidfile`: \n      :Deafult: ``None``\n      The pid file to store the daemon procees pid.\n    `stdout`:\n      :Default: ``\'/dev/null\'``\n      Location to redirect stdout\n    `stderr`:\n      :Default: ``\'/dev/null\'``\n      Location to redirect stderr\n    `quiet`:\n      :Default: ``False``\n      If ``True`` supresses output to stdout and stderr\n\n    Typical Usage:\n    Import\n    >>> from twitter.common.process import daemonize\n\n    Define the daemon method and call daemonize\n    >>> def run_daemon():\n    ...   daemonize(\'/tmp/pid\')\n    ...   while(1):\n    ...    print("i am asleep...")\n\n    Run \n    >>> run_daemon()\n        Writing pid 32758 into /tmp/pid\n    [bash]$\n    The current python interactive shell terminates and a daemon_process 32758 is running\n    [bash]$ ps -p 32758\n      PID TTY           TIME CMD\n    32758 ??         0:39.68 /usr/bin/python2.6 /var/folders/t_/ck6c3z/T/tmptkO6Wc\n    '
    _daemonize(pidfile, stdout, stderr, quiet, exit_parent=True)
