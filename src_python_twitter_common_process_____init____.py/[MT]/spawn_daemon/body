def spawn_daemon(pidfile=None, stdout='/dev/null', stderr='/dev/null', quiet=False):
    '\n    Spawns a new daemon process without terminating the current process.\n    Returns ``True`` to daemon process and ``False`` to curent process.\n    `pidfile`: \n      :Deafult: ``None``\n      The pid file to store the daemon procees pid.\n    `stdout`:\n      :Default: ``\'/dev/null\'``\n      Location to redirect stdout\n    `stderr`:\n      :Default: ``\'/dev/null\'``\n      Location to redirect stderr\n    `quiet`:\n      :Default: ``False``\n      If ``True`` supresses output to stdout and stderr\n\n    Typical Usage:\n    Import\n    >>> from twitter.common.process import spawn_daemon\n\n    >>> def do_daemon_process():\n    ...   while(1):\n    ...     time.sleep(1)\n    ...     print("I am asleep for ever")\n\n    Call spawn_daemon\n    >>> if spawn_daemon("/tmp/pid", quiet=True):\n    ...   do_daemon_process()\n\n    Returns to python interactive shell and continues the execution\n    >>> print("I am continuing with main")\n    I am continuing with main\n   >>>\n\n   The daemon process is running\n   [bash]$ ps -p `cat /tmp/pid`\n     PID TTY           TIME CMD\n   33095 ??         0:21.50 /usr/bin/python2.6 /var/folders/t_/ck6c/T/tmpolW2xb\n  '
    return (not _daemonize(pidfile, stdout, stderr, quiet, exit_parent=False))
