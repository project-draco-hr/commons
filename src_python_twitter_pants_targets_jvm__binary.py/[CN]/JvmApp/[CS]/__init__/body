def __init__(self, name, binary, bundles, basename=None):
    '\n    :param string name: The name of this target, which combined with this\n      build file defines the target :class:`twitter.pants.base.address.Address`.\n    :param binary: The :class:`twitter.pants.targets.jvm_binary.JvmBinary`,\n      or a :class:`twitter.pants.targets.pants_target.Pants` pointer to one.\n    :param bundles: One or more :class:`twitter.pants.targets.jvm_binary.Bundle`\'s\n      describing "extra files" that should be included with this app\n      (e.g.: config files, startup scripts).\n    :param string basename: Name of this application, if different from the\n      ``name``. Pants uses this in the ``bundle`` goal to name the distribution\n      artifact. In most cases this parameter is not necessary.\n    '
    InternalTarget.__init__(self, name, dependencies=[binary])
    binary_list = list()
    for b in maybe_list(util.resolve(binary), expected_type=(Pants, JvmBinary), raise_type=partial(TargetDefinitionException, self)):
        binary_list.extend(b.resolve())
    if (len(binary_list) != 1):
        raise TargetDefinitionException(self, ('binary must resolve to a single JvmBinary target, found %s' % binary))
    self._resolved_binary = binary_list[0]
    self._bundles = maybe_list(bundles, expected_type=Bundle, raise_type=partial(TargetDefinitionException, self))
    if (name == basename):
        raise TargetDefinitionException(self, 'basename must not equal name.')
    self.basename = (basename or name)
    self._resolved_bundles = []
