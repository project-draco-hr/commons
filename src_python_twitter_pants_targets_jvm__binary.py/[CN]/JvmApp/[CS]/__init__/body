def __init__(self, name, binary, bundles, basename=None):
    InternalTarget.__init__(self, name, dependencies=[])
    if (not binary):
        raise TargetDefinitionException(self, 'binary is required')
    binaries = [t for t in util.resolve(binary).resolve() if t.is_concrete]
    if ((len(binaries) != 1) or (not isinstance(binaries[0], JvmBinary))):
        raise TargetDefinitionException(self, ('must supply exactly 1 JvmBinary, got %s' % binary))
    self.binary = binaries[0]
    self._post_construct(self.update_dependencies, binaries)
    if (not bundles):
        raise TargetDefinitionException(self, 'bundles must be specified')

    def is_resolvable(item):
        return hasattr(item, 'resolve')

    def is_bundle(bundle):
        return isinstance(bundle, Bundle)

    def resolve(item):
        return (list(item.resolve()) if is_resolvable(item) else [None])
    if is_resolvable(bundles):
        bundles = resolve(bundles)
    self.bundles = []
    try:
        for item in iter(bundles):
            for bundle in resolve(item):
                if (not is_bundle(bundle)):
                    raise TypeError()
                self.bundles.append(bundle)
    except TypeError:
        raise TargetDefinitionException(self, ('bundles must be one or more Bundle objects, got %s' % bundles))
    self.basename = (basename or name)
