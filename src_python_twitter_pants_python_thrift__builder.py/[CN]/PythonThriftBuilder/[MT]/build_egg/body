def build_egg(self):
    self.run_thrifts()
    genpy_root = os.path.join(self.chroot.path(), self.codegen_root, 'gen-py')
    for (dir, _, files) in os.walk(os.path.normpath(genpy_root)):
        reldir = os.path.relpath(dir, genpy_root)
        if (reldir == '.'):
            continue
        if ('__init__.py' not in files):
            continue
        init_py_abspath = os.path.join(dir, '__init__.py')
        module_path = self.path_to_module(reldir)
        self.detected_packages.add(module_path)
        if ((len(files) == 1) and (os.path.getsize(init_py_abspath) == 0)):
            with open(init_py_abspath, 'wb') as f:
                f.write("__import__('pkg_resources').declare_namespace(__name__)")
            self.detected_namespace_packages.add(module_path)
    if (not self.detected_packages):
        raise PythonThriftBuilder.CodeGenerationException(('No Thrift structures declared in %s!' % self.target))

    def dump_setup_py(packages, namespace_packages):
        boilerplate = '\nfrom setuptools import setup\n\nsetup(name        = "%(target_name)s",\n      version     = "dev",\n      description = "autogenerated thrift bindings for %(target_name)s",\n      package_dir = { "": "gen-py" },\n      packages    = %(packages)s,\n      namespace_packages = %(namespace_packages)s)\n'
        boilerplate = (boilerplate % {'target_name': self.target._create_id(), 'genpy_root': genpy_root, 'packages': repr(list(packages)), 'namespace_packages': repr(list(namespace_packages)), })
        self.chroot.write(boilerplate.encode('utf-8'), os.path.join(self.codegen_root, 'setup.py'))
    dump_setup_py(self.detected_packages, self.detected_namespace_packages)
    egg_root = os.path.join(self.chroot.path(), self.codegen_root)
    egg_path = EggBuilder().build_egg(egg_root, self.target)
    return egg_path
