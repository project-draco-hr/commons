def run_thrifts(self):
    '\n    Generate Python thrift code using thrift compiler specified in pants config.\n\n    Thrift fields conflicting with Python keywords are suffixed with a trailing\n    underscore (e.g.: from_).\n    '

    def is_py_thrift(target):
        return isinstance(target, PythonThriftLibrary)
    all_thrifts = set()

    def collect_sources(target):
        for source in target.sources:
            all_thrifts.add((target.target_base, source))
    self.target.walk(collect_sources, predicate=is_py_thrift)
    copied_sources = set()
    for (base, relative_source) in all_thrifts:
        abs_source = os.path.join(base, relative_source)
        copied_source = os.path.join(self._workdir, relative_source)
        safe_mkdir(os.path.dirname(copied_source))
        shutil.copyfile(abs_source, copied_source)
        copied_sources.add(self._modify_thrift(copied_source))
    for src in copied_sources:
        if (not self._run_thrift(src)):
            raise PythonThriftBuilder.CodeGenerationException(('Could not generate .py from %s!' % src))
