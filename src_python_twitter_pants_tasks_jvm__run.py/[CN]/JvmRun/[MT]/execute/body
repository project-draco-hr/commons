def execute(self, targets):
    self.context.lock.release()
    binaries = filter(is_binary, targets)
    if (len(binaries) > 0):
        main = binaries[0].main
        egroups = self.context.products.get_data('exclusives_groups')
        group_key = egroups.get_group_key_for_target(binaries[0])
        group_classpath = egroups.get_classpath_for_group(group_key)
        executor = (CommandLineGrabber() if self.only_write_cmd_line else None)
        result = execute_java(classpath=self.classpath(confs=self.confs, exclusives_classpath=group_classpath), main=main, executor=executor, jvm_options=self.jvm_args, args=self.args, workunit_factory=self.context.new_workunit, workunit_name='run', workunit_labels=[WorkUnit.RUN])
        if self.only_write_cmd_line:
            with safe_open(self.only_write_cmd_line, 'w') as outfile:
                outfile.write(executor.cmd)
        elif (result != 0):
            raise TaskError(('java %s ... exited non-zero (%i)' % (main, result)), exit_code=result)
