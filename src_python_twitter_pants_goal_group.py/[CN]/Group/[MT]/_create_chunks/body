@staticmethod
def _create_chunks(context, goals):

    def discriminator(target):
        for (i, goal) in enumerate(goals):
            if goal.group.predicate(target):
                return i
        return 'other'
    exclusives = Group._get_exclusives_product(context)
    sorted_excl_group_keys = exclusives.get_ordered_group_keys()
    all_chunks = []
    for excl_group_key in sorted_excl_group_keys:
        chunk_targets = exclusives.get_targets_for_group_key(excl_group_key)
        internal_targets = [t for t in chunk_targets if t.is_internal]
        coalesced = InternalTarget.coalesce_targets(internal_targets, discriminator)
        coalesced = list(reversed(coalesced))

        def not_internal(target):
            return (not target.is_internal)
        rest = OrderedSet(filter(not_internal, chunk_targets))
        chunks = ([rest] if rest else [])
        flavor = None
        chunk_start = 0
        for (i, target) in enumerate(coalesced):
            target_flavor = discriminator(target)
            if ((target_flavor != flavor) and (i > chunk_start)):
                chunks.append(OrderedSet(coalesced[chunk_start:i]))
                chunk_start = i
            flavor = target_flavor
        if (chunk_start < len(coalesced)):
            chunks.append(OrderedSet(coalesced[chunk_start:]))
        all_chunks += chunks
    context.log.debug(('::: created chunks(%d)' % len(all_chunks)))
    for (i, chunk) in enumerate(all_chunks):
        flavor = discriminator(iter(chunk).next())
        context.log.debug(('  chunk(%d) [flavor=%s]:\n\t%s' % (i, flavor, '\n\t'.join(sorted(map(str, chunk))))))
    return all_chunks
