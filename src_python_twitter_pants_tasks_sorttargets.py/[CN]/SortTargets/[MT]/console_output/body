def console_output(self, targets):
    depmap = defaultdict(set)

    def map_deps(target):
        if hasattr(target, 'dependencies'):
            deps = depmap[str(target.address)]
            for dep in target.dependencies:
                for resolved in filter(self._is_target, dep.resolve()):
                    deps.add(str(resolved.address))
    for root in self.context.target_roots:
        root.walk(map_deps, self._is_target)
    tsorted = []
    for group in topological_sort(depmap):
        tsorted.extend(group)
    if self._reverse:
        tsorted = reversed(tsorted)
    roots = set((str(root.address) for root in self.context.target_roots))
    for address in tsorted:
        if (address in roots):
            yield address
