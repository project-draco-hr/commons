def parse_deps(self, infile, classpath_indexer):
    self._verify_version(infile)
    bin_deps = self._find_repeated_at_header(infile, 'binary dependencies')
    src_deps = self._find_repeated_at_header(infile, 'direct source dependencies')
    ext_deps = self._find_repeated_at_header(infile, 'direct external dependencies')
    scalalib_re = re.compile('scala-library-\\d+\\.\\d+\\.\\d+\\.jar$')
    filtered_bin_deps = defaultdict(list)
    for (src, deps) in bin_deps.iteritems():
        filtered_bin_deps[src] = filter((lambda x: (scalalib_re.search(x) is None)), deps)
    transformed_ext_deps = {}

    def fqcn_to_path(fqcn):
        return os.path.join(self.classes_dir, (fqcn.replace('.', os.sep) + '.class'))
    for (src, fqcns) in ext_deps.items():
        transformed_ext_deps[src] = [fqcn_to_path(fqcn) for fqcn in fqcns]
    ret = defaultdict(list)
    for d in [filtered_bin_deps, src_deps, transformed_ext_deps]:
        ret.update(d)
    return ret
