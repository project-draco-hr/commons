@classmethod
def create(cls, repo, path, ref='HEAD', message=None, force=False, **kwargs):
    'Create a new tag reference.\n\t\t\n\t\t:param path:\n\t\t\tThe name of the tag, i.e. 1.0 or releases/1.0. \n\t\t\tThe prefix refs/tags is implied\n\t\t\t\n\t\t:param ref:\n\t\t\tA reference to the object you want to tag. It can be a commit, tree or \n\t\t\tblob.\n\t\t\t\n\t\t:param message:\n\t\t\tIf not None, the message will be used in your tag object. This will also \n\t\t\tcreate an additional tag object that allows to obtain that information, i.e.::\n\t\t\t\n\t\t\t\ttagref.tag.message\n\t\t\t\n\t\t:param force:\n\t\t\tIf True, to force creation of a tag even though that tag already exists.\n\t\t\t\n\t\t:param kwargs:\n\t\t\tAdditional keyword arguments to be passed to git-tag\n\t\t\t\n\t\t:return: A new TagReference'
    args = (path, ref)
    if message:
        kwargs['m'] = message
    if force:
        kwargs['f'] = True
    repo.git.tag(*args, **kwargs)
    return TagReference(repo, ('%s/%s' % (cls._common_path_default, path)))
