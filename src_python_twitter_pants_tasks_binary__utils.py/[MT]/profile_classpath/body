def profile_classpath(profile, java_runner=None, config=None, ivy_jar=None, ivy_settings=None):

    def call_java(classpath, main, args):
        runjava(classpath=classpath, main=main, args=args)
    java_runner = (java_runner or call_java)
    config = (config or Config.load())
    profile_dir = config.get('ivy-profiles', 'workdir')
    profile_libdir = os.path.join(profile_dir, ('%s.libs' % profile))
    profile_check = ('%s.checked' % profile_libdir)
    if (not os.path.exists(profile_check)):
        ivy_classpath = ([ivy_jar] if ivy_jar else config.getlist('ivy', 'classpath'))
        safe_mkdir(profile_libdir)
        ivy_settings = (ivy_settings or config.get('ivy', 'ivy_settings'))
        ivy_xml = os.path.join(profile_dir, ('%s.ivy.xml' % profile))
        ivy_args = ['-settings', ivy_settings, '-ivy', ivy_xml, '-retrieve', ('%s/[artifact]-[revision](-[classifier]).[ext]' % profile_libdir), '-sync', '-symlink', '-types', 'jar', '-confs', 'default']
        java_runner(classpath=ivy_classpath, main='org.apache.ivy.Main', args=ivy_args)
        with open(profile_check, 'w'):
            pass
    return [os.path.join(profile_libdir, jar) for jar in os.listdir(profile_libdir)]
