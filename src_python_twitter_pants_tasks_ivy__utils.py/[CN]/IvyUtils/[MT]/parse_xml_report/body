def parse_xml_report(self, targets, conf):
    'Returns the IvyInfo representing the info in the xml report, or None if no report exists.'
    path = self.xml_report_path(targets, conf)
    if (not os.path.exists(path)):
        return None
    ret = IvyInfo()
    etree = xml.etree.ElementTree.parse(self.xml_report_path(targets, conf))
    doc = etree.getroot()
    for module in doc.findall('dependencies/module'):
        org = module.get('organisation')
        name = module.get('name')
        for revision in module.findall('revision'):
            rev = revision.get('name')
            artifacts = []
            for artifact in revision.findall('artifacts/artifact'):
                artifacts.append(IvyArtifact(path=artifact.get('location'), classifier=artifact.get('extra-classifier')))
            callers = []
            for caller in revision.findall('caller'):
                callers.append(IvyModuleRef(caller.get('organisation'), caller.get('name'), caller.get('callerrev')))
            ret.add_module(IvyModule(IvyModuleRef(org, name, rev), artifacts, callers))
    return ret
