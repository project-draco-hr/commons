@staticmethod
def symlink_cachepath(ivy_home, inpath, symlink_dir, outpath):
    'Symlinks all paths listed in inpath that are under ivy_home into symlink_dir.\n\n    Preserves all other paths. Writes the resulting paths to outpath.\n    Returns a map of path -> symlink to that path.\n    '
    safe_mkdir(symlink_dir)
    with safe_open(inpath, 'r') as infile:
        paths = filter(None, infile.read().strip().split(os.pathsep))
    new_paths = []
    for path in paths:
        if (not path.startswith(ivy_home)):
            new_paths.append(path)
            continue
        symlink = os.path.join(symlink_dir, os.path.relpath(path, ivy_home))
        try:
            os.makedirs(os.path.dirname(symlink))
        except OSError as e:
            if (e.errno != errno.EEXIST):
                raise
        try:
            os.symlink(path, symlink)
        except OSError as e:
            if (e.errno != errno.EEXIST):
                raise
        new_paths.append(symlink)
    with safe_open(outpath, 'w') as outfile:
        outfile.write(':'.join(new_paths))
    symlink_map = dict(zip(paths, new_paths))
    return symlink_map
