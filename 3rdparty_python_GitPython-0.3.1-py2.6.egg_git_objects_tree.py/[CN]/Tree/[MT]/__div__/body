def __div__(self, file):
    "Find the named object in this tree's contents\n\t\t:return: ``git.Blob`` or ``git.Tree`` or ``git.Submodule``\n\t\t\n\t\t:raise KeyError: if given file or tree does not exist in tree"
    msg = 'Blob or Tree named %r not found'
    if ('/' in file):
        tree = self
        item = self
        tokens = file.split('/')
        for (i, token) in enumerate(tokens):
            item = tree[token]
            if (item.type == 'tree'):
                tree = item
            else:
                if (i != (len(tokens) - 1)):
                    raise KeyError((msg % file))
                return item
        if (item == self):
            raise KeyError((msg % file))
        return item
    else:
        for info in self._cache:
            if (info[2] == file):
                return self._map_id_to_type[(info[1] >> 12)](self.repo, info[0], info[1], join_path(self.path, info[2]))
        raise KeyError((msg % file))
