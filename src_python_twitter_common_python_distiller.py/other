from __future__ import absolute_import, print_function
import ast
import os
import sys
import tempfile
import zipfile
from .common import open_zip, safe_mkdir
from pkg_resources import Distribution, get_build_platform
NAMESPACE_STUB = "\ntry:\n  __import__('pkg_resources').declare_namespace(__name__)\nexcept ImportError:\n  from sys import stderr\n  stderr.write('Unable to declare namespace for %s\\n' % __name__)\n  stderr.write('This package may not work!\\n')\n"
NATIVE_STUB = "\ndef __bootstrap__():\n  import contextlib, shutil\n  import os, zipfile\n  import sys, imp, tempfile\n  try:\n    from cStringIO import StringIO\n  except ImportError:\n    try:\n      from StringIO import StringIO\n    except ImportError:\n      from io import BytesIO as StringIO\n\n  def split_existing(path):\n    def generate_prefixes(path):\n      if path in ('', os.path.sep): return\n      for head in generate_prefixes(os.path.split(path)[0]):\n        yield head\n      yield path\n    subpath = None\n    for prefix in generate_prefixes(path):\n      if not os.path.lexists(prefix):\n        break\n      subpath = prefix\n    return (subpath, os.path.relpath(path, subpath))\n\n  global __bootstrap__, __loader__, __file__\n  real_file = os.path.splitext(__file__)[0] + '%(extension)s'\n  archive, archive_name = split_existing(real_file)\n\n  try:\n    fd, name = tempfile.mkstemp()\n    with contextlib.closing(zipfile.ZipFile(archive)) as zf:\n      with contextlib.closing(zf.open(archive_name)) as zi:\n        with os.fdopen(fd, 'wb') as fp:\n          shutil.copyfileobj(zi, fp)\n\n    __file__ = name\n    __loader__ = None\n    del __bootstrap__, __loader__\n    imp.load_dynamic(__name__, __file__)\n  finally:\n    os.unlink(name)\n\n__bootstrap__()\n"
