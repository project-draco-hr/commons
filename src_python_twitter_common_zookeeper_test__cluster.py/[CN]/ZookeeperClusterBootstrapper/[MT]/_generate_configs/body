def _generate_configs(self):
    (SERVER_PORT, INCOMING_ELECTION_PORT, OUTGOING_ELECTION_PORT) = range(3)
    ports = self._generate_ports(self.num_servers)
    server_clause = []
    for server_id in range(1, (self.num_servers + 1)):
        server_clause.append((ZookeeperClusterBootstrapper.ZOOKEEPER_SERVER_LINE % {'server_number': server_id, 'incoming_election_port': ports[(server_id, INCOMING_ELECTION_PORT)], 'outgoing_election_port': ports[(server_id, OUTGOING_ELECTION_PORT)], }))
    server_clause = '\n'.join(server_clause)
    for server_id in range(1, (self.num_servers + 1)):
        data_dir = self._bootstrap_tempdir(server_id)
        server_port = ports[(server_id, SERVER_PORT)]
        config = (ZookeeperClusterBootstrapper.ZOOKEEPER_CONFIG % {'data_dir': data_dir, 'server_port': server_port, })
        config = '\n'.join([config, server_clause])
        config_filename = tempfile.mktemp()
        stdout_filename = tempfile.mktemp()
        stderr_filename = tempfile.mktemp()
        with open(config_filename, 'w') as config_file:
            config_file.write(config)
        self.servers[server_id] = ZookeeperServerConfig(config_filename, open(stderr_filename, 'w'), open(stdout_filename, 'w'), server_port)
