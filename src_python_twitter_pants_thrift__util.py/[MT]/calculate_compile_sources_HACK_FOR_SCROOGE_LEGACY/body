def calculate_compile_sources_HACK_FOR_SCROOGE_LEGACY(targets, is_thrift_target):
    'Calculates the set of thrift source files that need to be compiled\n  as well as their associated import/include directories.\n  It does not exclude sources that are included in other sources.\n\n  A tuple of (include dirs, thrift sources) is returned.\n\n  :targets: The targets to examine.\n  :is_thrift_target: A predicate to pick out thrift targets for consideration in the analysis.\n  '
    dirs = set()
    sources = set()

    def collect_sources(target):
        for source in target.sources:
            dirs.add(os.path.normpath(os.path.join(target.target_base, os.path.dirname(source))))
            sources.add(os.path.join(target.target_base, source))
    for target in targets:
        target.walk(collect_sources, predicate=is_thrift_target)
    thrift_file_to_import_paths = defaultdict(set)
    for import_path in dirs:
        for thrift_file in map((lambda p: os.path.basename(p)), glob.glob(('%s/*.thrift' % import_path))):
            thrift_file_to_import_paths[thrift_file].add(import_path)
        for (thrift_file, import_paths) in thrift_file_to_import_paths.items():
            if (len(import_paths) > 1):
                self.context.log.warning(("'%s' found in multiple import-paths: [%s]" % (thrift_file, ', '.join(import_paths))))
    return (dirs, sources)
