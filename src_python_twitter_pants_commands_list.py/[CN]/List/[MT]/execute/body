def execute(self):
    if self.options.only_provides:

        def extract_artifact_id(target):
            provided_jar = target._as_jar_dependency()
            return ('%s%s%s' % (provided_jar.org, self.options.separator, provided_jar.name))
        extractors = dict(address=(lambda target: str(target.address)), artifact_id=extract_artifact_id, repo_name=(lambda target: target.provides.repo.name), repo_url=(lambda target: target.provides.repo.url), repo_db=(lambda target: target.provides.repo.push_db))
        column_extractors = [extractors[col] for col in self.options.provides_columns.split(',')]
        print_fn = (lambda address: self._print_provides(column_extractors, address))
    else:
        print_fn = (lambda address: str(address))
    for buildfile in self.buildfiles:
        for address in Target.get_all_addresses(buildfile):
            line = print_fn(address)
            if line:
                print line
