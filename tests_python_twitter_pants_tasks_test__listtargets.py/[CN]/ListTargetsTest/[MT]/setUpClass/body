@classmethod
def setUpClass(cls):
    super(ListTargetsTest, cls).setUpClass()
    repo_target = dedent("\n        repo(\n          name='public',\n          url='http://maven.twttr.com',\n          push_db='/tmp/publish.properties'\n        )\n        ").strip()
    cls.create_target('repos', repo_target)


    class Lib(object):

        def __init__(self, name, provides=False):
            self.name = name
            self.provides = (dedent(("\n            artifact(\n              org='com.twitter',\n              name='%s',\n              repo=pants('repos:public')\n            )\n            " % name)).strip() if provides else 'None')

    def create_library(path, *libs):
        libs = (libs or [Lib(os.path.basename(os.path.dirname(cls.build_path(path))))])
        for lib in libs:
            target = ("java_library(name='%s', provides=%s)\n" % (lib.name, lib.provides))
            cls.create_target(path, target)
    create_library('a')
    create_library('a/b', Lib('b', provides=True))
    create_library('a/b/c', Lib('c'), Lib('c2', provides=True), Lib('c3'))
    create_library('a/b/d')
    create_library('a/b/e', Lib('e1'))
    cls.create_target('f', dedent('\n        dependencies(\n          name=\'alias\',\n          dependencies=[\n            pants(\'a/b/c/BUILD:c3\'),\n            pants(\'a/b/d/BUILD:d\')\n          ]\n        ).with_description("""\n        Exercises alias resolution.\n        Further description.\n        """)\n        '))
