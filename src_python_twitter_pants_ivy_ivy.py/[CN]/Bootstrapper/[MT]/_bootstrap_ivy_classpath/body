def _bootstrap_ivy_classpath(self, executor, workunit_factory, retry=True):
    ivy_bootstrap_dir = os.path.join(self._config.getdefault('pants_bootstrapdir'), 'tools', 'jvm', 'ivy')
    digest = hashlib.sha1()
    if os.path.isfile(self._version_or_ivyxml):
        with open(self._version_or_ivyxml) as fp:
            digest.update(fp.read())
    else:
        digest.update(self._version_or_ivyxml)
    classpath = os.path.join(ivy_bootstrap_dir, ('%s.classpath' % digest.hexdigest()))
    if (not os.path.exists(classpath)):
        ivy = self._bootstrap_ivy(os.path.join(ivy_bootstrap_dir, 'bootstrap.jar'))
        args = ['-confs', 'default', '-cachepath', classpath]
        if os.path.isfile(self._version_or_ivyxml):
            args.extend(['-ivy', self._version_or_ivyxml])
        else:
            args.extend(['-dependency', 'org.apache.ivy', 'ivy', self._version_or_ivyxml])
        try:
            ivy.execute(args=args, executor=executor, workunit_factory=workunit_factory, workunit_name='ivy-bootstrap')
        except ivy.Error as e:
            safe_delete(classpath)
            raise self.Error(('Failed to bootstrap an ivy classpath! %s' % e))
    with open(classpath) as fp:
        cp = fp.read().strip().split(os.pathsep)
        if (not all(map(os.path.exists, cp))):
            safe_delete(classpath)
            if retry:
                return self._bootstrap_ivy_classpath(executor, workunit_factory, retry=False)
            raise self.Error(('Ivy bootstrapping failed - invalid classpath: %s' % ':'.join(cp)))
        return cp
