def get_value(self, section, option, default=None):
    '\n\t\t:param default:\n\t\t\tIf not None, the given default value will be returned in case \n\t\t\tthe option did not exist\n\t\t:return: a properly typed value, either int, float or string\n\t\t\n\t\t:raise TypeError: in case the value could not be understood\n\t\t\tOtherwise the exceptions known to the ConfigParser will be raised.'
    try:
        valuestr = self.get(section, option)
    except Exception:
        if (default is not None):
            return default
        raise
    types = (long, float)
    for numtype in types:
        try:
            val = numtype(valuestr)
            if (val != float(valuestr)):
                continue
            return val
        except (ValueError, TypeError):
            continue
    vl = valuestr.lower()
    if (vl == 'false'):
        return False
    if (vl == 'true'):
        return True
    if (not isinstance(valuestr, basestring)):
        raise TypeError('Invalid value type: only int, long, float and str are allowed', valuestr)
    return valuestr
