{
  MorePreconditions.checkNotBlank(currentId);
  try {
    List<String> candidates=zkClient.get().getChildren(lockPath,null);
    ImmutableList<String> sortedMembers=Ordering.natural().immutableSortedCopy(candidates);
    if (sortedMembers.isEmpty()) {
      throw new LockingException("Error, member list is empty!");
    }
    int memberIndex=sortedMembers.indexOf(currentId);
    if (memberIndex == 0) {
      holdsLock=true;
      syncPoint.countDown();
    }
 else {
      final String nextLowestNode=sortedMembers.get(memberIndex - 1);
      LOG.log(Level.INFO,String.format("Current LockWatcher with ephemeral node [%s], is " + "waiting for [%s] to release lock.",currentId,nextLowestNode));
      watchedNode=String.format("%s/%s",lockPath,nextLowestNode);
      Stat stat=zkClient.get().exists(watchedNode,this);
      if (stat == null) {
        checkForLock();
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.log(Level.WARNING,String.format("Current LockWatcher with ephemeral node [%s] " + "got interrupted. Trying to cancel lock acquisition.",currentId),e);
    cancelAttempt();
  }
catch (  KeeperException e) {
    LOG.log(Level.WARNING,String.format("Current LockWatcher with ephemeral node [%s] " + "got a KeeperException. Trying to cancel lock acquisition.",currentId),e);
    cancelAttempt();
  }
catch (  ZooKeeperClient.ZooKeeperConnectionException e) {
    LOG.log(Level.WARNING,String.format("Current LockWatcher with ephemeral node [%s] " + "got a ConnectionException. Trying to cancel lock acquisition.",currentId),e);
    cancelAttempt();
  }
}
