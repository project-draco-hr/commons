def get_compilation_dependencies(self, sources_by_target, targets_by_source, targets_by_product, binary_deps_by_target):
    ' Compute a map from the source files in a target to class files that it depends on\n\n    Note: this code currently relies on the relations report generated by the zinc incremental\n    scala compiler. If other languages/compilers want to use this code, they need to provide\n    a similar report. See zinc_analysis_file.py for details about the information\n    needed by this analysis.\n\n    Parameters:\n      sources_by_target: a map from targets to the source file that they provide.\n      targets_by_source: a map from source files to the targets that provide them.\n      targets_by_product: a map from classes to the targets that provide them.\n      binary_deps_by_target: a map from targets to the classes that they depend on.\n    Returns: a target-to-target mapping from targets to targets that they depend on.\n       If this was already computed, return the already computed result.\n    '
    zinc_analysis = self.get_analysis_collection()
    targets_by_class = self.get_targets_by_class()
    self.source_deps_by_target = defaultdict(set)
    self._check_overlapping_sources(targets_by_source)
    self.class_deps_by_target = defaultdict(set)
    for target in self.targets:
        if (target in binary_deps_by_target):
            self.class_deps_by_target[target] |= binary_deps_by_target[target]
        for src in target.sources:
            srcpath = self._normalize_source_path(target, src)
            self.class_deps_by_target[target] |= zinc_analysis.external_deps[srcpath]
            for srcdep in zinc_analysis.source_deps[srcpath]:
                self.source_deps_by_target[target] |= self.targets_by_source[srcdep]
            if (srcpath in zinc_analysis.class_names):
                self.class_deps_by_target[target] |= zinc_analysis.class_names[srcpath]
    self.computed_deps = defaultdict(set)
    for fromtarget in self.class_deps_by_target:
        for classdep in self.class_deps_by_target[fromtarget]:
            if (classdep in targets_by_class):
                self.computed_deps[fromtarget] |= targets_by_class[classdep]
    for fromtarget in self.source_deps_by_target:
        for totarget in self.source_deps_by_target[fromtarget]:
            self.computed_deps[fromtarget].add(totarget)
    self.computed_jar_deps = self.get_computed_jar_dependency_relations()
    return (self.computed_deps, self.computed_jar_deps)
