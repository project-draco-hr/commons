def get_dependency_blame(self, from_target, to_target):
    '\n    Figures out why target A depends on target B according the the dependency analysis.\n    Generates a tuple which can be used to generate a message like:\n     "*from_target* depends on *to_target* because *from_target*\'s source file X\n      depends on *to_target*\'s class Y."\n     Returns: a pair of (source, class) where:\n       source is the name of a source file in "from" that depends on something\n          in "to".\n       class is the name of the class that source1 depends on.\n       If no dependency data could be found to support the dependency,\n       returns (None, None)\n    '
    for source in from_target.sources:
        srcpath = self._normalize_source_path(from_target, source)
        for cl in self.zinc_analysis_collection.external_deps[srcpath]:
            targets_providing = self.zinc_targets_by_provided_class[cl]
            if (to_target in targets_providing):
                return (source, cl)
    return (None, None)
