def check_undeclared_dependencies(self, error_filter=_default_error_filter):
    ' Performs the undeclared dependencies/overdeclared dependencies checks.\n\n    For each dependency issue discovered, generates warnings/error messages and\n    (depending on flag settings), setting build products.\n    '
    if (not self.check_missing_deps):
        return
    with self.context.new_workunit(name='depcheck'):
        targets_by_source = self.get_targets_by_source()
        targets_by_class = self.get_targets_by_class()
        binary_deps_by_target = self.get_binary_deps_by_target()
        deps_by_target = self.get_compilation_dependencies(targets_by_source, binary_deps_by_target)
        all_undeclared_deps = set()
        all_intransitive_undeclared_deps = set()
        transitive_declared_deps_map = self._get_declared_transitive_deps(deps_by_target.keys())
        for target in deps_by_target:
            declared_deps = transitive_declared_deps_map[target]
            computed_deps = deps_by_target[target]
            (undeclared_deps, immediate_undeclared_deps) = self.get_missing_deps_for_target(target, declared_deps, computed_deps, targets_by_class, targets_by_source, error_filter)
            all_undeclared_deps.update(undeclared_deps)
            all_intransitive_undeclared_deps.update(immediate_undeclared_deps)
            if self.check_unnecessary_deps:
                if (not target.has_label('synthetic')):
                    self.check_target_unnecessary_deps(target, computed_deps)
        if ((len(all_undeclared_deps) > 0) or ((self.check_intransitive_deps is not 'none') and (len(all_intransitive_undeclared_deps) > 0))):
            raise TaskError('Missing dependencies detected.')
