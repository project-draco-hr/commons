def check_undeclared_dependencies(self):
    ' Performs the undeclared dependencies/overdeclared dependencies checks.\n\n    For each dependency issue discovered, generates warnings/error messages and\n    (depending on flag settings), setting build products.\n    '
    if (not self.check_missing_deps):
        return
    sources_by_target = self.get_sources_by_target()
    targets_by_source = self.get_targets_by_source()
    targets_by_class = self.get_targets_by_class()
    binary_deps_by_target = self.get_binary_deps_by_target()
    (deps_by_target, jar_deps_by_target) = self.get_compilation_dependencies(sources_by_target, targets_by_source, targets_by_class, binary_deps_by_target)
    found_missing_deps = False
    for target in deps_by_target:
        computed_deps = deps_by_target[target]
        computed_jar_deps = jar_deps_by_target[target]
        (undeclared_deps, immediate_undeclared_deps) = self.get_missing_deps_for_target(target, computed_deps, computed_jar_deps, targets_by_class)
        if (self.check_unnecessary_deps and (not target.has_label('synthetic'))):
            self.check_unnecessary_deps(target, computed_deps)
    if found_missing_deps:
        raise TaskError('Missing dependencies detected.')
