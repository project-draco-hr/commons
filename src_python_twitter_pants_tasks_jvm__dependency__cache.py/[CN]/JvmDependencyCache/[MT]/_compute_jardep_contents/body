def _compute_jardep_contents(self):
    'Compute the relations between jar dependencies and jar files.\n\n    Returns: a pair of maps (jars_by_target, targets_by_jar) describing the mappings between\n             jars and the targets that contain those jars.\n    '
    found_jar_deps = set()
    visited = set()

    def visit(target):
        for t in target.resolve():
            if (t in visited):
                return
            visited.add(t)
            if isinstance(t, JarDependency):
                found_jar_deps.add(t)
            if hasattr(t, 'dependencies'):
                for dep in t.dependencies:
                    visit(dep)
    for t in self.targets:
        visit(t)
    jardeps_by_id = {}
    for jardep in found_jar_deps:
        jardeps_by_id[(jardep.org, jardep.name)] = jardep
    ivy_products = self.context.products.get('ivy_jar_products').get('ivy')
    ivy_jars_by_target = defaultdict(set)
    ivy_targets_by_jar = defaultdict(set)
    for ivy_report_list in ivy_products.values():
        for report in ivy_report_list:
            for ref in report.modules_by_ref:
                target_key = (ref.org, ref.name)
                if (target_key in jardeps_by_id):
                    jardep_target = jardeps_by_id[target_key]
                    for jar in report.modules_by_ref[ref].artifacts:
                        ivy_jars_by_target[jardep_target].add(jar.path)
                        ivy_targets_by_jar[jar.path].add(jardep_target)
    return (ivy_jars_by_target, ivy_targets_by_jar)
