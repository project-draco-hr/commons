def lru_cache(maxsize=100, typed=False, on_eviction=(lambda x: x)):
    'Least-recently-used cache decorator.\n\n  If *maxsize* is set to None, the LRU features are disabled and the cache\n  can grow without bound.\n\n  If *typed* is True, arguments of different types will be cached separately.\n  For example, f(3.0) and f(3) will be treated as distinct calls with\n  distinct results.\n\n  Arguments to the cached function must be hashable.\n\n  View the cache statistics named tuple (hits, misses, maxsize, currsize) with\n  f.cache_info().  Clear the cache and statistics with f.cache_clear().\n  Access the underlying function with f.__wrapped__.\n\n  See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used\n  '

    def decorating_function(user_function):
        cache = dict()
        stats = [0, 0]
        (HITS, MISSES) = (0, 1)
        kwd_mark = (object(),)
        cache_get = cache.get
        _len = len
        lock = Lock()
        root = []
        nonlocal_root = [root]
        root[:] = [root, root, None, None]
        (PREV, NEXT, KEY, RESULT) = (0, 1, 2, 3)

        def make_key(args, kwds, typed, tuple=tuple, sorted=sorted, type=type):
            key = args
            if kwds:
                sorted_items = tuple(sorted(kwds.items()))
                key += (kwd_mark + sorted_items)
            if typed:
                key += tuple((type(v) for v in args))
                if kwds:
                    key += tuple((type(v) for (k, v) in sorted_items))
            return key
        if (maxsize == 0):

            def wrapper(*args, **kwds):
                result = user_function(*args, **kwds)
                stats[MISSES] += 1
                return result
        elif (maxsize is None):

            def wrapper(*args, **kwds):
                key = (make_key(args, kwds, typed) if (kwds or typed) else args)
                result = cache_get(key, root)
                if (result is not root):
                    stats[HITS] += 1
                    return result
                result = user_function(*args, **kwds)
                cache[key] = result
                stats[MISSES] += 1
                return result
        else:

            def wrapper(*args, **kwds):
                key = (make_key(args, kwds, typed) if (kwds or typed) else args)
                with lock:
                    link = cache_get(key)
                    if (link is not None):
                        (root,) = nonlocal_root
                        (link_prev, link_next, key, result) = link
                        link_prev[NEXT] = link_next
                        link_next[PREV] = link_prev
                        last = root[PREV]
                        last[NEXT] = root[PREV] = link
                        link[PREV] = last
                        link[NEXT] = root
                        stats[HITS] += 1
                        return result
                result = user_function(*args, **kwds)
                with lock:
                    root = nonlocal_root[0]
                    if (_len(cache) < maxsize):
                        last = root[PREV]
                        link = [last, root, key, result]
                        cache[key] = last[NEXT] = root[PREV] = link
                    else:
                        root[KEY] = key
                        root[RESULT] = result
                        cache[key] = root
                        root = nonlocal_root[0] = root[NEXT]
                        evicted = cache.pop(root[KEY])
                        on_eviction(evicted[RESULT])
                        root[KEY] = None
                        root[RESULT] = None
                    stats[MISSES] += 1
                return result

        def cache_info():
            'Report cache statistics'
            with lock:
                return _CacheInfo(stats[HITS], stats[MISSES], maxsize, len(cache))

        def cache_clear():
            'Clear the cache and cache statistics'
            with lock:
                for value in cache.values():
                    on_eviction(value[RESULT])
                cache.clear()
                root = nonlocal_root[0]
                root[:] = [root, root, None, None]
                stats[:] = [0, 0]
        wrapper.__wrapped__ = user_function
        wrapper.cache_info = cache_info
        wrapper.cache_clear = cache_clear
        return update_wrapper(wrapper, user_function)
    return decorating_function
