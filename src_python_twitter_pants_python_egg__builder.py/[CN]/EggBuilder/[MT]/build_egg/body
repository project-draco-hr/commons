def build_egg(self, egg_root, target):
    'Build an egg containing the files at egg_root for the specified target.\n    There must be an egg_root/setup.py file.'
    args = [sys.executable, 'setup.py', 'bdist_egg', '--dist-dir=dist', ('--bdist-dir=build.%s' % target.name)]
    cwd = os.getcwd()
    os.chdir(egg_root)
    print ('EggBuilder executing: %s' % ' '.join(args))
    try:
        oldenv = os.getenv('PYTHONPATH')
        os.putenv('PYTHONPATH', ':'.join(sys.path))
        po = subprocess.Popen(args, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        rv = po.wait()
        if oldenv:
            os.putenv('PYTHONPATH', oldenv)
        else:
            os.unsetenv('PYTHONPATH')
        eggs = os.path.abspath(os.path.join('dist', '*.egg'))
        eggs = glob.glob(eggs)
        if ((rv != 0) or (len(eggs) != 1)):
            comm = po.communicate()
            print  >> sys.stderr, ('egg generation failed (return value=%d, num eggs=%d)' % (rv, len(eggs)))
            print  >> sys.stderr, 'STDOUT'
            print  >> sys.stderr, comm[0]
            print  >> sys.stderr, 'STDERR'
            print  >> sys.stderr, comm[1]
            raise EggBuilder.EggBuildingException(('Generation of eggs failed for target = %s' % target))
        egg_path = eggs[0]
    finally:
        os.chdir(cwd)
    return egg_path
