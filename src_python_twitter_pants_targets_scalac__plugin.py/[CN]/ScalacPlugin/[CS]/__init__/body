def __init__(self, name, classname, plugin=None, sources=None, java_sources=None, provides=None, dependencies=None, excludes=None, resources=None, exclusives=None):
    "\n    :param name: The name of this module target, addressable via pants via the portion of the\n      spec following the colon - required.\n    :param classname: The fully qualified plugin class name - required.\n    :param plugin: The name of the plugin which defaults to name if not supplied.\n    :param sources: A list of filenames representing the source code\n      this library is compiled from.\n    :type sources: list of strings\n    :param java_sources:\n      :class:`twitter.pants.targets.java_library.JavaLibrary` or list of\n      JavaLibrary targets this library has a circular dependency on.\n      Prefer using dependencies to express non-circular dependencies.\n    :param Artifact provides:\n      The :class:`twitter.pants.targets.artifact.Artifact`\n      to publish that represents this target outside the repo.\n    :param dependencies: List of :class:`twitter.pants.base.target.Target` instances\n      this target depends on.\n    :type dependencies: list of targets\n    :param excludes: List of :class:`twitter.pants.targets.exclude.Exclude` instances\n      to filter this target's transitive dependencies against\n    :param resources: An optional list of paths (DEPRECATED) or ``resources``\n      targets containing resources that belong on this library's classpath.\n    :param exclusives: An optional map of exclusives tags. See CheckExclusives for details.\n    "
    ScalaLibrary.__init__(self, name, sources, java_sources, provides, dependencies, excludes, resources, exclusives=exclusives)
    self.add_labels('scalac_plugin')
    self.plugin = (plugin or name)
    self.classname = classname
