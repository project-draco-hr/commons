@post_clear_cache
@default_index
def merge_tree(self, rhs, base=None):
    "Merge the given rhs treeish into the current index, possibly taking\n\t\ta common base treeish into account.\n\n\t\tAs opposed to the from_tree_ method, this allows you to use an already\n\t\texisting tree as the left side of the merge\n\n\t\t:param rhs:\n\t\t\ttreeish reference pointing to the 'other' side of the merge.\n\n\t\t:param base:\n\t\t\toptional treeish reference pointing to the common base of 'rhs' and\n\t\t\tthis index which equals lhs\n\n\t\t:return:\n\t\t\tself ( containing the merge and possibly unmerged entries in case of\n\t\t\tconflicts )\n\n\t\t:raise GitCommandError:\n\t\t\tIf there is a merge conflict. The error will\n\t\t\tbe raised at the first conflicting path. If you want to have proper\n\t\t\tmerge resolution to be done by yourself, you have to commit the changed\n\t\t\tindex ( or make a valid tree from it ) and retry with a three-way\n\t\t\tindex.from_tree call. "
    args = ['--aggressive', '-i', '-m']
    if (base is not None):
        args.append(base)
    args.append(rhs)
    self.repo.git.read_tree(args)
    return self
