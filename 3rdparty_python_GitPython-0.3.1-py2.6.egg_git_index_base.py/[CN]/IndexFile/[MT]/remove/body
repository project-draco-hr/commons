@post_clear_cache
@default_index
def remove(self, items, working_tree=False, **kwargs):
    "Remove the given items from the index and optionally from\n\t\tthe working tree as well.\n\n\t\t:param items:\n\t\t\tMultiple types of items are supported which may be be freely mixed.\n\n\t\t\t- path string\n\t\t\t\tRemove the given path at all stages. If it is a directory, you must\n\t\t\t\tspecify the r=True keyword argument to remove all file entries\n\t\t\t\tbelow it. If absolute paths are given, they will be converted\n\t\t\t\tto a path relative to the git repository directory containing\n\t\t\t\tthe working tree\n\n\t\t\t\tThe path string may include globs, such as *.c.\n\n\t\t\t- Blob Object\n\t\t\t\tOnly the path portion is used in this case.\n\n\t\t\t- BaseIndexEntry or compatible type\n\t\t\t\tThe only relevant information here Yis the path. The stage is ignored.\n\n\t\t:param working_tree:\n\t\t\tIf True, the entry will also be removed from the working tree, physically\n\t\t\tremoving the respective file. This may fail if there are uncommited changes\n\t\t\tin it.\n\n\t\t:param kwargs:\n\t\t\tAdditional keyword arguments to be passed to git-rm, such\n\t\t\tas 'r' to allow recurive removal of\n\n\t\t:return:\n\t\t\tList(path_string, ...) list of repository relative paths that have\n\t\t\tbeen removed effectively.\n\t\t\tThis is interesting to know in case you have provided a directory or\n\t\t\tglobs. Paths are relative to the repository. "
    args = list()
    if (not working_tree):
        args.append('--cached')
    args.append('--')
    paths = self._items_to_rela_paths(items)
    removed_paths = self.repo.git.rm(args, paths, **kwargs).splitlines()
    return [p[4:(-1)] for p in removed_paths]
