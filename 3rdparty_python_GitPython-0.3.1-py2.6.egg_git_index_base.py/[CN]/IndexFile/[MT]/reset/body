@default_index
def reset(self, commit='HEAD', working_tree=False, paths=None, head=False, **kwargs):
    "Reset the index to reflect the tree at the given commit. This will not\n\t\tadjust our HEAD reference as opposed to HEAD.reset by default.\n\n\t\t:param commit:\n\t\t\tRevision, Reference or Commit specifying the commit we should represent.\n\t\t\tIf you want to specify a tree only, use IndexFile.from_tree and overwrite\n\t\t\tthe default index.\n\n\t\t:param working_tree:\n\t\t\tIf True, the files in the working tree will reflect the changed index.\n\t\t\tIf False, the working tree will not be touched\n\t\t\tPlease note that changes to the working copy will be discarded without\n\t\t\twarning !\n\t\t\t\n\t\t:param head:\n\t\t\tIf True, the head will be set to the given commit. This is False by default,\n\t\t\tbut if True, this method behaves like HEAD.reset.\n\t\t\t\n\t\t:param paths: if given as an iterable of absolute or repository-relative paths,\n\t\t\tonly these will be reset to their state at the given commit'ish.\n\t\t\tThe paths need to exist at the commit, otherwise an exception will be \n\t\t\traised.\n\n\t\t:param kwargs:\n\t\t\tAdditional keyword arguments passed to git-reset\n\t\t\t\n\t\t.. note:: IndexFile.reset, as opposed to HEAD.reset, will not delete anyfiles\n\t\t\tin order to maintain a consistent working tree. Instead, it will just\n\t\t\tcheckout the files according to their state in the index.\n\t\t\tIf you want git-reset like behaviour, use *HEAD.reset* instead.\n\n\t\t:return: self "
    new_inst = type(self).from_tree(self.repo, commit)
    if (not paths):
        self.entries = new_inst.entries
    else:
        nie = new_inst.entries
        for path in paths:
            path = self._to_relative_path(path)
            try:
                key = entry_key(path, 0)
                self.entries[key] = nie[key]
            except KeyError:
                try:
                    del self.entries[key]
                except KeyError:
                    pass
    self.write()
    if working_tree:
        self.checkout(paths=paths, force=True)
    if head:
        self.repo.head.set_commit(self.repo.commit(commit), logmsg=('%s: Updating HEAD' % commit))
    return self
