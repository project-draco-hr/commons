def _write_path_to_stdin(self, proc, filepath, item, fmakeexc, fprogress, read_from_stdout=True):
    "Write path to proc.stdin and make sure it processes the item, including progress.\n\n\t\t:return: stdout string\n\t\t:param read_from_stdout: if True, proc.stdout will be read after the item\n\t\t\twas sent to stdin. In that case, it will return None\n\t\t:note: There is a bug in git-update-index that prevents it from sending\n\t\t\treports just in time. This is why we have a version that tries to\n\t\t\tread stdout and one which doesn't. In fact, the stdout is not\n\t\t\timportant as the piped-in files are processed anyway and just in time\n\t\t:note: Newlines are essential here, gits behaviour is somewhat inconsistent\n\t\t\ton this depending on the version, hence we try our best to deal with\n\t\t\tnewlines carefully. Usually the last newline will not be sent, instead\n\t\t\twe will close stdin to break the pipe."
    fprogress(filepath, False, item)
    rval = None
    try:
        proc.stdin.write(('%s\n' % filepath))
    except IOError:
        raise fmakeexc()
    proc.stdin.flush()
    if read_from_stdout:
        rval = proc.stdout.readline().strip()
    fprogress(filepath, True, item)
    return rval
