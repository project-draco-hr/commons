@classmethod
def iter_generated_sources(cls, target, root, config=None):
    config = (config or Config.load())
    for (target_type, target_builder) in cls.GENERATED_TARGETS.items():
        if isinstance(target, target_type):
            builder_cls = target_builder
            break
    else:
        raise TypeError(('write_generated_sources could not find suitable code generator for %s' % type(target)))
    builder = builder_cls(target, root, config)
    builder.generate()
    for (root, _, files) in os.walk(builder.package_root):
        for fn in files:
            target_file = os.path.join(root, fn)
            yield (os.path.relpath(target_file, builder.package_root), target_file)
