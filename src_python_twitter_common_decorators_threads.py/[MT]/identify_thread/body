def identify_thread(instancemethod):
    "Simple decorator to expose Linux thread-IDs on an object.\n\n  On Linux, each thread (aka light-weight process) is represented by a unique thread ID, an integer\n  in the same namespace as process IDs. (This is distinct from the opaque identifier provided by the\n  pthreads interface, which is essentially useless outside the context of the pthreads library.)\n  This decorator provides a means to expose this thread ID on Python objects - most likely,\n  subclasses of threading.Thread. The benefit of this is that operating-system level process\n  information (for example, anything exposed through /proc on Linux) can then be correlated directly\n  to Python thread objects.\n\n  The means for retrieving the thread ID is extremely nonportable - specifically, it will only work\n  on i386 and x86_64 Linux systems. However, including this decorator more generally should be safe\n  and not break any cross-platform code - it will just result in an 'UNKNOWN' thread ID.\n\n  This decorator can be used to wrap any instance method (and technically also class methods). To be\n  truly useful, though, it should be used to wrap the run() function of a class utilising the Python\n  threading API (i.e. a derivative of threading.Thread)\n\n  Example usage:\n    >>> import threading, time\n    >>> from twitter.common.decorators import identify_thread\n    >>> class MyThread(threading.Thread):\n    ...   def __init__(self):\n    ...     threading.Thread.__init__(self)\n    ...     do_some_other_init()\n    ...     self.daemon = True\n    ...   @identify_thread\n    ...   def run(self):\n    ...     while True:\n    ...       do_something_awesome()\n    ...\n    >>> thread1, thread2, thread3 = MyThread(), MyThread(), MyThread()\n    >>> thread1.start(), thread2.start(), thread3.start()\n    (None, None, None)\n    >>> time.sleep(0.1)\n    >>> for thread in (thread1, thread2, thread3):\n    ...   print '%s => %s' % (thread.name, thread.__thread_id)\n    ...\n    Thread-1 => 19767\n    Thread-2 => 19768\n    Thread-3 => 19769\n    >>> import os; os.system('ps -L -p %d -o pid,ppid,tid,thcount,cmd' % os.getpid())\n      PID  PPID   TID THCNT CMD\n    19764 19760 19764     4 /usr/bin/python2.6 /tmp/tmpSW3VIC\n    19764 19760 19767     4 /usr/bin/python2.6 /tmp/tmpSW3VIC\n    19764 19760 19768     4 /usr/bin/python2.6 /tmp/tmpSW3VIC\n    19764 19760 19769     4 /usr/bin/python2.6 /tmp/tmpSW3VIC\n\n  Note that there will be a non-zero delay between when the thread is started and when the thread ID\n  attribute (self.__thread_id) is available.\n\n  "

    @wraps(instancemethod)
    def identified(self, *args, **kwargs):
        tid = __gettid()
        if (tid == (-1)):
            self.__thread_id = 'UNKNOWN'
        else:
            self.__thread_id = tid
            if isinstance(self, threading.Thread):
                self.setName(('%s [TID=%d]' % (self.name, self.__thread_id)))
        return instancemethod(self, *args, **kwargs)
    return identified
