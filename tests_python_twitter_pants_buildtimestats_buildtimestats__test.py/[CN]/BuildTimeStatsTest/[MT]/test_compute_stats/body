def test_compute_stats(self):
    executed_goals = {'resolve-idl': {'idl': [0.0007281303405761719], 'extract': [3.0994415283203125e-06], }, 'thriftstore-codegen': {'thriftstore-codegen': [0.0001010894775390625], }, 'gen': {'tweetypie-fetch': [0.02863287925720215], 'thrift': [0.016566991806030273], 'protoc': [0.0038318634033203125], 'antlr': [0.0020389556884765625], 'thriftstore-dml-gen': [0.0022170543670654297], 'tweetypie-clean': [0.00542902946472168], }, 'resolve': {'ivy': [0.0009770393371582031], }, 'compile': {'checkstyle': [0.0005700588226318359], }, 'test': {'junit': [9.107589721679688e-05], 'specs': [0.0015749931335449219], }, }
    with temporary_file() as temp_fd:
        bs = BuildTimeStats(temp_fd.name)
        actual_timings = bs.compute_stats(executed_goals, 100)
        expected_timings = [{'phase': 'resolve', 'total': 0.0009770393371582031, 'goal': 'ivy', }, {'phase': 'resolve-idl', 'total': 0.0007281303405761719, 'goal': 'idl', }, {'phase': 'resolve-idl', 'total': 3.0994415283203125e-06, 'goal': 'extract', }, {'phase': 'resolve-idl', 'total': 0.0007312297821044922, 'goal': 'phase_total', }, {'phase': 'compile', 'total': 0.0005700588226318359, 'goal': 'checkstyle', }, {'phase': 'thriftstore-codegen', 'total': 0.0001010894775390625, 'goal': 'thriftstore-codegen', }, {'phase': 'test', 'total': 9.107589721679688e-05, 'goal': 'junit', }, {'phase': 'test', 'total': 0.0015749931335449219, 'goal': 'specs', }, {'phase': 'test', 'total': 0.0016660690307617188, 'goal': 'phase_total', }, {'phase': 'gen', 'total': 0.0038318634033203125, 'goal': 'protoc', }, {'phase': 'gen', 'total': 0.0020389556884765625, 'goal': 'antlr', }, {'phase': 'gen', 'total': 0.02863287925720215, 'goal': 'tweetypie-fetch', }, {'phase': 'gen', 'total': 0.00542902946472168, 'goal': 'tweetypie-clean', }, {'phase': 'gen', 'total': 0.0022170543670654297, 'goal': 'thriftstore-dml-gen', }, {'phase': 'gen', 'total': 0.016566991806030273, 'goal': 'thrift', }, {'phase': 'gen', 'total': 0.058716773986816406, 'goal': 'phase_total', }, {'phase': 'cmd_total', 'total': 100, 'goal': 'cmd_total', }]
        self.assertEqual(actual_timings, expected_timings)
