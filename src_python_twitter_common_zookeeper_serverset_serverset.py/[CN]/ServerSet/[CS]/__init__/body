def __init__(self, zk, path, underlying=None, on_join=None, on_leave=None, **kwargs):
    '\n      Construct a ServerSet at :path given zookeeper handle :zh.\n\n      If :underlying is specified, use that as the underlying Group implementation.  Must be a\n      subclass of twitter.common.zookeeper.group.GroupInterface.\n\n      If :on_join is specified, it will be called with a ServiceInstance object every time a\n      new service joins the ServerSet.  If :on_leave is specified, it will be called with\n      a ServiceInstance object every time a server leaves the ServerSet.\n\n      All remaining arguments are passed to the underlying Group implementation.\n    '
    underlying = (underlying or first((pick_group(zk, on_join, on_leave) for pick_group in GROUP_SELECTORS)))
    assert issubclass(underlying, GroupInterface), ('Underlying group implementation must be a subclass of GroupInterface, got %s' % type(underlying))
    self._path = path
    self._group = underlying(zk, path, **kwargs)

    def devnull(*args, **kw):
        pass
    self._on_join = (on_join or devnull)
    self._on_leave = (on_leave or devnull)
    self._members = {}
    if (on_join or on_leave):
        self._internal_monitor(set(self._members))
