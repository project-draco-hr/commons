{
  Preconditions.checkNotNull(duplicateHandler);
  Predicate<CharSequence> skipPath=Predicates.or(Iterables.transform(ImmutableList.copyOf(skipPatterns),AS_PATH_SELECTOR));
  final Iterable<ReadableEntry> entries=getEntries(skipPath,duplicateHandler);
  FileUtils.SYSTEM_TMP.doWithFile(new ExceptionalClosure<File,IOException>(){
    @Override public void execute(    File tmp) throws IOException {
      try {
        JarWriter writer=jarWriter(tmp,compress);
        writer.write(JarFile.MANIFEST_NAME,manifest == null ? DEFAULT_MANIFEST : manifest);
        List<ReadableJarEntry> jarEntries=Lists.newArrayList();
        for (        ReadableEntry entry : entries) {
          if (entry instanceof ReadableJarEntry) {
            jarEntries.add((ReadableJarEntry)entry);
          }
 else {
            writer.write(entry.getJarPath(),entry.contents);
          }
        }
        copyJarFiles(writer,jarEntries);
      }
 catch (      IOException e) {
        throw closer.rethrow(e);
      }
 finally {
        closer.close();
      }
      if (!tmp.renameTo(target)) {
        throw new JarCreationException(String.format("Problem moving created jar from %s to %s",tmp,target));
      }
    }
  }
);
  return target;
}
