def _get_info(self, fullmodname):
    "Internal helper for find_module() and load_module().\n\n    Args:\n      fullmodname: The dot-separated full module name, e.g. 'django.core.mail'.\n\n    Returns:\n      A tuple (submodname, is_package, relpath) where:\n        submodname: The final component of the module name, e.g. 'mail'.\n        is_package: A bool indicating whether this is a package.\n        relpath: The path to the module's source code within to the zipfile.\n\n    Raises:\n      ImportError if the module is not found in the archive.\n    "
    parts = fullmodname.split('.')
    submodname = parts[(-1)]
    for (suffix, is_package) in EggZipImporter._SEARCH_ORDER:
        relpath = os.path.join(self.prefix, (submodname + suffix.replace('/', os.sep)))
        self._log(('_get_info(%s) searching relpath:%s, suffix:%s, is_package:%s' % (fullmodname, relpath, suffix, is_package)), at_level=3)
        self._log(('  - is %s a file?' % os.path.join(self.archive, relpath)), at_level=3)
        if (not Nested.isfile(os.path.join(self.archive, relpath))):
            self._log('    nope', at_level=4)
        else:
            self._log(('    yep! submodname: %s, is_package: %s, fullpath: %s' % (submodname, is_package, relpath)), at_level=4)
            return (submodname, is_package, relpath)
    msg = ("Can't find module %s in zipfile %s with prefix %r" % (fullmodname, self.archive, self.prefix))
    self._log(msg, at_level=3)
    raise EggZipImporter.ZipImportError(msg)
