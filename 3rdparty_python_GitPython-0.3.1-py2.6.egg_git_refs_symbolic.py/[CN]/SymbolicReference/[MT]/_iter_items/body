@classmethod
def _iter_items(cls, repo, common_path=None):
    if (common_path is None):
        common_path = cls._common_path_default
    rela_paths = set()
    for (root, dirs, files) in os.walk(join_path_native(repo.git_dir, common_path)):
        if ('refs/' not in root):
            refs_id = [i for (i, d) in enumerate(dirs) if (d == 'refs')]
            if refs_id:
                dirs[0:] = ['refs']
        for f in files:
            abs_path = to_native_path_linux(join_path(root, f))
            rela_paths.add(abs_path.replace((to_native_path_linux(repo.git_dir) + '/'), ''))
    for (sha, rela_path) in cls._iter_packed_refs(repo):
        if rela_path.startswith(common_path):
            rela_paths.add(rela_path)
    for path in sorted(rela_paths):
        try:
            yield cls.from_path(repo, path)
        except ValueError:
            continue
