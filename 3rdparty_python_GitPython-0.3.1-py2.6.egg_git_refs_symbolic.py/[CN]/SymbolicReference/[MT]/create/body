@classmethod
def create(cls, repo, path, reference='HEAD', force=False, logmsg=None):
    'Create a new symbolic reference, hence a reference pointing to another reference.\n\t\t\n\t\t:param repo:\n\t\t\tRepository to create the reference in \n\t\t\t\n\t\t:param path:\n\t\t\tfull path at which the new symbolic reference is supposed to be \n\t\t\tcreated at, i.e. "NEW_HEAD" or "symrefs/my_new_symref"\n\t\t\t\n\t\t:param reference:\n\t\t\tThe reference to which the new symbolic reference should point to.\n\t\t\tIf it is a commit\'ish, the symbolic ref will be detached.\n\t\t\n\t\t:param force:\n\t\t\tif True, force creation even if a symbolic reference with that name already exists.\n\t\t\tRaise OSError otherwise\n\t\t\t\n\t\t:param logmsg:\n\t\t\tIf not None, the message to append to the reflog. Otherwise no reflog\n\t\t\tentry is written.\n\t\t\t\n\t\t:return: Newly created symbolic Reference\n\t\t\t\n\t\t:raise OSError:\n\t\t\tIf a (Symbolic)Reference with the same name but different contents\n\t\t\talready exists.\n\t\t\n\t\t:note: This does not alter the current HEAD, index or Working Tree'
    return cls._create(repo, path, cls._resolve_ref_on_create, reference, force, logmsg)
