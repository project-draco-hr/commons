def console_output(self, _):
    buildfiles = OrderedSet()
    if self._dependees_type:
        base_paths = OrderedSet()
        for dependees_type in self._dependees_type:
            try:
                (from_list, module, type_name) = dependees_type.rsplit('.', 2)
                __import__(('%s.%s' % (from_list, module)), fromlist=[from_list])
            except (ImportError, ValueError):
                if hasattr(twitter.pants.base.build_file_context, dependees_type):
                    type_name = getattr(twitter.pants.base.build_file_context, dependees_type)
                else:
                    raise TaskError(('Invalid type name: %s' % dependees_type))
            base_paths.update(SourceRoot.roots(type_name))
        if (not base_paths):
            raise TaskError(((('No SourceRoot set for any target type in %s.' % self._dependees_type) + '\nPlease define a source root in BUILD file as:') + ("\n\tsource_root('<src-folder>', %s)" % ', '.join(self._dependees_type))))
        for base_path in base_paths:
            buildfiles.update(BuildFile.scan_buildfiles(get_buildroot(), base_path))
    else:
        buildfiles = BuildFile.scan_buildfiles(get_buildroot())
    dependees_by_target = defaultdict(set)
    for buildfile in buildfiles:
        for address in Target.get_all_addresses(buildfile):
            for target in Target.get(address).resolve():
                target = self.get_concrete_target(target)
                if hasattr(target, 'dependencies'):
                    for dependencies in target.dependencies:
                        for dependency in dependencies.resolve():
                            dependency = self.get_concrete_target(dependency)
                            dependees_by_target[dependency].add(target)
    roots = set(self.context.target_roots)
    if self._closed:
        for root in roots:
            yield str(root.address)
    for dependant in self.get_dependants(dependees_by_target, roots):
        yield str(dependant.address)
