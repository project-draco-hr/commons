{
  int cacheSize=10;
  final List<Integer> evictedKeys=Lists.newLinkedList();
  Closure<Pair<Integer,Integer>> listener=new Closure<Pair<Integer,Integer>>(){
    @Override public void execute(    Pair<Integer,Integer> evicted){
      evictedKeys.add(evicted.getFirst());
    }
  }
;
  LRUCache<Integer,Integer> cache=LRUCache.<Integer,Integer>builder().maxSize(cacheSize).evictionListener(listener).build();
  for (int i=0; i < cacheSize; i++) {
    cache.put(i,i);
  }
  for (  int access : Arrays.asList(0,7,2,8,4,6,9,1,5)) {
    assertNotNull(cache.get(access));
  }
  assertThat(evictedKeys.isEmpty(),is(true));
  cache.put(cacheSize + 1,cacheSize + 1);
  assertThat(evictedKeys,is(Arrays.asList(3)));
}
