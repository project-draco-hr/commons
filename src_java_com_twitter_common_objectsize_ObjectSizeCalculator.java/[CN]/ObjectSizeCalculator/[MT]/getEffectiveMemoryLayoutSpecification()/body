{
  final String vmName=System.getProperty("java.vm.name");
  if (vmName == null || !vmName.startsWith("Java HotSpot(TM) ")) {
    throw new UnsupportedOperationException("ObjectSizeCalculator only supported on HotSpot VM");
  }
  final String dataModel=System.getProperty("sun.arch.data.model");
  if ("32".equals(dataModel)) {
    return new MemoryLayoutSpecification(){
      @Override public int getArrayHeaderSize(){
        return 12;
      }
      @Override public int getObjectHeaderSize(){
        return 8;
      }
      @Override public int getObjectPadding(){
        return 8;
      }
      @Override public int getReferenceSize(){
        return 4;
      }
      @Override public int getSuperclassFieldPadding(){
        return 4;
      }
    }
;
  }
 else   if (!"64".equals(dataModel)) {
    throw new UnsupportedOperationException("Unrecognized value '" + dataModel + "' of sun.arch.data.model system property");
  }
  final String strVmVersion=System.getProperty("java.vm.version");
  final int vmVersion=Integer.parseInt(strVmVersion.substring(0,strVmVersion.indexOf('.')));
  if (vmVersion >= 17) {
    long maxMemory=0;
    for (    MemoryPoolMXBean mp : ManagementFactory.getMemoryPoolMXBeans()) {
      maxMemory+=mp.getUsage().getMax();
    }
    if (maxMemory < 30L * 1024 * 1024* 1024) {
      return new MemoryLayoutSpecification(){
        @Override public int getArrayHeaderSize(){
          return 16;
        }
        @Override public int getObjectHeaderSize(){
          return 12;
        }
        @Override public int getObjectPadding(){
          return 8;
        }
        @Override public int getReferenceSize(){
          return 4;
        }
        @Override public int getSuperclassFieldPadding(){
          return 4;
        }
      }
;
    }
  }
  return new MemoryLayoutSpecification(){
    @Override public int getArrayHeaderSize(){
      return 24;
    }
    @Override public int getObjectHeaderSize(){
      return 16;
    }
    @Override public int getObjectPadding(){
      return 8;
    }
    @Override public int getReferenceSize(){
      return 8;
    }
    @Override public int getSuperclassFieldPadding(){
      return 8;
    }
  }
;
}
