{
  long fieldsSize=0;
  final List<Field> referenceFields=new LinkedList<Field>();
  for (  Field f : clazz.getDeclaredFields()) {
    if (Modifier.isStatic(f.getModifiers())) {
      continue;
    }
    final Class<?> type=f.getType();
    if (type.isPrimitive()) {
      fieldsSize+=getPrimitiveFieldSize(type);
    }
 else {
      f.setAccessible(true);
      referenceFields.add(f);
      fieldsSize+=referenceSize;
    }
  }
  final Class<?> superClass=clazz.getSuperclass();
  if (superClass != null) {
    final ClassSizeInfo superClassInfo=classSizeInfos.getUnchecked(superClass);
    fieldsSize+=roundTo(superClassInfo.fieldsSize,superclassFieldPadding);
    referenceFields.addAll(Arrays.asList(superClassInfo.referenceFields));
  }
  this.fieldsSize=fieldsSize;
  this.objectSize=roundTo(objectHeaderSize + fieldsSize,objectPadding);
  this.referenceFields=referenceFields.toArray(new Field[referenceFields.size()]);
}
