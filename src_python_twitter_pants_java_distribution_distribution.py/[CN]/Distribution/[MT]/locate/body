@classmethod
def locate(cls, minimum_version=None, jdk=False):
    'Finds a java distribution that meets any given constraints and returns it.\n\n    First looks in JDK_HOME and JAVA_HOME if defined falling back to a search on the PATH.\n    Raises Distribution.Error if no suitable java distribution could be found.\n    '

    def home_bin_path(home_env_var):
        home = os.environ.get(home_env_var)
        return (os.path.join(home, 'bin') if home else None)

    def search_path():
        yield home_bin_path('JDK_HOME')
        yield home_bin_path('JAVA_HOME')
        path = os.environ.get('PATH')
        if path:
            for p in path.strip().split(os.pathsep):
                yield p
    for path in filter(None, search_path()):
        try:
            dist = cls(path, minimum_version=minimum_version, jdk=jdk)
            dist.validate()
            log.debug(('Located %s for constraints: minimum_version %s, jdk %s' % (dist, minimum_version, jdk)))
            return dist
        except (ValueError, cls.Error):
            pass
    raise cls.Error(('Failed to locate a %s distribution with minimum_version %s' % (('JDK' if jdk else 'JRE'), minimum_version)))
