def _register_products(self, targets, sources_by_target, analysis_file):
    classes_by_source = self.context.products.get_data('classes_by_source')
    classes_by_target = self.context.products.get_data('classes_by_target')
    resources_by_target = self.context.products.get_data('resources_by_target')
    if ((classes_by_source is not None) or (classes_by_target is not None)):
        computed_classes_by_source = self._compute_classes_by_source(analysis_file)
        for target in targets:
            target_products = (classes_by_target[target] if (classes_by_target is not None) else None)
            for source in sources_by_target[target]:
                classes = computed_classes_by_source.get(source, [])
                if (classes_by_target is not None):
                    target_products.add_abs_paths(self._classes_dir, classes)
                if (classes_by_source is not None):
                    classes_by_source[source].add_abs_paths(self._classes_dir, classes)
    if (resources_by_target is not None):
        for target in targets:
            target_resources = resources_by_target[target]
            for (root, abs_paths) in self.extra_products(target):
                target_resources.add_abs_paths(root, abs_paths)
