@staticmethod
def setup_parser(subcls, option_group, args, mkflag):
    NailgunTask.setup_parser(option_group, args, mkflag)
    option_group.add_option(mkflag('warnings'), mkflag('warnings', negate=True), dest=(subcls._language + '_compile_warnings'), default=True, action='callback', callback=mkflag.set_bool, help='[%default] Compile with all configured warnings enabled.')
    option_group.add_option(mkflag('partition-size-hint'), dest=(subcls._language + '_partition_size_hint'), action='store', type='int', default=(-1), help='Roughly how many source files to attempt to compile together. Set to a large number to compile all sources together. Set this to 0 to compile target-by-target. Default is set in pants.ini.')
    option_group.add_option(mkflag('missing-deps'), dest=(subcls._language + '_missing_deps'), choices=['off', 'warn', 'fatal'], default='fatal', help=(('[%default] One of off, warn, fatal. Check for missing dependencies in ' + subcls._language) + 'code. Reports actual dependencies A -> B where there is no transitive BUILD file dependency path from A to B.If fatal, missing deps are treated as a build error.'))
    option_group.add_option(mkflag('missing-direct-deps'), dest=(subcls._language + '_missing_direct_deps'), choices=['off', 'warn', 'fatal'], default='off', help=(('[%default] One of off, warn, fatal. Check for missing direct dependencies in ' + subcls._language) + ' code. Reports actual dependencies A -> B where there is no direct BUILD file dependency path from A to B. This is a very strict check, as in practice it is common to rely on transitive, non-direct dependencies, e.g., due to type inference or when the main target in a BUILD file is modified to depend on other targets in the same BUILD file as an implementation detail. It may still be useful to set it to fatal temorarily, to detect these.'))
    option_group.add_option(mkflag('unnecessary-deps'), dest=(subcls._language + '_unnecessary_deps'), choices=['off', 'warn', 'fatal'], default='off', help=(('[%default] One of off, warn, fatal. Check for declared dependencies in ' + subcls._language) + ' code that are not needed. This is a very strict check. For example, generated code will often legitimately have BUILD dependencies that are unused in practice.'))
