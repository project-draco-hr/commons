def _process_target_partition(self, partition, classpath):
    'Needs invoking only on invalid targets.\n\n    partition - a triple (vts, sources_by_target, analysis_file).\n    classpath - a list of classpath entries.\n\n    May be invoked concurrently on independent target sets.\n\n    Postcondition: The individual targets in vts are up-to-date, as if each were\n                   compiled individually.\n    '
    (vts, sources, analysis_file) = partition
    if (not sources):
        self.context.log.warn(('Skipping %s compile for targets with no sources:\n  %s' % (self._language, vts.targets)))
    else:
        self.context.log.info('Compiling a partition containing ', items_to_report_element(sources, 'source'), ' in ', items_to_report_element([t.address.reference() for t in vts.targets], 'target'), '.')
        with self.context.new_workunit('compile'):
            vts.force_invalidate()
            self.compile(self._args, classpath, sources, self._classes_dir, analysis_file)
