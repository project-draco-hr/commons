def _compute_classpath_elements_by_class(self, classpath):

    def non_product(path):
        return (not (path.startswith(self._pants_workdir) and os.path.isdir(path)))
    classpath_jars = filter(non_product, classpath)
    if (self._class_to_jarfile is None):
        self._class_to_jarfile = {}
        for jarpath in (self.find_all_bootstrap_jars() + classpath_jars):
            if (os.path.isfile(jarpath) and (jarpath.endswith('.jar') or jarpath.endswith('.zip'))):
                with open_zip(jarpath, 'r') as jar:
                    for cls in jar.namelist():
                        if (cls.endswith('.class') and (not (cls in self._class_to_jarfile))):
                            self._class_to_jarfile[cls] = jarpath
            elif os.path.isdir(jarpath):
                for (dirpath, _, filenames) in os.walk(jarpath, followlinks=True):
                    for f in filter((lambda x: x.endswith('.class')), filenames):
                        cls = os.path.relpath(os.path.join(dirpath, f), jarpath)
                        if (not (cls in self._class_to_jarfile)):
                            self._class_to_jarfile[cls] = jarpath
    return self._class_to_jarfile
