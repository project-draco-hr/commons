def _create_artifact_data(self, targets, target_path):
    props_by_repo = {}

    def get_publish_properties(target):
        if (target.provides.repo not in props_by_repo):
            with open(target.provides.repo.push_db) as props:
                props_by_repo[target.provides.repo] = Properties.load(props)
        return props_by_repo.get(target.provides.repo)
    data = {}
    for target in targets:
        if is_exported(target):
            props = get_publish_properties(target)
            for source in target.sources:
                source_path = os.path.join(self.java_src_prefix, source)
                key = ('%s%%%s' % (target.provides.org, target.provides.name))
                if os.path.exists(source_path):
                    if (('revision.major.%s' % key) in props):
                        major = props[('revision.major.%s' % key)]
                        minor = props[('revision.minor.%s' % key)]
                        patch = props[('revision.patch.%s' % key)]
                        revision = ('%s.%s.%s' % (major, minor, patch))
                    else:
                        revision = 'NOT-PUBLISHED-YET'
                    data[source] = dict(org=target.provides.org, name=target.provides.name, rev=revision, artifactBaseUrl=target.provides.repo.url)
    with open(self._artifact_data_path(target_path), mode='w') as data_file:
        print(('var artifacts = %s;' % json.dumps(data, sort_keys=True, indent=2)), file=data_file)
        print(("artifacts.title = '%s';" % self.options.title), file=data_file)
        print(("artifacts.publishDate = '%s';" % datetime.now().strftime('%m/%d/%Y %I:%M %p')), file=data_file)
        print(('artifacts.hasChangelog = %s;' % ('true' if self.link_changelog else 'false')), file=data_file)
