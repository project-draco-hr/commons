def _calculate_genfiles(self, sources):
    args = [self.thriftstore_codegen, 'parse']
    args.extend(sources)
    self.context.log.debug(('Executing: %s' % ' '.join(args)))
    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, error) = p.communicate()
    result = p.wait()
    if (result != 0):
        raise TaskError(('%s ... exited non-zero (%i)' % (self.thriftstore_codegen, result)))
    thriftstore_classes = filter((lambda s: (s.strip() != '')), output.split('\n'))
    self.context.log.debug(('Generated files: \n\t\t%s' % '\n\t\t'.join(thriftstore_classes)))
    return thriftstore_classes
