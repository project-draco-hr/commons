{
  Function<Iterable<String>,String> judge=new Function<Iterable<String>,String>(){
    @Override public String apply(    Iterable<String> input){
      return Ordering.natural().max(input);
    }
  }
;
  ZooKeeperClient zkClient1=createZkClient(TIMEOUT);
  final CandidateImpl candidate1=new CandidateImpl(createGroup(zkClient1),judge,CandidateImpl.IP_ADDRESS_DATA_SUPPLIER){
    @Override public String toString(){
      return "Leader1";
    }
  }
;
  ZooKeeperClient zkClient2=createZkClient(TIMEOUT);
  final CandidateImpl candidate2=new CandidateImpl(createGroup(zkClient2),judge,CandidateImpl.IP_ADDRESS_DATA_SUPPLIER){
    @Override public String toString(){
      return "Leader2";
    }
  }
;
  Reign candidate1Reign=new Reign("1",candidate1);
  Reign candidate2Reign=new Reign("2",candidate2);
  candidate1.offerLeadership(candidate1Reign);
  assertSame(candidate1,candidateBuffer.takeLast());
  Supplier<Boolean> candidate2Leader=candidate2.offerLeadership(candidate2Reign);
  assertSame(candidate2,candidateBuffer.takeLast());
  candidate1Reign.expectDefeated();
  assertTrue("Since the judge picks the newest member joining a group as leader candidate 1 " + "should be defeated and candidate 2 leader",candidate2Leader.get());
}
