{
  Optional<InetSocketAddress> primarySocket=serviceRegistry.getPrimarySocket();
  Map<String,InetSocketAddress> auxSockets=serviceRegistry.getAuxiliarySockets();
  InetSocketAddress primary;
  if (primarySocket.isPresent()) {
    primary=primarySocket.get();
  }
 else   if (auxPortAsPrimary.isPresent()) {
    primary=auxSockets.get(auxPortAsPrimary.get());
    if (primary == null) {
      throw new IllegalStateException("No auxiliary port named " + auxPortAsPrimary.get());
    }
  }
 else {
    throw new IllegalStateException("No primary service registered with LocalServiceRegistry," + " and -aux_port_as_primary was not specified.");
  }
  final EndpointStatus endpointStatus;
  try {
    endpointStatus=serverSet.join(primary,auxSockets,initialStatus);
    endpointSupplier.set(endpointStatus);
  }
 catch (  JoinException e) {
    LOG.log(Level.WARNING,"Failed to join ServerSet.",e);
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    LOG.log(Level.WARNING,"Interrupted while joining ServerSet.",e);
    Thread.currentThread().interrupt();
    throw new RuntimeException(e);
  }
  shutdownRegistry.addAction(new ExceptionalCommand<UpdateException>(){
    @Override public void execute() throws UpdateException {
      LOG.info("Leaving ServerSet.");
      endpointStatus.update(Status.DEAD);
    }
  }
);
}
