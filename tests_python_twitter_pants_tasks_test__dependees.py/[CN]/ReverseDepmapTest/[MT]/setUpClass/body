@classmethod
def setUpClass(cls):
    super(ReverseDepmapTest, cls).setUpClass()

    def create_target(path, name, alias=False, deps=()):
        cls.create_target(path, dedent(("\n          %(type)s(name='%(name)s',\n            dependencies=[%(deps)s]\n          )\n          " % dict(type=('dependencies' if alias else 'python_library'), name=name, deps=','.join((("pants('%s')" % dep) for dep in list(deps)))))))
    create_target('common/a', 'a', deps=['common/d'])
    create_target('common/b', 'b')
    create_target('common/c', 'c')
    create_target('common/d', 'd')
    create_target('tests/d', 'd', deps=['common/d'])
    create_target('overlaps', 'one', deps=['common/a', 'common/b'])
    create_target('overlaps', 'two', deps=['common/a', 'common/c'])
    create_target('overlaps', 'three', deps=['common/a', 'overlaps:one'])
    create_target('overlaps', 'four', alias=True, deps=['common/b'])
    create_target('overlaps', 'five', deps=['overlaps:four'])
    cls.create_target('resources/a', dedent("\n      resources(\n        name='a_resources',\n        sources=['a.resource']\n      )\n    "))
    cls.create_target('src/java/a', dedent("\n      java_library(\n        name='a_java',\n        resources=[pants('resources/a:a_resources')]\n      )\n    "))
    cls.create_target('src/thrift/example', dedent("\n      thrift_library(name='mybird', sources=None)\n      "))
    cls.create_target('src/thrift/example', dedent("\n      compiled_idl(name='compiled_scala', idl_deps=[pants(':mybird')])\n      "))
    create_target('src/thrift/dependent', 'my-example', deps=['src/thrift/example:mybird'])
    cls.create_target('src/java/example', dedent("\n      java_library(name='mybird', sources=['1.java'],\n                   dependencies=[jar(org='com', name='twitter')])\n      "))
    cls.create_target('src/java/example', dedent("\n      java_library(name='example2', \n                   dependencies=[pants(':mybird')],\n                   sources=['2.java'])\n      "))
