def __init__(self, context, confs=None):
    super(IvyResolve, self).__init__(context)
    self._ivy_bootstrapper = Bootstrapper.instance()
    self._cachedir = self._ivy_bootstrapper.ivy_cache_dir
    self._confs = (confs or context.config.getlist('ivy-resolve', 'confs', default=['default']))
    self._transitive = context.config.getbool('ivy-resolve', 'transitive', default=True)
    self._jvm_args = context.config.getlist('ivy-resolve', 'jvm_args', default=[])
    self._jvm_args.append('-Dsun.io.useCanonCaches=false')
    self._ivy_args = (context.options.ivy_args or context.config.getlist('ivy-resolve', 'ivy_args', default=[]))
    self._mutable_pattern = (context.options.ivy_mutable_pattern or context.config.get('ivy-resolve', 'mutable_pattern', default=None))
    if self._mutable_pattern:
        try:
            self._mutable_pattern = re.compile(self._mutable_pattern)
        except re.error as e:
            raise TaskError(('Invalid mutable pattern specified: %s %s' % (self._mutable_pattern, e)))
    self._work_dir = context.config.get('ivy-resolve', 'workdir')
    self._classpath_dir = os.path.join(self._work_dir, 'mapped')
    self._outdir = (context.options.ivy_resolve_outdir or os.path.join(self._work_dir, 'reports'))
    self._open = context.options.ivy_resolve_open
    self._report = (self._open or context.options.ivy_resolve_report)
    self._ivy_bootstrap_key = 'ivy'
    ivy_bootstrap_tools = context.config.getlist('ivy-resolve', 'bootstrap-tools', ':xalan')
    self._jvm_tool_bootstrapper.register_jvm_tool(self._ivy_bootstrap_key, ivy_bootstrap_tools)
    self._ivy_utils = IvyUtils(config=context.config, options=context.options, log=context.log)
    context.products.require_data('exclusives_groups')
    self.setup_artifact_cache_from_config(config_section='ivy-resolve')

    def parse_override(override):
        match = re.match('^([^#]+)#([^=]+)=([^\\s]+)$', override)
        if (not match):
            raise TaskError(('Invalid dependency override: %s' % override))
        (org, name, rev_or_url) = match.groups()

        def fmt_message(message, template):
            return (message % dict(overridden=('%s#%s;%s' % (template.org, template.module, template.version)), rev=rev_or_url, url=rev_or_url))
