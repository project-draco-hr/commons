def __init__(self, context, confs=None):
    nailgun_dir = context.config.get('ivy-resolve', 'nailgun_dir')
    NailgunTask.__init__(self, context, workdir=nailgun_dir)
    self._cachedir = (context.options.ivy_resolve_cache or context.config.get('ivy', 'cache_dir'))
    self._confs = (confs or context.config.getlist('ivy-resolve', 'confs'))
    self._work_dir = context.config.get('ivy-resolve', 'workdir')
    self._classpath_dir = os.path.join(self._work_dir, 'mapped')
    self._outdir = (context.options.ivy_resolve_outdir or os.path.join(self._work_dir, 'reports'))
    self._open = context.options.ivy_resolve_open
    self._report = (self._open or context.options.ivy_resolve_report)
    self._ivy_bootstrap_key = 'ivy'
    ivy_bootstrap_tools = context.config.getlist('ivy-resolve', 'bootstrap-tools', ':xalan')
    self._jvm_tool_bootstrapper.register_jvm_tool(self._ivy_bootstrap_key, ivy_bootstrap_tools)
    self._ivy_utils = IvyUtils(config=context.config, options=context.options, log=context.log)
    context.products.require_data('exclusives_groups')
    self.setup_artifact_cache_from_config(config_section='ivy-resolve')
