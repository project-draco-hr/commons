def _resolve_conflict(self, existing, proposed):
    if (proposed == existing):
        return existing
    elif (existing.force and proposed.force):
        raise TaskError(('Cannot force %s#%s to both rev %s and %s' % (proposed.org, proposed.name, existing.rev, proposed.rev)))
    elif existing.force:
        self.context.log.debug(('Ignoring rev %s for %s#%s already forced to %s' % (proposed.rev, proposed.org, proposed.name, existing.rev)))
        return existing
    elif proposed.force:
        self.context.log.debug(('Forcing %s#%s from %s to %s' % (proposed.org, proposed.name, existing.rev, proposed.rev)))
        return proposed
    else:
        try:
            if (Revision.lenient(proposed.rev) > Revision.lenient(existing.rev)):
                self.context.log.debug(('Upgrading %s#%s from rev %s  to %s' % (proposed.org, proposed.name, existing.rev, proposed.rev)))
                return proposed
            else:
                return existing
        except Revision.BadRevision as e:
            raise TaskError('Failed to parse jar revision', e)
