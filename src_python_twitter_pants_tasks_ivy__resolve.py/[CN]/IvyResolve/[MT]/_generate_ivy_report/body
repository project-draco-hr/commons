def _generate_ivy_report(self):
    (org, name) = self._identify()
    with open(os.path.join(self._cachedir, 'ivy-report.xsl')) as report_xsl:
        xsltree = etree.parse(report_xsl)
        transform = etree.XSLT(xsltree)
        reports = []
        for conf in self._confs:
            report_name = ('%s-%s-%s.xml' % (org, name, conf))
            with open(os.path.join(self._cachedir, report_name)) as report_xml:
                xmltree = etree.parse(report_xml)
                html_name = ('%s-%s-%s.html' % (org, name, conf))
                with safe_open(os.path.join(self._outdir, html_name), 'w') as report_html:
                    html_content = str(transform(xmltree))
                    report_html.write(html_content)
                    reports.append(report_html.name)
        css = os.path.join(self._outdir, 'ivy-report.css')
        if os.path.exists(css):
            os.unlink(css)
        shutil.copy(os.path.join(self._cachedir, 'ivy-report.css'), self._outdir)
        if self._open:
            binary_utils.open(*reports)
