def _generate_ivy_report(self):

    def make_empty_report(report, organisation, module, conf):
        no_deps_xml = ('<?xml version="1.0" encoding="UTF-8"?>\n<?xml-stylesheet type="text/xsl" href="ivy-report.xsl"?>\n<ivy-report version="1.0">\n\t<info\n\t\torganisation="%(organisation)s"\n\t\tmodule="%(module)s"\n\t\trevision="latest.integration"\n\t\tconf="%(conf)s"\n\t\tconfs="%(conf)s"\n\t\tdate="%(timestamp)s"/>\n</ivy-report>' % dict(organisation=organisation, module=module, conf=conf, timestamp=time.strftime('%Y%m%d%H%M%S')))
        with open(report, 'w') as report_handle:
            print(no_deps_xml, file=report_handle)
    classpath = self.profile_classpath(self._profile)
    reports = []
    (org, name) = self._ivy_utils.identify()
    xsl = os.path.join(self._cachedir, 'ivy-report.xsl')
    safe_mkdir(self._outdir, clean=True)
    for conf in self._confs:
        params = dict(org=org, name=name, conf=conf)
        xml = os.path.join(self._cachedir, ('%(org)s-%(name)s-%(conf)s.xml' % params))
        if (not os.path.exists(xml)):
            make_empty_report(xml, org, name, conf)
        out = os.path.join(self._outdir, ('%(org)s-%(name)s-%(conf)s.html' % params))
        opts = ['-IN', xml, '-XSL', xsl, '-OUT', out]
        if (0 != self.runjava_indivisible('org.apache.xalan.xslt.Process', classpath=classpath, opts=opts)):
            raise TaskError
        reports.append(out)
    css = os.path.join(self._outdir, 'ivy-report.css')
    if os.path.exists(css):
        os.unlink(css)
    shutil.copy(os.path.join(self._cachedir, 'ivy-report.css'), self._outdir)
    if self._open:
        binary_util.ui_open(*reports)
