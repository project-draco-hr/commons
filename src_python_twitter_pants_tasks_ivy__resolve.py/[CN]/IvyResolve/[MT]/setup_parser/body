@classmethod
def setup_parser(cls, option_group, args, mkflag):
    flag = mkflag('override')
    option_group.add_option(flag, action='append', dest='ivy_resolve_overrides', help=('Specifies a jar dependency override in the form:\n                            [org]#[name]=(revision|url)\n\n                            For example, to specify 2 overrides:\n                            %(flag)s=com.foo#bar=0.1.2 \\\n                            %(flag)s=com.baz#spam=file:///tmp/spam.jar\n                            ' % dict(flag=flag)))
    if _REPORT_AVAILABLE:
        report = mkflag('report')
        option_group.add_option(report, mkflag('report', negate=True), dest='ivy_resolve_report', action='callback', callback=mkflag.set_bool, default=False, help='[%default] Generate an ivy resolve html report')
        option_group.add_option(mkflag('open'), mkflag('open', negate=True), dest='ivy_resolve_open', default=False, action='callback', callback=mkflag.set_bool, help=('[%%default] Attempt to open the generated ivy resolve report in a browser (implies %s).' % report))
        option_group.add_option(mkflag('outdir'), dest='ivy_resolve_outdir', help='Emit ivy report outputs in to this directory.')
