def execute(self, targets):
    'Resolves the specified confs for the configured targets and returns an iterator over\n    tuples of (conf, jar path).\n    '
    groups = self.context.products.get_data('exclusives_groups')
    for group_key in groups.get_group_keys():
        group_targets = (groups.get_targets_for_group_key(group_key) & set(targets))
        classpath = self.ivy_resolve(group_targets, java_runner=self.runjava_indivisible, symlink_ivyxml=True)
        for conf in self._confs:
            for path in classpath:
                groups.update_compatible_classpaths(group_key, [(conf, path)])
        if self._report:
            self._generate_ivy_report(group_targets)
    if self.context.products.isrequired('ivy_jar_products'):
        self._populate_ivy_jar_products(targets)
    create_jardeps_for = self.context.products.isrequired(self._ivy_utils._mapfor_typename())
    if create_jardeps_for:
        genmap = self.context.products.get(self._ivy_utils._mapfor_typename())
        for target in filter(create_jardeps_for, targets):
            self._ivy_utils.mapjars(genmap, target, java_runner=self.runjava_indivisible)
