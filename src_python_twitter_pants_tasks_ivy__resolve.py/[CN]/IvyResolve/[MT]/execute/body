def execute(self, targets):
    '\n      Resolves the specified confs for the configured targets and returns an iterator over tuples\n      of (conf, jar path).\n    '

    def dirname_for_requested_targets(targets):
        'Where we put the classpath file for this set of targets.'
        sha = hashlib.sha1()
        for t in targets:
            sha.update(t.id)
        return sha.hexdigest()

    def is_classpath(target):
        return (is_jar(target) or (is_internal(target) and any((jar for jar in target.jar_dependencies if jar.rev))))
    groups = self.context.products.get_data('exclusives_groups')
    group_keys = groups.get_group_keys()
    none_group = groups.get_targets_for_group_key('')
    for group_key in groups.get_group_keys():
        group_targets = (groups.get_targets_for_group_key(group_key) & set(targets))
        classpath_targets = OrderedSet()
        for target in group_targets:
            classpath_targets.update(filter(is_classpath, filter(is_concrete, target.resolve())))
        target_workdir = os.path.join(self._work_dir, dirname_for_requested_targets(group_targets))
        target_classpath_file = os.path.join(target_workdir, 'classpath')
        with self.invalidated(classpath_targets, only_buildfiles=True, invalidate_dependents=True) as invalidation_check:
            if ((len(invalidation_check.invalid_vts) > 0) or (not os.path.exists(target_classpath_file))):
                self._exec_ivy(target_workdir, targets, (['-cachepath', target_classpath_file, '-confs'] + self._confs))
        if (not os.path.exists(target_classpath_file)):
            print(('Ivy failed to create classpath file at %s %s' % target_classpath_file))

        def safe_link(src, dest):
            if os.path.exists(dest):
                os.unlink(dest)
            os.symlink(src, dest)
        safe_link(target_classpath_file, self._classpath_file)
        ivyxml_symlink = os.path.join(self._work_dir, 'ivy.xml')
        target_ivyxml = os.path.join(target_workdir, 'ivy.xml')
        safe_link(target_ivyxml, ivyxml_symlink)
        if os.path.exists(self._classpath_file):
            with self._cachepath(self._classpath_file) as classpath:
                group_cp = []
                with self.context.state('classpath', []) as cp:
                    for path in classpath:
                        if self._map_jar(path):
                            for conf in self._confs:
                                cp.append((conf, path.strip()))
                                groups.update_compatible_classpaths(group_key, [(conf, path.strip())])
    if self._report:
        self._generate_ivy_report()
    if self.context.products.isrequired('ivy_jar_products'):
        self._populate_ivy_jar_products()
    create_jardeps_for = self.context.products.isrequired(self._mapfor_typename())
    if create_jardeps_for:
        genmap = self.context.products.get(self._mapfor_typename())
        for target in filter(create_jardeps_for, targets):
            self._mapjars(genmap, target)
