def execute(self, targets):
    'Resolves the specified confs for the configured targets and returns an iterator over\n    tuples of (conf, jar path).\n    '
    groups = self.context.products.get_data('exclusives_groups')
    executor = self.create_java_executor()
    for group_key in groups.get_group_keys():
        group_targets = (groups.get_targets_for_group_key(group_key) & set(targets))
        classpath = self.ivy_resolve(group_targets, executor=executor, symlink_ivyxml=True, workunit_name='ivy-resolve')
        if self.context.products.is_required_data('ivy_jar_products'):
            self._populate_ivy_jar_products(group_targets)
        for conf in self._confs:
            classpath_entries = map((lambda entry: (conf, entry)), classpath)
            groups.update_compatible_classpaths(group_key, classpath_entries)
        if self._report:
            self._generate_ivy_report(group_targets)
    create_jardeps_for = self.context.products.isrequired('jar_dependencies')
    if create_jardeps_for:
        genmap = self.context.products.get('jar_dependencies')
        for target in filter(create_jardeps_for, targets):
            self._ivy_utils.mapjars(genmap, target, executor=executor, workunit_factory=self.context.new_workunit)
