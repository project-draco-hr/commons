def execute(self, targets):
    '\n      Resolves the specified confs for the configured targets and returns an iterator over tuples\n      of (conf, jar path).\n    '

    def dirname_for_requested_targets(targets):
        'Where we put the classpath file for this set of targets.'
        sha = hashlib.sha1()
        for t in targets:
            sha.update(t.id)
        return sha.hexdigest()

    def is_classpath(t):
        return (is_internal(t) and any((jar for jar in t.jar_dependencies if jar.rev)))
    target_workdir = os.path.join(self._work_dir, dirname_for_requested_targets(targets))
    target_classpath_file = os.path.join(target_workdir, 'classpath')
    with self.changed(filter(is_classpath, targets), only_buildfiles=True) as changed_deps:
        if changed_deps:
            self._exec_ivy(target_workdir, targets, (['-cachepath', target_classpath_file, '-types', 'jar', 'bundle', '-confs'] + self._confs))
    if os.path.exists(target_classpath_file):
        if os.path.exists(self._classpath_file):
            os.unlink(self._classpath_file)
        os.symlink(target_classpath_file, self._classpath_file)
        ivyxml_symlink = os.path.join(self._work_dir, 'ivy.xml')
        target_ivyxml = os.path.join(target_workdir, 'ivy.xml')
        if os.path.exists(ivyxml_symlink):
            os.unlink(ivyxml_symlink)
        os.symlink(target_ivyxml, ivyxml_symlink)
        with self._cachepath(self._classpath_file) as classpath:
            with self.context.state('classpath', []) as cp:
                for path in classpath:
                    for conf in self._confs:
                        cp.append((conf, path.strip()))
    if self._report:
        self._generate_ivy_report()
    create_jardeps_for = self.context.products.isrequired('jar_dependencies')
    if create_jardeps_for:
        genmap = self.context.products.get('jar_dependencies')
        for target in filter(create_jardeps_for, targets):
            self._mapjars(genmap, target)
