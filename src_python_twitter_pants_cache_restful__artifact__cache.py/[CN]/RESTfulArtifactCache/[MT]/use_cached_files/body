def use_cached_files(self, cache_key):
    path = self._path_for_key(cache_key)
    try:
        response = self._request('GET', path)
        if (response is None):
            return False
        expected_size = int(response.getheader('content-length', (-1)))
        if (expected_size == (-1)):
            raise self.CacheError('No content-length header in HTTP response')
        done = False
        self.log.info(('Reading %d bytes from artifact cache at %s' % (expected_size, self._url_string(path))))
        with temporary_file() as outfile:
            total_bytes = 0
            while (not done):
                data = response.read(self.READ_SIZE)
                outfile.write(data)
                if (len(data) < self.READ_SIZE):
                    done = True
                total_bytes += len(data)
            outfile.close()
            self.log.debug(('Read %d bytes' % total_bytes))
            if (total_bytes != expected_size):
                raise self.CacheError(('Read only %d bytes from %d expected' % (total_bytes, expected_size)))
            with open_tar(outfile.name, 'r') as tarfile:
                tarfile.extractall(self.artifact_root)
        return True
    except Exception as e:
        self.log.warn(('Error while reading from artifact cache: %s' % e))
        return False
