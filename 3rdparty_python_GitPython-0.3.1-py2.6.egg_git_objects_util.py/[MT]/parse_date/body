def parse_date(string_date):
    '\n\tParse the given date as one of the following\n\t\n\t\t* Git internal format: timestamp offset\n\t\t* RFC 2822: Thu, 07 Apr 2005 22:13:13 +0200. \n\t\t* ISO 8601 2005-04-07T22:13:13\n\t\t\tThe T can be a space as well\n\t\t \n\t:return: Tuple(int(timestamp), int(offset)), both in seconds since epoch\n\t:raise ValueError: If the format could not be understood\n\t:note: Date can also be YYYY.MM.DD, MM/DD/YYYY and DD.MM.YYYY'
    try:
        if ((string_date.count(' ') == 1) and (string_date.rfind(':') == (-1))):
            (timestamp, offset) = string_date.split()
            timestamp = int(timestamp)
            return (timestamp, utctz_to_altz(verify_utctz(offset)))
        else:
            offset = '+0000'
            if (string_date[(-5)] in '-+'):
                offset = verify_utctz(string_date[(-5):])
                string_date = string_date[:(-6)]
            date_formats = list()
            splitter = (-1)
            if (',' in string_date):
                date_formats.append('%a, %d %b %Y')
                splitter = string_date.rfind(' ')
            else:
                date_formats.append('%Y-%m-%d')
                date_formats.append('%Y.%m.%d')
                date_formats.append('%m/%d/%Y')
                date_formats.append('%d.%m.%Y')
                splitter = string_date.rfind('T')
                if (splitter == (-1)):
                    splitter = string_date.rfind(' ')
            assert (splitter > (-1))
            time_part = string_date[(splitter + 1):]
            date_part = string_date[:splitter]
            tstruct = time.strptime(time_part, '%H:%M:%S')
            for fmt in date_formats:
                try:
                    dtstruct = time.strptime(date_part, fmt)
                    fstruct = time.struct_time((dtstruct.tm_year, dtstruct.tm_mon, dtstruct.tm_mday, tstruct.tm_hour, tstruct.tm_min, tstruct.tm_sec, dtstruct.tm_wday, dtstruct.tm_yday, tstruct.tm_isdst))
                    return (int(time.mktime(fstruct)), utctz_to_altz(offset))
                except ValueError:
                    continue
            raise ValueError('no format matched')
    except Exception:
        raise ValueError(('Unsupported date format: %s' % string_date))
