def bundle(self, app):
    bundledir = os.path.join(self.outdir, ('%s-bundle' % app.basename))
    self.context.log.info(('creating %s' % os.path.relpath(bundledir, get_buildroot())))
    safe_mkdir(bundledir, clean=True)
    classpath = OrderedSet()
    if (not self.deployjar):
        libdir = os.path.join(bundledir, 'libs')
        os.mkdir(libdir)
        for (basedir, externaljar) in self.list_jar_dependencies(app.binary):
            src = os.path.join(basedir, externaljar)
            link_name = os.path.join(libdir, externaljar)
            try:
                os.symlink(src, link_name)
            except OSError as e:
                if (e.errno == errno.EEXIST):
                    raise TaskError((('Trying to symlink %s to %s, but it is already symlinked to %s. ' % (link_name, src, os.readlink(link_name))) + 'Does the bundled target depend on multiple jvm_binary targets?'))
                else:
                    raise
            classpath.add(externaljar)
    for (basedir, jars) in self.context.products.get('jars').get(app.binary).items():
        if (len(jars) != 1):
            raise TaskError(('Expected 1 mapped binary but found: %s' % jars))
        binary = jars.pop()
        binary_jar = os.path.join(basedir, binary)
        bundle_jar = os.path.join(bundledir, binary)
        if (not classpath):
            os.symlink(binary_jar, bundle_jar)
        else:
            with open_zip(binary_jar, 'r') as src:
                with open_zip(bundle_jar, 'w', compression=ZIP_DEFLATED) as dest:
                    for item in src.infolist():
                        buffer = src.read(item.filename)
                        if (Manifest.PATH == item.filename):
                            manifest = Manifest(buffer)
                            manifest.addentry(Manifest.CLASS_PATH, ' '.join((os.path.join('libs', jar) for jar in classpath)))
                            buffer = manifest.contents()
                        dest.writestr(item, buffer)
    for bundle in app.bundles:
        for (path, relpath) in bundle.filemap.items():
            bundlepath = os.path.join(bundledir, relpath)
            safe_mkdir(os.path.dirname(bundlepath))
            os.symlink(path, bundlepath)
    return bundledir
