def bundle(self, app):
    'Create a self-contained application bundle containing the target\n    classes, dependencies and resources.\n    '
    assert isinstance(app, BundleCreate.App)
    bundledir = os.path.join(self.outdir, ('%s-bundle' % app.basename))
    self.context.log.info(('creating %s' % os.path.relpath(bundledir, get_buildroot())))
    safe_mkdir(bundledir, clean=True)
    classpath = OrderedSet()
    if (not self.deployjar):
        libdir = os.path.join(bundledir, 'libs')
        os.mkdir(libdir)

        def add_jars(target):
            target_jars = self.context.products.get('jars').get(target)
            if (target_jars is not None):
                for (basedir, jars) in target_jars.items():
                    for internaljar in jars:
                        os.symlink(os.path.join(basedir, internaljar), os.path.join(libdir, internaljar))
                        classpath.add(internaljar)
        app.binary.walk(add_jars, (lambda t: t.is_internal))
        for (basedir, externaljar) in self.list_jar_dependencies(app.binary):
            path = os.path.join(basedir, externaljar)
            os.symlink(path, os.path.join(libdir, externaljar))
            classpath.add(externaljar)
    for (basedir, jars) in self.context.products.get('jars').get(app.binary).items():
        if (len(jars) != 1):
            raise TaskError(('Expected 1 mapped binary for %s but found: %s' % (app.binary, jars)))
        binary = jars[0]
        binary_jar = os.path.join(basedir, binary)
        bundle_jar = os.path.join(bundledir, binary)
        if (not classpath):
            os.symlink(binary_jar, bundle_jar)
        else:
            with open_zip(binary_jar, 'r') as src:
                with open_zip(bundle_jar, 'w', compression=ZIP_DEFLATED) as dest:
                    for item in src.infolist():
                        buf = src.read(item.filename)
                        if (Manifest.PATH == item.filename):
                            manifest = Manifest(buf)
                            manifest.addentry(Manifest.CLASS_PATH, ' '.join((os.path.join('libs', jar) for jar in classpath)))
                            buf = manifest.contents()
                        dest.writestr(item, buf)
    for bundle in app.bundles:
        for (path, relpath) in bundle.filemap.items():
            bundlepath = os.path.join(bundledir, relpath)
            safe_mkdir(os.path.dirname(bundlepath))
            os.symlink(path, bundlepath)
    return bundledir
