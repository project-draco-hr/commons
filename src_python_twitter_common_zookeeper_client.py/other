from collections import namedtuple
from functools import wraps
import posixpath
import random
import socket
import sys
import threading
import zookeeper
try:
    from twitter.common import app
    WITH_APP = True
except ImportError:
    WITH_APP = False
try:
    from twitter.common import log
    from twitter.common.log.options import LogOptions
except ImportError:
    import logging as log
from twitter.common.metrics import AtomicGauge
try:
    from Queue import Queue, Empty
except ImportError:
    from queue import Queue, Empty
from .constants import Acl, Id
if WITH_APP:
    app.add_option('--zookeeper', default='zookeeper.local.twitter.com:2181', metavar='HOST:PORT[,HOST:PORT,...]', dest='twitter_common_zookeeper_ensemble', help='A comma-separated list of host:port of ZooKeeper servers.')
    app.add_option('--zookeeper_timeout', type='float', default=15.0, dest='twitter_common_zookeeper_timeout', help='The default timeout (in seconds) for ZK operations.')
    app.add_option('--zookeeper_reconnects', type='int', default=0, dest='twitter_common_zookeeper_reconnects', help='The number of permitted reconnections before failing zookeeper (0 = infinite).')
    app.add_option('--zookeeper_log_level', dest='twitter_common_zookeeper_log_level_override', choices=('NONE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL'), default='', help='Override the default ZK logging level.')


    class ZookeeperLoggingSubsystem(app.Module):
        _ZK_LOG_LEVEL_MAP = {log.DEBUG: zookeeper.LOG_LEVEL_DEBUG, log.INFO: zookeeper.LOG_LEVEL_INFO, log.WARN: zookeeper.LOG_LEVEL_WARN, log.ERROR: zookeeper.LOG_LEVEL_ERROR, log.FATAL: zookeeper.LOG_LEVEL_ERROR, }

        def __init__(self):
            app.Module.__init__(self, __name__, description='Zookeeper logging subsystem.')

        def setup_function(self):
            log_level_override = app.get_options().twitter_common_zookeeper_log_level_override
            self._set_log_level(log_level_override=log_level_override)

        def _set_log_level(self, log_level_override=''):
            stderr_log_level = LogOptions.stderr_log_level()
            if ((stderr_log_level == log.INFO) and (log_level_override != 'INFO')):
                stderr_log_level = log.FATAL
            log_level = getattr(log, log_level_override, stderr_log_level)
            zk_log_level = ZookeeperLoggingSubsystem._ZK_LOG_LEVEL_MAP.get(log_level, zookeeper.LOG_LEVEL_ERROR)
            zookeeper.set_debug_level(zk_log_level)
    app.register_module(ZookeeperLoggingSubsystem())
del Acls, Ids, Perms
