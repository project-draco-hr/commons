{
  try {
    final Supplier<byte[]> data=new Supplier<byte[]>(){
      @Override public byte[] get(){
        return server.getSerialized();
      }
    }
;
    backoffHelper.doUntilSuccess(new ExceptionalSupplier<Boolean,RuntimeException>(){
      @Override public Boolean get(){
        try {
          if (!cancelled) {
            membership=group.join(data);
          }
          return true;
        }
 catch (        Exception e) {
          LOG.log(Level.WARNING,"Join thread failed to join as " + server + ". Will retry.",e);
        }
        return false;
      }
    }
);
synchronized (this) {
      while (!cancelled) {
        wait();
      }
    }
    if (membership != null) {
      try {
        membership.cancel();
      }
 catch (      JoinException e) {
        LOG.log(Level.WARNING,"Join thread cancel() failed for '" + server + "'. Ignored.",e);
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.log(Level.WARNING,"Join thread was interrupted, which should never happen.",e);
  }
}
