def test_extract_target(self):
    jar1 = MockTarget('jar1', rev=1)
    jar2 = MockTarget('jar2', rev=1)
    jar3 = MockTarget('jar3', rev=1)
    jar4 = MockTarget('jar4', rev=1)
    f = MockTarget('f', is_codegen=True)
    b = MockTarget('b', is_codegen=True, internal_dependencies=[f])
    d = MockTarget('d', internal_dependencies=[f], jar_dependencies=[jar1])
    e = MockTarget('e', jar_dependencies=[jar2])
    c = MockTarget('c', is_codegen=True, internal_dependencies=[d, e], jar_dependencies=[jar3])
    a = MockTarget('a', internal_dependencies=[c, b, e], jar_dependencies=[jar4])
    (internal_deps, jar_deps) = _extract_target(a, (lambda target: True))
    self.assertEquals(OrderedSet([c, b]), internal_deps)
    self.assertEquals(OrderedSet([f]), c.internal_dependencies, 'Expected depth first walk to roll up f to 1st visited dependee')
    self.assertEquals(OrderedSet(), b.internal_dependencies, 'Expected depth first walk to roll up f to 1st visited dependee')
    self.assertEquals(set([jar1, jar2, jar4]), set(jar_deps))
