def _runjava_common(self, runjava, main, classpath=None, opts=None, args=None, jvmargs=None, workunit_name=None, workunit_labels=None):
    workunit_labels = (workunit_labels[:] if workunit_labels else [])
    cp = ((self._classpath or []) + (classpath or []))
    cmd_str = binary_util.runjava_cmd_str(jvmargs=jvmargs, classpath=cp, main=main, opts=opts, args=args)
    workunit_name = (workunit_name or main)
    if self._daemon:
        workunit_labels += [WorkUnit.TOOL, WorkUnit.NAILGUN]
        with self.context.new_workunit(name=workunit_name, labels=workunit_labels, cmd=cmd_str) as workunit:
            nailgun = self._get_nailgun_client(workunit)

            def call_nailgun(main_class, *args):
                if self.dry_run:
                    print ('********** NailgunClient dry run: %s' % cmd_str)
                    return 0
                else:
                    return nailgun(main_class, *args)
            try:
                if cp:
                    call_nailgun('ng-cp', *[os.path.relpath(jar, get_buildroot()) for jar in cp])
                opts_args = []
                if opts:
                    opts_args.extend(opts)
                if args:
                    opts_args.extend(args)
                ret = call_nailgun(main, *opts_args)
                workunit.set_outcome((WorkUnit.FAILURE if ret else WorkUnit.SUCCESS))
                return ret
            except NailgunError:
                self._ng_shutdown()
                raise
    else:

        def runjava_workunit_factory(name, labels=list(), cmd=''):
            return self.context.new_workunit(name=name, labels=(workunit_labels + labels), cmd=cmd)
        ret = runjava(main=main, classpath=cp, opts=opts, args=args, jvmargs=jvmargs, workunit_factory=runjava_workunit_factory, workunit_name=workunit_name, dryrun=self.dry_run)
        if self.dry_run:
            print ('********** Direct Java dry run: %s' % ret)
            return 0
        else:
            return ret
