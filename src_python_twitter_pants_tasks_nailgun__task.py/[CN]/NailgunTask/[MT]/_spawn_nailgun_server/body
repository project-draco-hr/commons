def _spawn_nailgun_server(self):
    log.info('No ng server found, spawning...')
    with _safe_open(self._ng_out, 'w'):
        pass
    if os.path.exists(self._pidfile):
        os.remove(self._pidfile)
    pid = os.fork()
    if (pid != 0):
        return self._await_nailgun_server()
    os.setsid()
    in_fd = open('/dev/null', 'w')
    out_fd = safe_open(self._ng_out, 'w')
    err_fd = safe_open(self._ng_err, 'w')
    args = ['java']
    if self._ng_server_args:
        args.extend(self._ng_server_args)
    args.append(NailgunTask.PANTS_NG_ARG)
    args.append(NailgunTask.create_pidfile_arg(self._pidfile))
    ng_classpath = os.pathsep.join(binary_util.profile_classpath(self._nailgun_profile))
    args.extend(['-cp', ng_classpath, 'com.martiansoftware.nailgun.NGServer', ':0'])
    log.debug(('Executing: %s' % ' '.join(args)))
    with binary_util.safe_classpath(logger=log.warn):
        process = subprocess.Popen(args, stdin=in_fd, stdout=out_fd, stderr=err_fd, close_fds=True, cwd=get_buildroot())
        with _safe_open(self._pidfile, 'w') as pidfile:
            pidfile.write(('%d' % process.pid))
        log.debug(('Spawned ng server @ %d' % process.pid))
        os._exit(0)
