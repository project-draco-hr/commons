def _spawn_nailgun_server(self, workunit):
    self.context.log.debug('No ng server found, spawning...')
    with _safe_open(self._ng_out, 'w'):
        pass
    ng_classpath = os.pathsep.join(self._bootstrap_utils.get_jvm_build_tools_classpath(self._nailgun_bootstrap_tools))
    pid = os.fork()
    if (pid != 0):
        return self._await_nailgun_server(workunit)
    os.setsid()
    in_fd = open('/dev/null', 'w')
    out_fd = safe_open(self._ng_out, 'w')
    err_fd = safe_open(self._ng_err, 'w')
    args = ['java']
    if self._ng_server_args:
        args.extend(self._ng_server_args)
    args.append(NailgunTask.PANTS_NG_ARG)
    args.append(self._identifier_arg)
    args.extend(['-cp', ng_classpath, 'com.martiansoftware.nailgun.NGServer', ':0'])
    s = ' '.join(args)
    with binary_util.safe_classpath():
        subprocess.Popen(args, stdin=in_fd, stdout=out_fd, stderr=err_fd, close_fds=True, cwd=get_buildroot())
        os._exit(0)
