def runjava(self, main, classpath=None, args=None, jvmargs=None):
    '\n      Runs the java main using the given classpath and args.  If --no-ng-daemons is specified then\n      the java main is run in a freshly spawned subprocess, otherwise a persistent nailgun server\n      dedicated to this Task subclass is used to speed up amortized run times.\n    '
    cp = ((self._classpath or []) + (classpath or []))
    if self._daemon:
        nailgun = self._get_nailgun_client()

        def call_nailgun(main_class, *args):
            if self.dry_run:
                print ('********** NailgunClient dry run: %s %s' % (main_class, ' '.join(args)))
                return 0
            else:
                return nailgun(main_class, *args)
        try:
            if cp:
                call_nailgun('ng-cp', *[os.path.relpath(jar, get_buildroot()) for jar in cp])
            return call_nailgun(main, *args)
        except NailgunError as e:
            self._ng_shutdown()
            raise e
    else:
        only_write_cmd_line_to = (StringIO.StringIO() if self.dry_run else None)
        ret = binary_utils.runjava(main=main, classpath=cp, args=args, jvmargs=jvmargs, only_write_cmd_line_to=only_write_cmd_line_to)
        if only_write_cmd_line_to:
            print ('********** Direct Java dry run: %s' % only_write_cmd_line_to.getvalue())
            only_write_cmd_line_to.close()
        return ret
