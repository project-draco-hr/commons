{
  Function<Annotation,Optional<ValueVerifier<T>>> toVerifier=new Function<Annotation,Optional<ValueVerifier<T>>>(){
    @Override public Optional<ValueVerifier<T>> apply(    Annotation annotation){
      @Nullable Verifier<? super T> verifier=verifierOracle.get(type,annotation);
      if (verifier != null) {
        return Optional.of(new ValueVerifier<T>(verifier,annotation));
      }
 else {
        return Optional.absent();
      }
    }
  }
;
  return Optional.presentInstances(Iterables.transform(verifierAnnotations,toVerifier));
}
