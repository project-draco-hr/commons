def __init__(self, artifact_caches, backfill=True):
    'We delegate to artifact_caches, a list of ArtifactCache instances, in order.\n\n    If backfill is true then we populate earlier caches that were missing an artifact,\n    if that artifact was found in a later cache. This is useful for priming a local cache\n    from a remote one.\n    '
    if (not artifact_caches):
        raise ValueError('Must provide at least one underlying artifact cache')
    log = artifact_caches[0].log
    artifact_root = artifact_caches[0].artifact_root
    if any(((x.artifact_root != artifact_root) for x in artifact_caches)):
        raise ValueError('Combined artifact caches must all have the same artifact root.')
    read_only = all((x.read_only for x in artifact_caches))
    ArtifactCache.__init__(self, log, artifact_root, read_only)
    self._artifact_caches = artifact_caches
    self._backfill = backfill
