{
  Listener listener=createMock(Listener.class);
  Capture<Iterable<? extends Entry>> originals=new Capture<Iterable<? extends Entry>>();
  Capture<Entry> replacement=new Capture<Entry>();
  listener.onReplace(capture(originals),capture(replacement));
  replay(listener);
  File one=folder.newFile("one");
  File two=folder.newFile("two");
  File three=folder.newFile("three");
  jarBuilder(folder.newFile(),listener).add(one,"replaced/write").add(two,"replaced/write").add(three,"replaced/write").write(DuplicateHandler.always(DuplicateAction.REPLACE));
  assertEquals(ImmutableList.of("one","two"),FluentIterable.from(originals.getValue()).transform(GET_NAME).toList());
  assertEquals("three",replacement.getValue().getName());
  assertEquals("replaced/write",replacement.getValue().getJarPath());
}
