def allocate_port(self, name, port=None):
    if (port is not None):
        if ((name in self._ports) and (self._ports[name] != port)):
            raise EphemeralPortAllocator.PortConflict(('Port binding %s=>%s conflicts with current binding %s=>%s' % (name, port, name, self._ports[name])))
        else:
            self._ports[name] = port
            return port
    if (name in self._ports):
        return self._ports[name]
    while True:
        rand_port = random.randint(*EphemeralPortAllocator.SOCKET_RANGE)
        if (rand_port in self._ports.values()):
            continue
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.bind(('localhost', rand_port))
            s.close()
            self._ports[name] = rand_port
            break
        except OSError as e:
            if (e.errno == errno.EADDRINUSE):
                log.warning(('Could not bind port: %s' % e))
                time.sleep(0.2)
                continue
            else:
                raise
    return self._ports[name]
